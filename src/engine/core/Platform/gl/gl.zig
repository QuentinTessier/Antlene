pub const Types = @import("types.zig");

const win32 = struct {
    usingnamespace @import("std").os.windows;
    usingnamespace @import("std").os.windows.user32;
    usingnamespace @import("../../Platform/win32/win32_extended.zig");
};

pub const KHRONOS_MAX_ENUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7FFFFFFF, .hexadecimal);
pub const DEPTH_BUFFER_BIT = @as(c_int, 0x00000100);
pub const STENCIL_BUFFER_BIT = @as(c_int, 0x00000400);
pub const COLOR_BUFFER_BIT = @as(c_int, 0x00004000);
pub const FALSE = @as(c_int, 0);
pub const TRUE = @as(c_int, 1);
pub const POINTS = @as(c_int, 0x0000);
pub const LINES = @as(c_int, 0x0001);
pub const LINE_LOOP = @as(c_int, 0x0002);
pub const LINE_STRIP = @as(c_int, 0x0003);
pub const TRIANGLES = @as(c_int, 0x0004);
pub const TRIANGLE_STRIP = @as(c_int, 0x0005);
pub const TRIANGLE_FAN = @as(c_int, 0x0006);
pub const QUADS = @as(c_int, 0x0007);
pub const NEVER = @as(c_int, 0x0200);
pub const LESS = @as(c_int, 0x0201);
pub const EQUAL = @as(c_int, 0x0202);
pub const LEQUAL = @as(c_int, 0x0203);
pub const GREATER = @as(c_int, 0x0204);
pub const NOTEQUAL = @as(c_int, 0x0205);
pub const GEQUAL = @as(c_int, 0x0206);
pub const ALWAYS = @as(c_int, 0x0207);
pub const ZERO = @as(c_int, 0);
pub const ONE = @as(c_int, 1);
pub const SRC_COLOR = @as(c_int, 0x0300);
pub const ONE_MINUS_SRC_COLOR = @as(c_int, 0x0301);
pub const SRC_ALPHA = @as(c_int, 0x0302);
pub const ONE_MINUS_SRC_ALPHA = @as(c_int, 0x0303);
pub const DST_ALPHA = @as(c_int, 0x0304);
pub const ONE_MINUS_DST_ALPHA = @as(c_int, 0x0305);
pub const DST_COLOR = @as(c_int, 0x0306);
pub const ONE_MINUS_DST_COLOR = @as(c_int, 0x0307);
pub const SRC_ALPHA_SATURATE = @as(c_int, 0x0308);
pub const NONE = @as(c_int, 0);
pub const FRONT_LEFT = @as(c_int, 0x0400);
pub const FRONT_RIGHT = @as(c_int, 0x0401);
pub const BACK_LEFT = @as(c_int, 0x0402);
pub const BACK_RIGHT = @as(c_int, 0x0403);
pub const FRONT = @as(c_int, 0x0404);
pub const BACK = @as(c_int, 0x0405);
pub const LEFT = @as(c_int, 0x0406);
pub const RIGHT = @as(c_int, 0x0407);
pub const FRONT_AND_BACK = @as(c_int, 0x0408);
pub const NO_ERROR = @as(c_int, 0);
pub const INVALID_ENUM = @as(c_int, 0x0500);
pub const INVALID_VALUE = @as(c_int, 0x0501);
pub const INVALID_OPERATION = @as(c_int, 0x0502);
pub const OUT_OF_MEMORY = @as(c_int, 0x0505);
pub const CW = @as(c_int, 0x0900);
pub const CCW = @as(c_int, 0x0901);
pub const POINT_SIZE = @as(c_int, 0x0B11);
pub const POINT_SIZE_RANGE = @as(c_int, 0x0B12);
pub const POINT_SIZE_GRANULARITY = @as(c_int, 0x0B13);
pub const LINE_SMOOTH = @as(c_int, 0x0B20);
pub const LINE_WIDTH = @as(c_int, 0x0B21);
pub const LINE_WIDTH_RANGE = @as(c_int, 0x0B22);
pub const LINE_WIDTH_GRANULARITY = @as(c_int, 0x0B23);
pub const POLYGON_MODE = @as(c_int, 0x0B40);
pub const POLYGON_SMOOTH = @as(c_int, 0x0B41);
pub const CULL_FACE = @as(c_int, 0x0B44);
pub const CULL_FACE_MODE = @as(c_int, 0x0B45);
pub const FRONT_FACE = @as(c_int, 0x0B46);
pub const DEPTH_RANGE = @as(c_int, 0x0B70);
pub const DEPTH_TEST = @as(c_int, 0x0B71);
pub const DEPTH_WRITEMASK = @as(c_int, 0x0B72);
pub const DEPTH_CLEAR_VALUE = @as(c_int, 0x0B73);
pub const DEPTH_FUNC = @as(c_int, 0x0B74);
pub const STENCIL_TEST = @as(c_int, 0x0B90);
pub const STENCIL_CLEAR_VALUE = @as(c_int, 0x0B91);
pub const STENCIL_FUNC = @as(c_int, 0x0B92);
pub const STENCIL_VALUE_MASK = @as(c_int, 0x0B93);
pub const STENCIL_FAIL = @as(c_int, 0x0B94);
pub const STENCIL_PASS_DEPTH_FAIL = @as(c_int, 0x0B95);
pub const STENCIL_PASS_DEPTH_PASS = @as(c_int, 0x0B96);
pub const STENCIL_REF = @as(c_int, 0x0B97);
pub const STENCIL_WRITEMASK = @as(c_int, 0x0B98);
pub const VIEWPORT = @as(c_int, 0x0BA2);
pub const DITHER = @as(c_int, 0x0BD0);
pub const BLEND_DST = @as(c_int, 0x0BE0);
pub const BLEND_SRC = @as(c_int, 0x0BE1);
pub const BLEND = @as(c_int, 0x0BE2);
pub const LOGIC_OP_MODE = @as(c_int, 0x0BF0);
pub const DRAW_BUFFER = @as(c_int, 0x0C01);
pub const READ_BUFFER = @as(c_int, 0x0C02);
pub const SCISSOR_BOX = @as(c_int, 0x0C10);
pub const SCISSOR_TEST = @as(c_int, 0x0C11);
pub const COLOR_CLEAR_VALUE = @as(c_int, 0x0C22);
pub const COLOR_WRITEMASK = @as(c_int, 0x0C23);
pub const DOUBLEBUFFER = @as(c_int, 0x0C32);
pub const STEREO = @as(c_int, 0x0C33);
pub const LINE_SMOOTH_HINT = @as(c_int, 0x0C52);
pub const POLYGON_SMOOTH_HINT = @as(c_int, 0x0C53);
pub const UNPACK_SWAP_BYTES = @as(c_int, 0x0CF0);
pub const UNPACK_LSB_FIRST = @as(c_int, 0x0CF1);
pub const UNPACK_ROW_LENGTH = @as(c_int, 0x0CF2);
pub const UNPACK_SKIP_ROWS = @as(c_int, 0x0CF3);
pub const UNPACK_SKIP_PIXELS = @as(c_int, 0x0CF4);
pub const UNPACK_ALIGNMENT = @as(c_int, 0x0CF5);
pub const PACK_SWAP_BYTES = @as(c_int, 0x0D00);
pub const PACK_LSB_FIRST = @as(c_int, 0x0D01);
pub const PACK_ROW_LENGTH = @as(c_int, 0x0D02);
pub const PACK_SKIP_ROWS = @as(c_int, 0x0D03);
pub const PACK_SKIP_PIXELS = @as(c_int, 0x0D04);
pub const PACK_ALIGNMENT = @as(c_int, 0x0D05);
pub const MAX_TEXTURE_SIZE = @as(c_int, 0x0D33);
pub const MAX_VIEWPORT_DIMS = @as(c_int, 0x0D3A);
pub const SUBPIXEL_BITS = @as(c_int, 0x0D50);
pub const TEXTURE_1D = @as(c_int, 0x0DE0);
pub const TEXTURE_2D = @as(c_int, 0x0DE1);
pub const TEXTURE_WIDTH = @as(c_int, 0x1000);
pub const TEXTURE_HEIGHT = @as(c_int, 0x1001);
pub const TEXTURE_BORDER_COLOR = @as(c_int, 0x1004);
pub const DONT_CARE = @as(c_int, 0x1100);
pub const FASTEST = @as(c_int, 0x1101);
pub const NICEST = @as(c_int, 0x1102);
pub const BYTE = @as(c_int, 0x1400);
pub const UNSIGNED_BYTE = @as(c_int, 0x1401);
pub const SHORT = @as(c_int, 0x1402);
pub const UNSIGNED_SHORT = @as(c_int, 0x1403);
pub const INT = @as(c_int, 0x1404);
pub const UNSIGNED_INT = @as(c_int, 0x1405);
pub const FLOAT = @as(c_int, 0x1406);
pub const STACK_OVERFLOW = @as(c_int, 0x0503);
pub const STACK_UNDERFLOW = @as(c_int, 0x0504);
pub const CLEAR = @as(c_int, 0x1500);
pub const AND = @as(c_int, 0x1501);
pub const AND_REVERSE = @as(c_int, 0x1502);
pub const COPY = @as(c_int, 0x1503);
pub const AND_INVERTED = @as(c_int, 0x1504);
pub const NOOP = @as(c_int, 0x1505);
pub const XOR = @as(c_int, 0x1506);
pub const OR = @as(c_int, 0x1507);
pub const NOR = @as(c_int, 0x1508);
pub const EQUIV = @as(c_int, 0x1509);
pub const INVERT = @as(c_int, 0x150A);
pub const OR_REVERSE = @as(c_int, 0x150B);
pub const COPY_INVERTED = @as(c_int, 0x150C);
pub const OR_INVERTED = @as(c_int, 0x150D);
pub const NAND = @as(c_int, 0x150E);
pub const SET = @as(c_int, 0x150F);
pub const TEXTURE = @as(c_int, 0x1702);
pub const COLOR = @as(c_int, 0x1800);
pub const DEPTH = @as(c_int, 0x1801);
pub const STENCIL = @as(c_int, 0x1802);
pub const STENCIL_INDEX = @as(c_int, 0x1901);
pub const DEPTH_COMPONENT = @as(c_int, 0x1902);
pub const RED = @as(c_int, 0x1903);
pub const GREEN = @as(c_int, 0x1904);
pub const BLUE = @as(c_int, 0x1905);
pub const ALPHA = @as(c_int, 0x1906);
pub const RGB = @as(c_int, 0x1907);
pub const RGBA = @as(c_int, 0x1908);
pub const POINT = @as(c_int, 0x1B00);
pub const LINE = @as(c_int, 0x1B01);
pub const FILL = @as(c_int, 0x1B02);
pub const KEEP = @as(c_int, 0x1E00);
pub const REPLACE = @as(c_int, 0x1E01);
pub const INCR = @as(c_int, 0x1E02);
pub const DECR = @as(c_int, 0x1E03);
pub const VENDOR = @as(c_int, 0x1F00);
pub const RENDERER = @as(c_int, 0x1F01);
pub const VERSION = @as(c_int, 0x1F02);
pub const EXTENSIONS = @as(c_int, 0x1F03);
pub const NEAREST = @as(c_int, 0x2600);
pub const LINEAR = @as(c_int, 0x2601);
pub const NEAREST_MIPMAP_NEAREST = @as(c_int, 0x2700);
pub const LINEAR_MIPMAP_NEAREST = @as(c_int, 0x2701);
pub const NEAREST_MIPMAP_LINEAR = @as(c_int, 0x2702);
pub const LINEAR_MIPMAP_LINEAR = @as(c_int, 0x2703);
pub const TEXTURE_MAG_FILTER = @as(c_int, 0x2800);
pub const TEXTURE_MIN_FILTER = @as(c_int, 0x2801);
pub const TEXTURE_WRAP_S = @as(c_int, 0x2802);
pub const TEXTURE_WRAP_T = @as(c_int, 0x2803);
pub const REPEAT = @as(c_int, 0x2901);
pub const CURRENT_BIT = @as(c_int, 0x00000001);
pub const POINT_BIT = @as(c_int, 0x00000002);
pub const LINE_BIT = @as(c_int, 0x00000004);
pub const POLYGON_BIT = @as(c_int, 0x00000008);
pub const POLYGON_STIPPLE_BIT = @as(c_int, 0x00000010);
pub const PIXEL_MODE_BIT = @as(c_int, 0x00000020);
pub const LIGHTING_BIT = @as(c_int, 0x00000040);
pub const FOG_BIT = @as(c_int, 0x00000080);
pub const ACCUM_BUFFER_BIT = @as(c_int, 0x00000200);
pub const VIEWPORT_BIT = @as(c_int, 0x00000800);
pub const TRANSFORM_BIT = @as(c_int, 0x00001000);
pub const ENABLE_BIT = @as(c_int, 0x00002000);
pub const HINT_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal);
pub const EVAL_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal);
pub const LIST_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal);
pub const TEXTURE_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal);
pub const SCISSOR_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal);
pub const ALL_ATTRIB_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const QUAD_STRIP = @as(c_int, 0x0008);
pub const POLYGON = @as(c_int, 0x0009);
pub const ACCUM = @as(c_int, 0x0100);
pub const LOAD = @as(c_int, 0x0101);
pub const RETURN = @as(c_int, 0x0102);
pub const MULT = @as(c_int, 0x0103);
pub const ADD = @as(c_int, 0x0104);
pub const AUX0 = @as(c_int, 0x0409);
pub const AUX1 = @as(c_int, 0x040A);
pub const AUX2 = @as(c_int, 0x040B);
pub const AUX3 = @as(c_int, 0x040C);
pub const _2D = @as(c_int, 0x0600);
pub const _3D = @as(c_int, 0x0601);
pub const _3D_COLOR = @as(c_int, 0x0602);
pub const _3D_COLOR_TEXTURE = @as(c_int, 0x0603);
pub const _4D_COLOR_TEXTURE = @as(c_int, 0x0604);
pub const PASS_THROUGH_TOKEN = @as(c_int, 0x0700);
pub const POINT_TOKEN = @as(c_int, 0x0701);
pub const LINE_TOKEN = @as(c_int, 0x0702);
pub const POLYGON_TOKEN = @as(c_int, 0x0703);
pub const BITMAP_TOKEN = @as(c_int, 0x0704);
pub const DRAW_PIXEL_TOKEN = @as(c_int, 0x0705);
pub const COPY_PIXEL_TOKEN = @as(c_int, 0x0706);
pub const LINE_RESET_TOKEN = @as(c_int, 0x0707);
pub const EXP = @as(c_int, 0x0800);
pub const EXP2 = @as(c_int, 0x0801);
pub const COEFF = @as(c_int, 0x0A00);
pub const ORDER = @as(c_int, 0x0A01);
pub const DOMAIN = @as(c_int, 0x0A02);
pub const PIXEL_MAP_I_TO_I = @as(c_int, 0x0C70);
pub const PIXEL_MAP_S_TO_S = @as(c_int, 0x0C71);
pub const PIXEL_MAP_I_TO_R = @as(c_int, 0x0C72);
pub const PIXEL_MAP_I_TO_G = @as(c_int, 0x0C73);
pub const PIXEL_MAP_I_TO_B = @as(c_int, 0x0C74);
pub const PIXEL_MAP_I_TO_A = @as(c_int, 0x0C75);
pub const PIXEL_MAP_R_TO_R = @as(c_int, 0x0C76);
pub const PIXEL_MAP_G_TO_G = @as(c_int, 0x0C77);
pub const PIXEL_MAP_B_TO_B = @as(c_int, 0x0C78);
pub const PIXEL_MAP_A_TO_A = @as(c_int, 0x0C79);
pub const CURRENT_COLOR = @as(c_int, 0x0B00);
pub const CURRENT_INDEX = @as(c_int, 0x0B01);
pub const CURRENT_NORMAL = @as(c_int, 0x0B02);
pub const CURRENT_TEXTURE_COORDS = @as(c_int, 0x0B03);
pub const CURRENT_RASTER_COLOR = @as(c_int, 0x0B04);
pub const CURRENT_RASTER_INDEX = @as(c_int, 0x0B05);
pub const CURRENT_RASTER_TEXTURE_COORDS = @as(c_int, 0x0B06);
pub const CURRENT_RASTER_POSITION = @as(c_int, 0x0B07);
pub const CURRENT_RASTER_POSITION_VALID = @as(c_int, 0x0B08);
pub const CURRENT_RASTER_DISTANCE = @as(c_int, 0x0B09);
pub const POINT_SMOOTH = @as(c_int, 0x0B10);
pub const LINE_STIPPLE = @as(c_int, 0x0B24);
pub const LINE_STIPPLE_PATTERN = @as(c_int, 0x0B25);
pub const LINE_STIPPLE_REPEAT = @as(c_int, 0x0B26);
pub const LIST_MODE = @as(c_int, 0x0B30);
pub const MAX_LIST_NESTING = @as(c_int, 0x0B31);
pub const LIST_BASE = @as(c_int, 0x0B32);
pub const LIST_INDEX = @as(c_int, 0x0B33);
pub const POLYGON_STIPPLE = @as(c_int, 0x0B42);
pub const EDGE_FLAG = @as(c_int, 0x0B43);
pub const LIGHTING = @as(c_int, 0x0B50);
pub const LIGHT_MODEL_LOCAL_VIEWER = @as(c_int, 0x0B51);
pub const LIGHT_MODEL_TWO_SIDE = @as(c_int, 0x0B52);
pub const LIGHT_MODEL_AMBIENT = @as(c_int, 0x0B53);
pub const SHADE_MODEL = @as(c_int, 0x0B54);
pub const COLOR_MATERIAL_FACE = @as(c_int, 0x0B55);
pub const COLOR_MATERIAL_PARAMETER = @as(c_int, 0x0B56);
pub const COLOR_MATERIAL = @as(c_int, 0x0B57);
pub const FOG = @as(c_int, 0x0B60);
pub const FOG_INDEX = @as(c_int, 0x0B61);
pub const FOG_DENSITY = @as(c_int, 0x0B62);
pub const FOG_START = @as(c_int, 0x0B63);
pub const FOG_END = @as(c_int, 0x0B64);
pub const FOG_MODE = @as(c_int, 0x0B65);
pub const FOG_COLOR = @as(c_int, 0x0B66);
pub const ACCUM_CLEAR_VALUE = @as(c_int, 0x0B80);
pub const MATRIX_MODE = @as(c_int, 0x0BA0);
pub const NORMALIZE = @as(c_int, 0x0BA1);
pub const MODELVIEW_STACK_DEPTH = @as(c_int, 0x0BA3);
pub const PROJECTION_STACK_DEPTH = @as(c_int, 0x0BA4);
pub const TEXTURE_STACK_DEPTH = @as(c_int, 0x0BA5);
pub const MODELVIEW_MATRIX = @as(c_int, 0x0BA6);
pub const PROJECTION_MATRIX = @as(c_int, 0x0BA7);
pub const TEXTURE_MATRIX = @as(c_int, 0x0BA8);
pub const ATTRIB_STACK_DEPTH = @as(c_int, 0x0BB0);
pub const ALPHA_TEST = @as(c_int, 0x0BC0);
pub const ALPHA_TEST_FUNC = @as(c_int, 0x0BC1);
pub const ALPHA_TEST_REF = @as(c_int, 0x0BC2);
pub const LOGIC_OP = @as(c_int, 0x0BF1);
pub const AUX_BUFFERS = @as(c_int, 0x0C00);
pub const INDEX_CLEAR_VALUE = @as(c_int, 0x0C20);
pub const INDEX_WRITEMASK = @as(c_int, 0x0C21);
pub const INDEX_MODE = @as(c_int, 0x0C30);
pub const RGBA_MODE = @as(c_int, 0x0C31);
pub const RENDER_MODE = @as(c_int, 0x0C40);
pub const PERSPECTIVE_CORRECTION_HINT = @as(c_int, 0x0C50);
pub const POINT_SMOOTH_HINT = @as(c_int, 0x0C51);
pub const FOG_HINT = @as(c_int, 0x0C54);
pub const TEXTURE_GEN_S = @as(c_int, 0x0C60);
pub const TEXTURE_GEN_T = @as(c_int, 0x0C61);
pub const TEXTURE_GEN_R = @as(c_int, 0x0C62);
pub const TEXTURE_GEN_Q = @as(c_int, 0x0C63);
pub const PIXEL_MAP_I_TO_I_SIZE = @as(c_int, 0x0CB0);
pub const PIXEL_MAP_S_TO_S_SIZE = @as(c_int, 0x0CB1);
pub const PIXEL_MAP_I_TO_R_SIZE = @as(c_int, 0x0CB2);
pub const PIXEL_MAP_I_TO_G_SIZE = @as(c_int, 0x0CB3);
pub const PIXEL_MAP_I_TO_B_SIZE = @as(c_int, 0x0CB4);
pub const PIXEL_MAP_I_TO_A_SIZE = @as(c_int, 0x0CB5);
pub const PIXEL_MAP_R_TO_R_SIZE = @as(c_int, 0x0CB6);
pub const PIXEL_MAP_G_TO_G_SIZE = @as(c_int, 0x0CB7);
pub const PIXEL_MAP_B_TO_B_SIZE = @as(c_int, 0x0CB8);
pub const PIXEL_MAP_A_TO_A_SIZE = @as(c_int, 0x0CB9);
pub const MAP_COLOR = @as(c_int, 0x0D10);
pub const MAP_STENCIL = @as(c_int, 0x0D11);
pub const INDEX_SHIFT = @as(c_int, 0x0D12);
pub const INDEX_OFFSET = @as(c_int, 0x0D13);
pub const RED_SCALE = @as(c_int, 0x0D14);
pub const RED_BIAS = @as(c_int, 0x0D15);
pub const ZOOM_X = @as(c_int, 0x0D16);
pub const ZOOM_Y = @as(c_int, 0x0D17);
pub const GREEN_SCALE = @as(c_int, 0x0D18);
pub const GREEN_BIAS = @as(c_int, 0x0D19);
pub const BLUE_SCALE = @as(c_int, 0x0D1A);
pub const BLUE_BIAS = @as(c_int, 0x0D1B);
pub const ALPHA_SCALE = @as(c_int, 0x0D1C);
pub const ALPHA_BIAS = @as(c_int, 0x0D1D);
pub const DEPTH_SCALE = @as(c_int, 0x0D1E);
pub const DEPTH_BIAS = @as(c_int, 0x0D1F);
pub const MAX_EVAL_ORDER = @as(c_int, 0x0D30);
pub const MAX_LIGHTS = @as(c_int, 0x0D31);
pub const MAX_CLIP_PLANES = @as(c_int, 0x0D32);
pub const MAX_PIXEL_MAP_TABLE = @as(c_int, 0x0D34);
pub const MAX_ATTRIB_STACK_DEPTH = @as(c_int, 0x0D35);
pub const MAX_MODELVIEW_STACK_DEPTH = @as(c_int, 0x0D36);
pub const MAX_NAME_STACK_DEPTH = @as(c_int, 0x0D37);
pub const MAX_PROJECTION_STACK_DEPTH = @as(c_int, 0x0D38);
pub const MAX_TEXTURE_STACK_DEPTH = @as(c_int, 0x0D39);
pub const INDEX_BITS = @as(c_int, 0x0D51);
pub const RED_BITS = @as(c_int, 0x0D52);
pub const GREEN_BITS = @as(c_int, 0x0D53);
pub const BLUE_BITS = @as(c_int, 0x0D54);
pub const ALPHA_BITS = @as(c_int, 0x0D55);
pub const DEPTH_BITS = @as(c_int, 0x0D56);
pub const STENCIL_BITS = @as(c_int, 0x0D57);
pub const ACCUM_RED_BITS = @as(c_int, 0x0D58);
pub const ACCUM_GREEN_BITS = @as(c_int, 0x0D59);
pub const ACCUM_BLUE_BITS = @as(c_int, 0x0D5A);
pub const ACCUM_ALPHA_BITS = @as(c_int, 0x0D5B);
pub const NAME_STACK_DEPTH = @as(c_int, 0x0D70);
pub const AUTO_NORMAL = @as(c_int, 0x0D80);
pub const MAP1_COLOR_4 = @as(c_int, 0x0D90);
pub const MAP1_INDEX = @as(c_int, 0x0D91);
pub const MAP1_NORMAL = @as(c_int, 0x0D92);
pub const MAP1_TEXTURE_COORD_1 = @as(c_int, 0x0D93);
pub const MAP1_TEXTURE_COORD_2 = @as(c_int, 0x0D94);
pub const MAP1_TEXTURE_COORD_3 = @as(c_int, 0x0D95);
pub const MAP1_TEXTURE_COORD_4 = @as(c_int, 0x0D96);
pub const MAP1_VERTEX_3 = @as(c_int, 0x0D97);
pub const MAP1_VERTEX_4 = @as(c_int, 0x0D98);
pub const MAP2_COLOR_4 = @as(c_int, 0x0DB0);
pub const MAP2_INDEX = @as(c_int, 0x0DB1);
pub const MAP2_NORMAL = @as(c_int, 0x0DB2);
pub const MAP2_TEXTURE_COORD_1 = @as(c_int, 0x0DB3);
pub const MAP2_TEXTURE_COORD_2 = @as(c_int, 0x0DB4);
pub const MAP2_TEXTURE_COORD_3 = @as(c_int, 0x0DB5);
pub const MAP2_TEXTURE_COORD_4 = @as(c_int, 0x0DB6);
pub const MAP2_VERTEX_3 = @as(c_int, 0x0DB7);
pub const MAP2_VERTEX_4 = @as(c_int, 0x0DB8);
pub const MAP1_GRID_DOMAIN = @as(c_int, 0x0DD0);
pub const MAP1_GRID_SEGMENTS = @as(c_int, 0x0DD1);
pub const MAP2_GRID_DOMAIN = @as(c_int, 0x0DD2);
pub const MAP2_GRID_SEGMENTS = @as(c_int, 0x0DD3);
pub const TEXTURE_COMPONENTS = @as(c_int, 0x1003);
pub const TEXTURE_BORDER = @as(c_int, 0x1005);
pub const AMBIENT = @as(c_int, 0x1200);
pub const DIFFUSE = @as(c_int, 0x1201);
pub const SPECULAR = @as(c_int, 0x1202);
pub const POSITION = @as(c_int, 0x1203);
pub const SPOT_DIRECTION = @as(c_int, 0x1204);
pub const SPOT_EXPONENT = @as(c_int, 0x1205);
pub const SPOT_CUTOFF = @as(c_int, 0x1206);
pub const CONSTANT_ATTENUATION = @as(c_int, 0x1207);
pub const LINEAR_ATTENUATION = @as(c_int, 0x1208);
pub const QUADRATIC_ATTENUATION = @as(c_int, 0x1209);
pub const COMPILE = @as(c_int, 0x1300);
pub const COMPILE_AND_EXECUTE = @as(c_int, 0x1301);
pub const _2_BYTES = @as(c_int, 0x1407);
pub const _3_BYTES = @as(c_int, 0x1408);
pub const _4_BYTES = @as(c_int, 0x1409);
pub const EMISSION = @as(c_int, 0x1600);
pub const SHININESS = @as(c_int, 0x1601);
pub const AMBIENT_AND_DIFFUSE = @as(c_int, 0x1602);
pub const COLOR_INDEXES = @as(c_int, 0x1603);
pub const MODELVIEW = @as(c_int, 0x1700);
pub const PROJECTION = @as(c_int, 0x1701);
pub const COLOR_INDEX = @as(c_int, 0x1900);
pub const LUMINANCE = @as(c_int, 0x1909);
pub const LUMINANCE_ALPHA = @as(c_int, 0x190A);
pub const BITMAP = @as(c_int, 0x1A00);
pub const RENDER = @as(c_int, 0x1C00);
pub const FEEDBACK = @as(c_int, 0x1C01);
pub const SELECT = @as(c_int, 0x1C02);
pub const FLAT = @as(c_int, 0x1D00);
pub const SMOOTH = @as(c_int, 0x1D01);
pub const _S = @as(c_int, 0x2000);
pub const _T = @as(c_int, 0x2001);
pub const _R = @as(c_int, 0x2002);
pub const _Q = @as(c_int, 0x2003);
pub const MODULATE = @as(c_int, 0x2100);
pub const DECAL = @as(c_int, 0x2101);
pub const TEXTURE_ENV_MODE = @as(c_int, 0x2200);
pub const TEXTURE_ENV_COLOR = @as(c_int, 0x2201);
pub const TEXTURE_ENV = @as(c_int, 0x2300);
pub const EYE_LINEAR = @as(c_int, 0x2400);
pub const OBJECT_LINEAR = @as(c_int, 0x2401);
pub const SPHERE_MAP = @as(c_int, 0x2402);
pub const TEXTURE_GEN_MODE = @as(c_int, 0x2500);
pub const OBJECT_PLANE = @as(c_int, 0x2501);
pub const EYE_PLANE = @as(c_int, 0x2502);
pub const CLAMP = @as(c_int, 0x2900);
pub const CLIP_PLANE0 = @as(c_int, 0x3000);
pub const CLIP_PLANE1 = @as(c_int, 0x3001);
pub const CLIP_PLANE2 = @as(c_int, 0x3002);
pub const CLIP_PLANE3 = @as(c_int, 0x3003);
pub const CLIP_PLANE4 = @as(c_int, 0x3004);
pub const CLIP_PLANE5 = @as(c_int, 0x3005);
pub const LIGHT0 = @as(c_int, 0x4000);
pub const LIGHT1 = @as(c_int, 0x4001);
pub const LIGHT2 = @as(c_int, 0x4002);
pub const LIGHT3 = @as(c_int, 0x4003);
pub const LIGHT4 = @as(c_int, 0x4004);
pub const LIGHT5 = @as(c_int, 0x4005);
pub const LIGHT6 = @as(c_int, 0x4006);
pub const LIGHT7 = @as(c_int, 0x4007);
pub const COLOR_LOGIC_OP = @as(c_int, 0x0BF2);
pub const POLYGON_OFFSET_UNITS = @as(c_int, 0x2A00);
pub const POLYGON_OFFSET_POINT = @as(c_int, 0x2A01);
pub const POLYGON_OFFSET_LINE = @as(c_int, 0x2A02);
pub const POLYGON_OFFSET_FILL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8037, .hexadecimal);
pub const POLYGON_OFFSET_FACTOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8038, .hexadecimal);
pub const TEXTURE_BINDING_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8068, .hexadecimal);
pub const TEXTURE_BINDING_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8069, .hexadecimal);
pub const TEXTURE_INTERNAL_FORMAT = @as(c_int, 0x1003);
pub const TEXTURE_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805C, .hexadecimal);
pub const TEXTURE_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805D, .hexadecimal);
pub const TEXTURE_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805E, .hexadecimal);
pub const TEXTURE_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805F, .hexadecimal);
pub const DOUBLE = @as(c_int, 0x140A);
pub const PROXY_TEXTURE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8063, .hexadecimal);
pub const PROXY_TEXTURE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8064, .hexadecimal);
pub const R3_G3_B2 = @as(c_int, 0x2A10);
pub const RGB4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804F, .hexadecimal);
pub const RGB5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8050, .hexadecimal);
pub const RGB8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8051, .hexadecimal);
pub const RGB10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8052, .hexadecimal);
pub const RGB12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8053, .hexadecimal);
pub const RGB16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8054, .hexadecimal);
pub const RGBA2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8055, .hexadecimal);
pub const RGBA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8056, .hexadecimal);
pub const RGB5_A1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8057, .hexadecimal);
pub const RGBA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8058, .hexadecimal);
pub const RGB10_A2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8059, .hexadecimal);
pub const RGBA12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805A, .hexadecimal);
pub const RGBA16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805B, .hexadecimal);
pub const CLIENT_PIXEL_STORE_BIT = @as(c_int, 0x00000001);
pub const CLIENT_VERTEX_ARRAY_BIT = @as(c_int, 0x00000002);
pub const CLIENT_ALL_ATTRIB_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const VERTEX_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808E, .hexadecimal);
pub const NORMAL_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808F, .hexadecimal);
pub const COLOR_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8090, .hexadecimal);
pub const INDEX_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8091, .hexadecimal);
pub const TEXTURE_COORD_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8092, .hexadecimal);
pub const EDGE_FLAG_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8093, .hexadecimal);
pub const FEEDBACK_BUFFER_POINTER = @as(c_int, 0x0DF0);
pub const SELECTION_BUFFER_POINTER = @as(c_int, 0x0DF3);
pub const CLIENT_ATTRIB_STACK_DEPTH = @as(c_int, 0x0BB1);
pub const INDEX_LOGIC_OP = @as(c_int, 0x0BF1);
pub const MAX_CLIENT_ATTRIB_STACK_DEPTH = @as(c_int, 0x0D3B);
pub const FEEDBACK_BUFFER_SIZE = @as(c_int, 0x0DF1);
pub const FEEDBACK_BUFFER_TYPE = @as(c_int, 0x0DF2);
pub const SELECTION_BUFFER_SIZE = @as(c_int, 0x0DF4);
pub const VERTEX_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8074, .hexadecimal);
pub const NORMAL_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8075, .hexadecimal);
pub const COLOR_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8076, .hexadecimal);
pub const INDEX_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8077, .hexadecimal);
pub const TEXTURE_COORD_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8078, .hexadecimal);
pub const EDGE_FLAG_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8079, .hexadecimal);
pub const VERTEX_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807A, .hexadecimal);
pub const VERTEX_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807B, .hexadecimal);
pub const VERTEX_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807C, .hexadecimal);
pub const NORMAL_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807E, .hexadecimal);
pub const NORMAL_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807F, .hexadecimal);
pub const COLOR_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8081, .hexadecimal);
pub const COLOR_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8082, .hexadecimal);
pub const COLOR_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8083, .hexadecimal);
pub const INDEX_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8085, .hexadecimal);
pub const INDEX_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8086, .hexadecimal);
pub const TEXTURE_COORD_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8088, .hexadecimal);
pub const TEXTURE_COORD_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8089, .hexadecimal);
pub const TEXTURE_COORD_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808A, .hexadecimal);
pub const EDGE_FLAG_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808C, .hexadecimal);
pub const TEXTURE_LUMINANCE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8060, .hexadecimal);
pub const TEXTURE_INTENSITY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8061, .hexadecimal);
pub const TEXTURE_PRIORITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8066, .hexadecimal);
pub const TEXTURE_RESIDENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8067, .hexadecimal);
pub const ALPHA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803B, .hexadecimal);
pub const ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803C, .hexadecimal);
pub const ALPHA12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803D, .hexadecimal);
pub const ALPHA16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803E, .hexadecimal);
pub const LUMINANCE4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803F, .hexadecimal);
pub const LUMINANCE8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8040, .hexadecimal);
pub const LUMINANCE12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8041, .hexadecimal);
pub const LUMINANCE16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8042, .hexadecimal);
pub const LUMINANCE4_ALPHA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8043, .hexadecimal);
pub const LUMINANCE6_ALPHA2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8044, .hexadecimal);
pub const LUMINANCE8_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8045, .hexadecimal);
pub const LUMINANCE12_ALPHA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8046, .hexadecimal);
pub const LUMINANCE12_ALPHA12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8047, .hexadecimal);
pub const LUMINANCE16_ALPHA16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8048, .hexadecimal);
pub const INTENSITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8049, .hexadecimal);
pub const INTENSITY4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804A, .hexadecimal);
pub const INTENSITY8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804B, .hexadecimal);
pub const INTENSITY12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804C, .hexadecimal);
pub const INTENSITY16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804D, .hexadecimal);
pub const V2F = @as(c_int, 0x2A20);
pub const V3F = @as(c_int, 0x2A21);
pub const C4UB_V2F = @as(c_int, 0x2A22);
pub const C4UB_V3F = @as(c_int, 0x2A23);
pub const C3F_V3F = @as(c_int, 0x2A24);
pub const N3F_V3F = @as(c_int, 0x2A25);
pub const C4F_N3F_V3F = @as(c_int, 0x2A26);
pub const T2F_V3F = @as(c_int, 0x2A27);
pub const T4F_V4F = @as(c_int, 0x2A28);
pub const T2F_C4UB_V3F = @as(c_int, 0x2A29);
pub const T2F_C3F_V3F = @as(c_int, 0x2A2A);
pub const T2F_N3F_V3F = @as(c_int, 0x2A2B);
pub const T2F_C4F_N3F_V3F = @as(c_int, 0x2A2C);
pub const T4F_C4F_N3F_V4F = @as(c_int, 0x2A2D);
pub const UNSIGNED_BYTE_3_3_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8032, .hexadecimal);
pub const UNSIGNED_SHORT_4_4_4_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8033, .hexadecimal);
pub const UNSIGNED_SHORT_5_5_5_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8034, .hexadecimal);
pub const UNSIGNED_INT_8_8_8_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8035, .hexadecimal);
pub const UNSIGNED_INT_10_10_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8036, .hexadecimal);
pub const TEXTURE_BINDING_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806A, .hexadecimal);
pub const PACK_SKIP_IMAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806B, .hexadecimal);
pub const PACK_IMAGE_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806C, .hexadecimal);
pub const UNPACK_SKIP_IMAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806D, .hexadecimal);
pub const UNPACK_IMAGE_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806E, .hexadecimal);
pub const TEXTURE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806F, .hexadecimal);
pub const PROXY_TEXTURE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8070, .hexadecimal);
pub const TEXTURE_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8071, .hexadecimal);
pub const TEXTURE_WRAP_R = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8072, .hexadecimal);
pub const MAX_3D_TEXTURE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8073, .hexadecimal);
pub const UNSIGNED_BYTE_2_3_3_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8362, .hexadecimal);
pub const UNSIGNED_SHORT_5_6_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8363, .hexadecimal);
pub const UNSIGNED_SHORT_5_6_5_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8364, .hexadecimal);
pub const UNSIGNED_SHORT_4_4_4_4_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8365, .hexadecimal);
pub const UNSIGNED_SHORT_1_5_5_5_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8366, .hexadecimal);
pub const UNSIGNED_INT_8_8_8_8_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8367, .hexadecimal);
pub const UNSIGNED_INT_2_10_10_10_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8368, .hexadecimal);
pub const BGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E0, .hexadecimal);
pub const BGRA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E1, .hexadecimal);
pub const MAX_ELEMENTS_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E8, .hexadecimal);
pub const MAX_ELEMENTS_INDICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E9, .hexadecimal);
pub const CLAMP_TO_EDGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812F, .hexadecimal);
pub const TEXTURE_MIN_LOD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813A, .hexadecimal);
pub const TEXTURE_MAX_LOD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813B, .hexadecimal);
pub const TEXTURE_BASE_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813C, .hexadecimal);
pub const TEXTURE_MAX_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813D, .hexadecimal);
pub const SMOOTH_POINT_SIZE_RANGE = @as(c_int, 0x0B12);
pub const SMOOTH_POINT_SIZE_GRANULARITY = @as(c_int, 0x0B13);
pub const SMOOTH_LINE_WIDTH_RANGE = @as(c_int, 0x0B22);
pub const SMOOTH_LINE_WIDTH_GRANULARITY = @as(c_int, 0x0B23);
pub const ALIASED_LINE_WIDTH_RANGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x846E, .hexadecimal);
pub const RESCALE_NORMAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803A, .hexadecimal);
pub const LIGHT_MODEL_COLOR_CONTROL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F8, .hexadecimal);
pub const SINGLE_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F9, .hexadecimal);
pub const SEPARATE_SPECULAR_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FA, .hexadecimal);
pub const ALIASED_POINT_SIZE_RANGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x846D, .hexadecimal);
pub const TEXTURE0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C0, .hexadecimal);
pub const TEXTURE1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C1, .hexadecimal);
pub const TEXTURE2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C2, .hexadecimal);
pub const TEXTURE3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C3, .hexadecimal);
pub const TEXTURE4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C4, .hexadecimal);
pub const TEXTURE5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C5, .hexadecimal);
pub const TEXTURE6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C6, .hexadecimal);
pub const TEXTURE7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C7, .hexadecimal);
pub const TEXTURE8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C8, .hexadecimal);
pub const TEXTURE9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C9, .hexadecimal);
pub const TEXTURE10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CA, .hexadecimal);
pub const TEXTURE11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CB, .hexadecimal);
pub const TEXTURE12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CC, .hexadecimal);
pub const TEXTURE13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CD, .hexadecimal);
pub const TEXTURE14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CE, .hexadecimal);
pub const TEXTURE15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CF, .hexadecimal);
pub const TEXTURE16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D0, .hexadecimal);
pub const TEXTURE17 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D1, .hexadecimal);
pub const TEXTURE18 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D2, .hexadecimal);
pub const TEXTURE19 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D3, .hexadecimal);
pub const TEXTURE20 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D4, .hexadecimal);
pub const TEXTURE21 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D5, .hexadecimal);
pub const TEXTURE22 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D6, .hexadecimal);
pub const TEXTURE23 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D7, .hexadecimal);
pub const TEXTURE24 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D8, .hexadecimal);
pub const TEXTURE25 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D9, .hexadecimal);
pub const TEXTURE26 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DA, .hexadecimal);
pub const TEXTURE27 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DB, .hexadecimal);
pub const TEXTURE28 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DC, .hexadecimal);
pub const TEXTURE29 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DD, .hexadecimal);
pub const TEXTURE30 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DE, .hexadecimal);
pub const TEXTURE31 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DF, .hexadecimal);
pub const ACTIVE_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E0, .hexadecimal);
pub const MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809D, .hexadecimal);
pub const SAMPLE_ALPHA_TO_COVERAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809E, .hexadecimal);
pub const SAMPLE_ALPHA_TO_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809F, .hexadecimal);
pub const SAMPLE_COVERAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A0, .hexadecimal);
pub const SAMPLE_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A8, .hexadecimal);
pub const SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A9, .hexadecimal);
pub const SAMPLE_COVERAGE_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AA, .hexadecimal);
pub const SAMPLE_COVERAGE_INVERT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AB, .hexadecimal);
pub const TEXTURE_CUBE_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8513, .hexadecimal);
pub const TEXTURE_BINDING_CUBE_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8514, .hexadecimal);
pub const TEXTURE_CUBE_MAP_POSITIVE_X = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8515, .hexadecimal);
pub const TEXTURE_CUBE_MAP_NEGATIVE_X = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8516, .hexadecimal);
pub const TEXTURE_CUBE_MAP_POSITIVE_Y = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8517, .hexadecimal);
pub const TEXTURE_CUBE_MAP_NEGATIVE_Y = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8518, .hexadecimal);
pub const TEXTURE_CUBE_MAP_POSITIVE_Z = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8519, .hexadecimal);
pub const TEXTURE_CUBE_MAP_NEGATIVE_Z = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851A, .hexadecimal);
pub const PROXY_TEXTURE_CUBE_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851B, .hexadecimal);
pub const MAX_CUBE_MAP_TEXTURE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851C, .hexadecimal);
pub const COMPRESSED_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84ED, .hexadecimal);
pub const COMPRESSED_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EE, .hexadecimal);
pub const TEXTURE_COMPRESSION_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EF, .hexadecimal);
pub const TEXTURE_COMPRESSED_IMAGE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A0, .hexadecimal);
pub const TEXTURE_COMPRESSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A1, .hexadecimal);
pub const NUM_COMPRESSED_TEXTURE_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A2, .hexadecimal);
pub const COMPRESSED_TEXTURE_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A3, .hexadecimal);
pub const CLAMP_TO_BORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hexadecimal);
pub const CLIENT_ACTIVE_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E1, .hexadecimal);
pub const MAX_TEXTURE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E2, .hexadecimal);
pub const TRANSPOSE_MODELVIEW_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E3, .hexadecimal);
pub const TRANSPOSE_PROJECTION_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E4, .hexadecimal);
pub const TRANSPOSE_TEXTURE_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E5, .hexadecimal);
pub const TRANSPOSE_COLOR_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E6, .hexadecimal);
pub const MULTISAMPLE_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const NORMAL_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hexadecimal);
pub const REFLECTION_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hexadecimal);
pub const COMPRESSED_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E9, .hexadecimal);
pub const COMPRESSED_LUMINANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EA, .hexadecimal);
pub const COMPRESSED_LUMINANCE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EB, .hexadecimal);
pub const COMPRESSED_INTENSITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EC, .hexadecimal);
pub const COMBINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8570, .hexadecimal);
pub const COMBINE_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8571, .hexadecimal);
pub const COMBINE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8572, .hexadecimal);
pub const SOURCE0_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8580, .hexadecimal);
pub const SOURCE1_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8581, .hexadecimal);
pub const SOURCE2_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8582, .hexadecimal);
pub const SOURCE0_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8588, .hexadecimal);
pub const SOURCE1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hexadecimal);
pub const SOURCE2_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858A, .hexadecimal);
pub const OPERAND0_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8590, .hexadecimal);
pub const OPERAND1_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8591, .hexadecimal);
pub const OPERAND2_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8592, .hexadecimal);
pub const OPERAND0_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8598, .hexadecimal);
pub const OPERAND1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8599, .hexadecimal);
pub const OPERAND2_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x859A, .hexadecimal);
pub const RGB_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8573, .hexadecimal);
pub const ADD_SIGNED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8574, .hexadecimal);
pub const INTERPOLATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8575, .hexadecimal);
pub const SUBTRACT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E7, .hexadecimal);
pub const CONSTANT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8576, .hexadecimal);
pub const PRIMARY_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8577, .hexadecimal);
pub const PREVIOUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8578, .hexadecimal);
pub const DOT3_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AE, .hexadecimal);
pub const DOT3_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AF, .hexadecimal);
pub const BLEND_DST_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C8, .hexadecimal);
pub const BLEND_SRC_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C9, .hexadecimal);
pub const BLEND_DST_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CA, .hexadecimal);
pub const BLEND_SRC_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CB, .hexadecimal);
pub const POINT_FADE_THRESHOLD_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8128, .hexadecimal);
pub const DEPTH_COMPONENT16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A5, .hexadecimal);
pub const DEPTH_COMPONENT24 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A6, .hexadecimal);
pub const DEPTH_COMPONENT32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A7, .hexadecimal);
pub const MIRRORED_REPEAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8370, .hexadecimal);
pub const MAX_TEXTURE_LOD_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FD, .hexadecimal);
pub const TEXTURE_LOD_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8501, .hexadecimal);
pub const INCR_WRAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8507, .hexadecimal);
pub const DECR_WRAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8508, .hexadecimal);
pub const TEXTURE_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884A, .hexadecimal);
pub const TEXTURE_COMPARE_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884C, .hexadecimal);
pub const TEXTURE_COMPARE_FUNC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884D, .hexadecimal);
pub const POINT_SIZE_MIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8126, .hexadecimal);
pub const POINT_SIZE_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8127, .hexadecimal);
pub const POINT_DISTANCE_ATTENUATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8129, .hexadecimal);
pub const GENERATE_MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8191, .hexadecimal);
pub const GENERATE_MIPMAP_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8192, .hexadecimal);
pub const FOG_COORDINATE_SOURCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8450, .hexadecimal);
pub const FOG_COORDINATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8451, .hexadecimal);
pub const FRAGMENT_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8452, .hexadecimal);
pub const CURRENT_FOG_COORDINATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8453, .hexadecimal);
pub const FOG_COORDINATE_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8454, .hexadecimal);
pub const FOG_COORDINATE_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8455, .hexadecimal);
pub const FOG_COORDINATE_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8456, .hexadecimal);
pub const FOG_COORDINATE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8457, .hexadecimal);
pub const COLOR_SUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8458, .hexadecimal);
pub const CURRENT_SECONDARY_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8459, .hexadecimal);
pub const SECONDARY_COLOR_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845A, .hexadecimal);
pub const SECONDARY_COLOR_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845B, .hexadecimal);
pub const SECONDARY_COLOR_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845C, .hexadecimal);
pub const SECONDARY_COLOR_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845D, .hexadecimal);
pub const SECONDARY_COLOR_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845E, .hexadecimal);
pub const TEXTURE_FILTER_CONTROL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8500, .hexadecimal);
pub const DEPTH_TEXTURE_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884B, .hexadecimal);
pub const COMPARE_R_TO_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hexadecimal);
pub const BLEND_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8005, .hexadecimal);
pub const BLEND_EQUATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hexadecimal);
pub const CONSTANT_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8001, .hexadecimal);
pub const ONE_MINUS_CONSTANT_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8002, .hexadecimal);
pub const CONSTANT_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8003, .hexadecimal);
pub const ONE_MINUS_CONSTANT_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8004, .hexadecimal);
pub const FUNC_ADD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8006, .hexadecimal);
pub const FUNC_REVERSE_SUBTRACT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800B, .hexadecimal);
pub const FUNC_SUBTRACT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800A, .hexadecimal);
pub const MIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8007, .hexadecimal);
pub const MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8008, .hexadecimal);
pub const BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8764, .hexadecimal);
pub const BUFFER_USAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8765, .hexadecimal);
pub const QUERY_COUNTER_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hexadecimal);
pub const CURRENT_QUERY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hexadecimal);
pub const QUERY_RESULT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hexadecimal);
pub const QUERY_RESULT_AVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hexadecimal);
pub const ARRAY_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8892, .hexadecimal);
pub const ELEMENT_ARRAY_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8893, .hexadecimal);
pub const ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8894, .hexadecimal);
pub const ELEMENT_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8895, .hexadecimal);
pub const VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889F, .hexadecimal);
pub const READ_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B8, .hexadecimal);
pub const WRITE_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B9, .hexadecimal);
pub const READ_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BA, .hexadecimal);
pub const BUFFER_ACCESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BB, .hexadecimal);
pub const BUFFER_MAPPED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BC, .hexadecimal);
pub const BUFFER_MAP_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BD, .hexadecimal);
pub const STREAM_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E0, .hexadecimal);
pub const STREAM_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E1, .hexadecimal);
pub const STREAM_COPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E2, .hexadecimal);
pub const STATIC_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E4, .hexadecimal);
pub const STATIC_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E5, .hexadecimal);
pub const STATIC_COPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E6, .hexadecimal);
pub const DYNAMIC_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E8, .hexadecimal);
pub const DYNAMIC_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E9, .hexadecimal);
pub const DYNAMIC_COPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EA, .hexadecimal);
pub const SAMPLES_PASSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8914, .hexadecimal);
pub const SRC1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hexadecimal);
pub const VERTEX_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8896, .hexadecimal);
pub const NORMAL_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8897, .hexadecimal);
pub const COLOR_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8898, .hexadecimal);
pub const INDEX_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8899, .hexadecimal);
pub const TEXTURE_COORD_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889A, .hexadecimal);
pub const EDGE_FLAG_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889B, .hexadecimal);
pub const SECONDARY_COLOR_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889C, .hexadecimal);
pub const FOG_COORDINATE_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889D, .hexadecimal);
pub const WEIGHT_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889E, .hexadecimal);
pub const FOG_COORD_SRC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8450, .hexadecimal);
pub const FOG_COORD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8451, .hexadecimal);
pub const CURRENT_FOG_COORD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8453, .hexadecimal);
pub const FOG_COORD_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8454, .hexadecimal);
pub const FOG_COORD_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8455, .hexadecimal);
pub const FOG_COORD_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8456, .hexadecimal);
pub const FOG_COORD_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8457, .hexadecimal);
pub const FOG_COORD_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889D, .hexadecimal);
pub const SRC0_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8580, .hexadecimal);
pub const SRC1_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8581, .hexadecimal);
pub const SRC2_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8582, .hexadecimal);
pub const SRC0_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8588, .hexadecimal);
pub const SRC2_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858A, .hexadecimal);
pub const BLEND_EQUATION_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hexadecimal);
pub const VERTEX_ATTRIB_ARRAY_ENABLED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8622, .hexadecimal);
pub const VERTEX_ATTRIB_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8623, .hexadecimal);
pub const VERTEX_ATTRIB_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8624, .hexadecimal);
pub const VERTEX_ATTRIB_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8625, .hexadecimal);
pub const CURRENT_VERTEX_ATTRIB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8626, .hexadecimal);
pub const VERTEX_PROGRAM_POINT_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hexadecimal);
pub const VERTEX_ATTRIB_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8645, .hexadecimal);
pub const STENCIL_BACK_FUNC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8800, .hexadecimal);
pub const STENCIL_BACK_FAIL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8801, .hexadecimal);
pub const STENCIL_BACK_PASS_DEPTH_FAIL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8802, .hexadecimal);
pub const STENCIL_BACK_PASS_DEPTH_PASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8803, .hexadecimal);
pub const MAX_DRAW_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hexadecimal);
pub const DRAW_BUFFER0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hexadecimal);
pub const DRAW_BUFFER1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hexadecimal);
pub const DRAW_BUFFER2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hexadecimal);
pub const DRAW_BUFFER3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hexadecimal);
pub const DRAW_BUFFER4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hexadecimal);
pub const DRAW_BUFFER5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hexadecimal);
pub const DRAW_BUFFER6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hexadecimal);
pub const DRAW_BUFFER7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hexadecimal);
pub const DRAW_BUFFER8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hexadecimal);
pub const DRAW_BUFFER9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hexadecimal);
pub const DRAW_BUFFER10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hexadecimal);
pub const DRAW_BUFFER11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hexadecimal);
pub const DRAW_BUFFER12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hexadecimal);
pub const DRAW_BUFFER13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hexadecimal);
pub const DRAW_BUFFER14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hexadecimal);
pub const DRAW_BUFFER15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hexadecimal);
pub const BLEND_EQUATION_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x883D, .hexadecimal);
pub const MAX_VERTEX_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8869, .hexadecimal);
pub const VERTEX_ATTRIB_ARRAY_NORMALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886A, .hexadecimal);
pub const MAX_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8872, .hexadecimal);
pub const FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B30, .hexadecimal);
pub const VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B31, .hexadecimal);
pub const MAX_FRAGMENT_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B49, .hexadecimal);
pub const MAX_VERTEX_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4A, .hexadecimal);
pub const MAX_VARYING_FLOATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4B, .hexadecimal);
pub const MAX_VERTEX_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4C, .hexadecimal);
pub const MAX_COMBINED_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4D, .hexadecimal);
pub const SHADER_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4F, .hexadecimal);
pub const FLOAT_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B50, .hexadecimal);
pub const FLOAT_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B51, .hexadecimal);
pub const FLOAT_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B52, .hexadecimal);
pub const INT_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B53, .hexadecimal);
pub const INT_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B54, .hexadecimal);
pub const INT_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B55, .hexadecimal);
pub const BOOL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B56, .hexadecimal);
pub const BOOL_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B57, .hexadecimal);
pub const BOOL_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B58, .hexadecimal);
pub const BOOL_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B59, .hexadecimal);
pub const FLOAT_MAT2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5A, .hexadecimal);
pub const FLOAT_MAT3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5B, .hexadecimal);
pub const FLOAT_MAT4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5C, .hexadecimal);
pub const SAMPLER_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5D, .hexadecimal);
pub const SAMPLER_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5E, .hexadecimal);
pub const SAMPLER_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5F, .hexadecimal);
pub const SAMPLER_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B60, .hexadecimal);
pub const SAMPLER_1D_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B61, .hexadecimal);
pub const SAMPLER_2D_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B62, .hexadecimal);
pub const DELETE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B80, .hexadecimal);
pub const COMPILE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B81, .hexadecimal);
pub const LINK_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B82, .hexadecimal);
pub const VALIDATE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B83, .hexadecimal);
pub const INFO_LOG_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B84, .hexadecimal);
pub const ATTACHED_SHADERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B85, .hexadecimal);
pub const ACTIVE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B86, .hexadecimal);
pub const ACTIVE_UNIFORM_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B87, .hexadecimal);
pub const SHADER_SOURCE_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B88, .hexadecimal);
pub const ACTIVE_ATTRIBUTES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B89, .hexadecimal);
pub const ACTIVE_ATTRIBUTE_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8A, .hexadecimal);
pub const FRAGMENT_SHADER_DERIVATIVE_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8B, .hexadecimal);
pub const SHADING_LANGUAGE_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8C, .hexadecimal);
pub const CURRENT_PROGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8D, .hexadecimal);
pub const POINT_SPRITE_COORD_ORIGIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA0, .hexadecimal);
pub const LOWER_LEFT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA1, .hexadecimal);
pub const UPPER_LEFT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA2, .hexadecimal);
pub const STENCIL_BACK_REF = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA3, .hexadecimal);
pub const STENCIL_BACK_VALUE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA4, .hexadecimal);
pub const STENCIL_BACK_WRITEMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA5, .hexadecimal);
pub const VERTEX_PROGRAM_TWO_SIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8643, .hexadecimal);
pub const POINT_SPRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8861, .hexadecimal);
pub const COORD_REPLACE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8862, .hexadecimal);
pub const MAX_TEXTURE_COORDS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8871, .hexadecimal);
pub const PIXEL_PACK_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EB, .hexadecimal);
pub const PIXEL_UNPACK_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EC, .hexadecimal);
pub const PIXEL_PACK_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88ED, .hexadecimal);
pub const PIXEL_UNPACK_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EF, .hexadecimal);
pub const FLOAT_MAT2x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B65, .hexadecimal);
pub const FLOAT_MAT2x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B66, .hexadecimal);
pub const FLOAT_MAT3x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B67, .hexadecimal);
pub const FLOAT_MAT3x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B68, .hexadecimal);
pub const FLOAT_MAT4x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B69, .hexadecimal);
pub const FLOAT_MAT4x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B6A, .hexadecimal);
pub const SRGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C40, .hexadecimal);
pub const SRGB8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C41, .hexadecimal);
pub const SRGB_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C42, .hexadecimal);
pub const SRGB8_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C43, .hexadecimal);
pub const COMPRESSED_SRGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C48, .hexadecimal);
pub const COMPRESSED_SRGB_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C49, .hexadecimal);
pub const CURRENT_RASTER_SECONDARY_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845F, .hexadecimal);
pub const SLUMINANCE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C44, .hexadecimal);
pub const SLUMINANCE8_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C45, .hexadecimal);
pub const SLUMINANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C46, .hexadecimal);
pub const SLUMINANCE8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C47, .hexadecimal);
pub const COMPRESSED_SLUMINANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4A, .hexadecimal);
pub const COMPRESSED_SLUMINANCE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4B, .hexadecimal);
pub const COMPARE_REF_TO_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hexadecimal);
pub const CLIP_DISTANCE0 = @as(c_int, 0x3000);
pub const CLIP_DISTANCE1 = @as(c_int, 0x3001);
pub const CLIP_DISTANCE2 = @as(c_int, 0x3002);
pub const CLIP_DISTANCE3 = @as(c_int, 0x3003);
pub const CLIP_DISTANCE4 = @as(c_int, 0x3004);
pub const CLIP_DISTANCE5 = @as(c_int, 0x3005);
pub const CLIP_DISTANCE6 = @as(c_int, 0x3006);
pub const CLIP_DISTANCE7 = @as(c_int, 0x3007);
pub const MAX_CLIP_DISTANCES = @as(c_int, 0x0D32);
pub const MAJOR_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821B, .hexadecimal);
pub const MINOR_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821C, .hexadecimal);
pub const NUM_EXTENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821D, .hexadecimal);
pub const CONTEXT_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821E, .hexadecimal);
pub const COMPRESSED_RED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8225, .hexadecimal);
pub const COMPRESSED_RG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8226, .hexadecimal);
pub const CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = @as(c_int, 0x00000001);
pub const RGBA32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hexadecimal);
pub const RGB32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hexadecimal);
pub const RGBA16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hexadecimal);
pub const RGB16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hexadecimal);
pub const VERTEX_ATTRIB_ARRAY_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FD, .hexadecimal);
pub const MAX_ARRAY_TEXTURE_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FF, .hexadecimal);
pub const MIN_PROGRAM_TEXEL_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8904, .hexadecimal);
pub const MAX_PROGRAM_TEXEL_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8905, .hexadecimal);
pub const CLAMP_READ_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891C, .hexadecimal);
pub const FIXED_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891D, .hexadecimal);
pub const MAX_VARYING_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4B, .hexadecimal);
pub const TEXTURE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C18, .hexadecimal);
pub const PROXY_TEXTURE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C19, .hexadecimal);
pub const TEXTURE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1A, .hexadecimal);
pub const PROXY_TEXTURE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1B, .hexadecimal);
pub const TEXTURE_BINDING_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1C, .hexadecimal);
pub const TEXTURE_BINDING_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1D, .hexadecimal);
pub const R11F_G11F_B10F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3A, .hexadecimal);
pub const UNSIGNED_INT_10F_11F_11F_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3B, .hexadecimal);
pub const RGB9_E5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3D, .hexadecimal);
pub const UNSIGNED_INT_5_9_9_9_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3E, .hexadecimal);
pub const TEXTURE_SHARED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3F, .hexadecimal);
pub const TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C76, .hexadecimal);
pub const TRANSFORM_FEEDBACK_BUFFER_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7F, .hexadecimal);
pub const MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C80, .hexadecimal);
pub const TRANSFORM_FEEDBACK_VARYINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C83, .hexadecimal);
pub const TRANSFORM_FEEDBACK_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C84, .hexadecimal);
pub const TRANSFORM_FEEDBACK_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C85, .hexadecimal);
pub const PRIMITIVES_GENERATED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C87, .hexadecimal);
pub const TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C88, .hexadecimal);
pub const RASTERIZER_DISCARD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C89, .hexadecimal);
pub const MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8A, .hexadecimal);
pub const MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8B, .hexadecimal);
pub const INTERLEAVED_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8C, .hexadecimal);
pub const SEPARATE_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8D, .hexadecimal);
pub const TRANSFORM_FEEDBACK_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8E, .hexadecimal);
pub const TRANSFORM_FEEDBACK_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8F, .hexadecimal);
pub const RGBA32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D70, .hexadecimal);
pub const RGB32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D71, .hexadecimal);
pub const RGBA16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D76, .hexadecimal);
pub const RGB16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D77, .hexadecimal);
pub const RGBA8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7C, .hexadecimal);
pub const RGB8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7D, .hexadecimal);
pub const RGBA32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D82, .hexadecimal);
pub const RGB32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D83, .hexadecimal);
pub const RGBA16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D88, .hexadecimal);
pub const RGB16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D89, .hexadecimal);
pub const RGBA8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8E, .hexadecimal);
pub const RGB8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8F, .hexadecimal);
pub const RED_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D94, .hexadecimal);
pub const GREEN_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D95, .hexadecimal);
pub const BLUE_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D96, .hexadecimal);
pub const RGB_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D98, .hexadecimal);
pub const RGBA_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D99, .hexadecimal);
pub const BGR_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9A, .hexadecimal);
pub const BGRA_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9B, .hexadecimal);
pub const SAMPLER_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC0, .hexadecimal);
pub const SAMPLER_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC1, .hexadecimal);
pub const SAMPLER_1D_ARRAY_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC3, .hexadecimal);
pub const SAMPLER_2D_ARRAY_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC4, .hexadecimal);
pub const SAMPLER_CUBE_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC5, .hexadecimal);
pub const UNSIGNED_INT_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC6, .hexadecimal);
pub const UNSIGNED_INT_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC7, .hexadecimal);
pub const UNSIGNED_INT_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC8, .hexadecimal);
pub const INT_SAMPLER_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC9, .hexadecimal);
pub const INT_SAMPLER_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCA, .hexadecimal);
pub const INT_SAMPLER_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCB, .hexadecimal);
pub const INT_SAMPLER_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCC, .hexadecimal);
pub const INT_SAMPLER_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCE, .hexadecimal);
pub const INT_SAMPLER_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCF, .hexadecimal);
pub const UNSIGNED_INT_SAMPLER_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD1, .hexadecimal);
pub const UNSIGNED_INT_SAMPLER_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD2, .hexadecimal);
pub const UNSIGNED_INT_SAMPLER_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD3, .hexadecimal);
pub const UNSIGNED_INT_SAMPLER_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD4, .hexadecimal);
pub const UNSIGNED_INT_SAMPLER_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD6, .hexadecimal);
pub const UNSIGNED_INT_SAMPLER_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD7, .hexadecimal);
pub const QUERY_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E13, .hexadecimal);
pub const QUERY_NO_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E14, .hexadecimal);
pub const QUERY_BY_REGION_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E15, .hexadecimal);
pub const QUERY_BY_REGION_NO_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E16, .hexadecimal);
pub const BUFFER_ACCESS_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911F, .hexadecimal);
pub const BUFFER_MAP_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9120, .hexadecimal);
pub const BUFFER_MAP_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9121, .hexadecimal);
pub const DEPTH_COMPONENT32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAC, .hexadecimal);
pub const DEPTH32F_STENCIL8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAD, .hexadecimal);
pub const FLOAT_32_UNSIGNED_INT_24_8_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAD, .hexadecimal);
pub const INVALID_FRAMEBUFFER_OPERATION = @as(c_int, 0x0506);
pub const FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8210, .hexadecimal);
pub const FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8211, .hexadecimal);
pub const FRAMEBUFFER_ATTACHMENT_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8212, .hexadecimal);
pub const FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8213, .hexadecimal);
pub const FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8214, .hexadecimal);
pub const FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8215, .hexadecimal);
pub const FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8216, .hexadecimal);
pub const FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8217, .hexadecimal);
pub const FRAMEBUFFER_DEFAULT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8218, .hexadecimal);
pub const FRAMEBUFFER_UNDEFINED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8219, .hexadecimal);
pub const DEPTH_STENCIL_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821A, .hexadecimal);
pub const MAX_RENDERBUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E8, .hexadecimal);
pub const DEPTH_STENCIL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F9, .hexadecimal);
pub const UNSIGNED_INT_24_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FA, .hexadecimal);
pub const DEPTH24_STENCIL8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F0, .hexadecimal);
pub const TEXTURE_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F1, .hexadecimal);
pub const TEXTURE_RED_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C10, .hexadecimal);
pub const TEXTURE_GREEN_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C11, .hexadecimal);
pub const TEXTURE_BLUE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C12, .hexadecimal);
pub const TEXTURE_ALPHA_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C13, .hexadecimal);
pub const TEXTURE_DEPTH_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C16, .hexadecimal);
pub const UNSIGNED_NORMALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C17, .hexadecimal);
pub const FRAMEBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hexadecimal);
pub const DRAW_FRAMEBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hexadecimal);
pub const RENDERBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA7, .hexadecimal);
pub const READ_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA8, .hexadecimal);
pub const DRAW_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA9, .hexadecimal);
pub const READ_FRAMEBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAA, .hexadecimal);
pub const RENDERBUFFER_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hexadecimal);
pub const FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD0, .hexadecimal);
pub const FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD1, .hexadecimal);
pub const FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD2, .hexadecimal);
pub const FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD3, .hexadecimal);
pub const FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD4, .hexadecimal);
pub const FRAMEBUFFER_COMPLETE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD5, .hexadecimal);
pub const FRAMEBUFFER_INCOMPLETE_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD6, .hexadecimal);
pub const FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD7, .hexadecimal);
pub const FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDB, .hexadecimal);
pub const FRAMEBUFFER_INCOMPLETE_READ_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDC, .hexadecimal);
pub const FRAMEBUFFER_UNSUPPORTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDD, .hexadecimal);
pub const MAX_COLOR_ATTACHMENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDF, .hexadecimal);
pub const COLOR_ATTACHMENT0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE0, .hexadecimal);
pub const COLOR_ATTACHMENT1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE1, .hexadecimal);
pub const COLOR_ATTACHMENT2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE2, .hexadecimal);
pub const COLOR_ATTACHMENT3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE3, .hexadecimal);
pub const COLOR_ATTACHMENT4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE4, .hexadecimal);
pub const COLOR_ATTACHMENT5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE5, .hexadecimal);
pub const COLOR_ATTACHMENT6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE6, .hexadecimal);
pub const COLOR_ATTACHMENT7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE7, .hexadecimal);
pub const COLOR_ATTACHMENT8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE8, .hexadecimal);
pub const COLOR_ATTACHMENT9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE9, .hexadecimal);
pub const COLOR_ATTACHMENT10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEA, .hexadecimal);
pub const COLOR_ATTACHMENT11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEB, .hexadecimal);
pub const COLOR_ATTACHMENT12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEC, .hexadecimal);
pub const COLOR_ATTACHMENT13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CED, .hexadecimal);
pub const COLOR_ATTACHMENT14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEE, .hexadecimal);
pub const COLOR_ATTACHMENT15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEF, .hexadecimal);
pub const COLOR_ATTACHMENT16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF0, .hexadecimal);
pub const COLOR_ATTACHMENT17 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF1, .hexadecimal);
pub const COLOR_ATTACHMENT18 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF2, .hexadecimal);
pub const COLOR_ATTACHMENT19 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF3, .hexadecimal);
pub const COLOR_ATTACHMENT20 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF4, .hexadecimal);
pub const COLOR_ATTACHMENT21 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF5, .hexadecimal);
pub const COLOR_ATTACHMENT22 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF6, .hexadecimal);
pub const COLOR_ATTACHMENT23 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF7, .hexadecimal);
pub const COLOR_ATTACHMENT24 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF8, .hexadecimal);
pub const COLOR_ATTACHMENT25 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF9, .hexadecimal);
pub const COLOR_ATTACHMENT26 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFA, .hexadecimal);
pub const COLOR_ATTACHMENT27 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFB, .hexadecimal);
pub const COLOR_ATTACHMENT28 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFC, .hexadecimal);
pub const COLOR_ATTACHMENT29 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFD, .hexadecimal);
pub const COLOR_ATTACHMENT30 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFE, .hexadecimal);
pub const COLOR_ATTACHMENT31 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFF, .hexadecimal);
pub const DEPTH_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D00, .hexadecimal);
pub const STENCIL_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D20, .hexadecimal);
pub const FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D40, .hexadecimal);
pub const RENDERBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D41, .hexadecimal);
pub const RENDERBUFFER_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D42, .hexadecimal);
pub const RENDERBUFFER_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D43, .hexadecimal);
pub const RENDERBUFFER_INTERNAL_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D44, .hexadecimal);
pub const STENCIL_INDEX1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D46, .hexadecimal);
pub const STENCIL_INDEX4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D47, .hexadecimal);
pub const STENCIL_INDEX8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D48, .hexadecimal);
pub const STENCIL_INDEX16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D49, .hexadecimal);
pub const RENDERBUFFER_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D50, .hexadecimal);
pub const RENDERBUFFER_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D51, .hexadecimal);
pub const RENDERBUFFER_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D52, .hexadecimal);
pub const RENDERBUFFER_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D53, .hexadecimal);
pub const RENDERBUFFER_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D54, .hexadecimal);
pub const RENDERBUFFER_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D55, .hexadecimal);
pub const FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hexadecimal);
pub const MAX_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hexadecimal);
pub const INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8222, .hexadecimal);
pub const TEXTURE_LUMINANCE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C14, .hexadecimal);
pub const TEXTURE_INTENSITY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C15, .hexadecimal);
pub const FRAMEBUFFER_SRGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DB9, .hexadecimal);
pub const HALF_FLOAT = @as(c_int, 0x140B);
pub const MAP_READ_BIT = @as(c_int, 0x0001);
pub const MAP_WRITE_BIT = @as(c_int, 0x0002);
pub const MAP_INVALIDATE_RANGE_BIT = @as(c_int, 0x0004);
pub const MAP_INVALIDATE_BUFFER_BIT = @as(c_int, 0x0008);
pub const MAP_FLUSH_EXPLICIT_BIT = @as(c_int, 0x0010);
pub const MAP_UNSYNCHRONIZED_BIT = @as(c_int, 0x0020);
pub const COMPRESSED_RED_RGTC1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBB, .hexadecimal);
pub const COMPRESSED_SIGNED_RED_RGTC1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBC, .hexadecimal);
pub const COMPRESSED_RG_RGTC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBD, .hexadecimal);
pub const COMPRESSED_SIGNED_RG_RGTC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBE, .hexadecimal);
pub const RG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8227, .hexadecimal);
pub const RG_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8228, .hexadecimal);
pub const R8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8229, .hexadecimal);
pub const R16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822A, .hexadecimal);
pub const RG8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822B, .hexadecimal);
pub const RG16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822C, .hexadecimal);
pub const R16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822D, .hexadecimal);
pub const R32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822E, .hexadecimal);
pub const RG16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822F, .hexadecimal);
pub const RG32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8230, .hexadecimal);
pub const R8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8231, .hexadecimal);
pub const R8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8232, .hexadecimal);
pub const R16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8233, .hexadecimal);
pub const R16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8234, .hexadecimal);
pub const R32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8235, .hexadecimal);
pub const R32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8236, .hexadecimal);
pub const RG8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8237, .hexadecimal);
pub const RG8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8238, .hexadecimal);
pub const RG16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8239, .hexadecimal);
pub const RG16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x823A, .hexadecimal);
pub const RG32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x823B, .hexadecimal);
pub const RG32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x823C, .hexadecimal);
pub const VERTEX_ARRAY_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B5, .hexadecimal);
pub const CLAMP_VERTEX_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891A, .hexadecimal);
pub const CLAMP_FRAGMENT_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891B, .hexadecimal);
pub const ALPHA_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D97, .hexadecimal);
pub const SAMPLER_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B63, .hexadecimal);
pub const SAMPLER_2D_RECT_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B64, .hexadecimal);
pub const SAMPLER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC2, .hexadecimal);
pub const INT_SAMPLER_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCD, .hexadecimal);
pub const INT_SAMPLER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD0, .hexadecimal);
pub const UNSIGNED_INT_SAMPLER_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD5, .hexadecimal);
pub const UNSIGNED_INT_SAMPLER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD8, .hexadecimal);
pub const TEXTURE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hexadecimal);
pub const MAX_TEXTURE_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2B, .hexadecimal);
pub const TEXTURE_BINDING_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2C, .hexadecimal);
pub const TEXTURE_BUFFER_DATA_STORE_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2D, .hexadecimal);
pub const TEXTURE_RECTANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F5, .hexadecimal);
pub const TEXTURE_BINDING_RECTANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F6, .hexadecimal);
pub const PROXY_TEXTURE_RECTANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F7, .hexadecimal);
pub const MAX_RECTANGLE_TEXTURE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F8, .hexadecimal);
pub const R8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F94, .hexadecimal);
pub const RG8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F95, .hexadecimal);
pub const RGB8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F96, .hexadecimal);
pub const RGBA8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F97, .hexadecimal);
pub const R16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F98, .hexadecimal);
pub const RG16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F99, .hexadecimal);
pub const RGB16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9A, .hexadecimal);
pub const RGBA16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9B, .hexadecimal);
pub const SIGNED_NORMALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9C, .hexadecimal);
pub const PRIMITIVE_RESTART = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9D, .hexadecimal);
pub const PRIMITIVE_RESTART_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9E, .hexadecimal);
pub const COPY_READ_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F36, .hexadecimal);
pub const COPY_WRITE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F37, .hexadecimal);
pub const UNIFORM_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A11, .hexadecimal);
pub const UNIFORM_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A28, .hexadecimal);
pub const UNIFORM_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A29, .hexadecimal);
pub const UNIFORM_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2A, .hexadecimal);
pub const MAX_VERTEX_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2B, .hexadecimal);
pub const MAX_GEOMETRY_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2C, .hexadecimal);
pub const MAX_FRAGMENT_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2D, .hexadecimal);
pub const MAX_COMBINED_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2E, .hexadecimal);
pub const MAX_UNIFORM_BUFFER_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2F, .hexadecimal);
pub const MAX_UNIFORM_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A30, .hexadecimal);
pub const MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A31, .hexadecimal);
pub const MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A32, .hexadecimal);
pub const MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A33, .hexadecimal);
pub const UNIFORM_BUFFER_OFFSET_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A34, .hexadecimal);
pub const ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A35, .hexadecimal);
pub const ACTIVE_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A36, .hexadecimal);
pub const UNIFORM_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A37, .hexadecimal);
pub const UNIFORM_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A38, .hexadecimal);
pub const UNIFORM_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A39, .hexadecimal);
pub const UNIFORM_BLOCK_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3A, .hexadecimal);
pub const UNIFORM_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3B, .hexadecimal);
pub const UNIFORM_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3C, .hexadecimal);
pub const UNIFORM_MATRIX_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3D, .hexadecimal);
pub const UNIFORM_IS_ROW_MAJOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3E, .hexadecimal);
pub const UNIFORM_BLOCK_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3F, .hexadecimal);
pub const UNIFORM_BLOCK_DATA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A40, .hexadecimal);
pub const UNIFORM_BLOCK_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A41, .hexadecimal);
pub const UNIFORM_BLOCK_ACTIVE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A42, .hexadecimal);
pub const UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A43, .hexadecimal);
pub const UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A44, .hexadecimal);
pub const UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A45, .hexadecimal);
pub const UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A46, .hexadecimal);
pub const INVALID_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const CONTEXT_CORE_PROFILE_BIT = @as(c_int, 0x00000001);
pub const CONTEXT_COMPATIBILITY_PROFILE_BIT = @as(c_int, 0x00000002);
pub const LINES_ADJACENCY = @as(c_int, 0x000A);
pub const LINE_STRIP_ADJACENCY = @as(c_int, 0x000B);
pub const TRIANGLES_ADJACENCY = @as(c_int, 0x000C);
pub const TRIANGLE_STRIP_ADJACENCY = @as(c_int, 0x000D);
pub const PROGRAM_POINT_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hexadecimal);
pub const MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C29, .hexadecimal);
pub const FRAMEBUFFER_ATTACHMENT_LAYERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA7, .hexadecimal);
pub const FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA8, .hexadecimal);
pub const GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD9, .hexadecimal);
pub const GEOMETRY_VERTICES_OUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8916, .hexadecimal);
pub const GEOMETRY_INPUT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8917, .hexadecimal);
pub const GEOMETRY_OUTPUT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8918, .hexadecimal);
pub const MAX_GEOMETRY_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDF, .hexadecimal);
pub const MAX_GEOMETRY_OUTPUT_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE0, .hexadecimal);
pub const MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE1, .hexadecimal);
pub const MAX_VERTEX_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9122, .hexadecimal);
pub const MAX_GEOMETRY_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9123, .hexadecimal);
pub const MAX_GEOMETRY_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9124, .hexadecimal);
pub const MAX_FRAGMENT_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9125, .hexadecimal);
pub const CONTEXT_PROFILE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9126, .hexadecimal);
pub const DEPTH_CLAMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864F, .hexadecimal);
pub const QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4C, .hexadecimal);
pub const FIRST_VERTEX_CONVENTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4D, .hexadecimal);
pub const LAST_VERTEX_CONVENTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4E, .hexadecimal);
pub const PROVOKING_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4F, .hexadecimal);
pub const TEXTURE_CUBE_MAP_SEAMLESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884F, .hexadecimal);
pub const MAX_SERVER_WAIT_TIMEOUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9111, .hexadecimal);
pub const OBJECT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9112, .hexadecimal);
pub const SYNC_CONDITION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9113, .hexadecimal);
pub const SYNC_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9114, .hexadecimal);
pub const SYNC_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9115, .hexadecimal);
pub const SYNC_FENCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9116, .hexadecimal);
pub const SYNC_GPU_COMMANDS_COMPLETE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9117, .hexadecimal);
pub const UNSIGNALED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9118, .hexadecimal);
pub const SIGNALED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9119, .hexadecimal);
pub const ALREADY_SIGNALED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911A, .hexadecimal);
pub const TIMEOUT_EXPIRED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911B, .hexadecimal);
pub const CONDITION_SATISFIED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911C, .hexadecimal);
pub const WAIT_FAILED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911D, .hexadecimal);
pub const TIMEOUT_IGNORED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFFFFFFFFFF, .hexadecimal);
pub const SYNC_FLUSH_COMMANDS_BIT = @as(c_int, 0x00000001);
pub const SAMPLE_POSITION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E50, .hexadecimal);
pub const SAMPLE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E51, .hexadecimal);
pub const SAMPLE_MASK_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E52, .hexadecimal);
pub const MAX_SAMPLE_MASK_WORDS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E59, .hexadecimal);
pub const TEXTURE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9100, .hexadecimal);
pub const PROXY_TEXTURE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9101, .hexadecimal);
pub const TEXTURE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9102, .hexadecimal);
pub const PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9103, .hexadecimal);
pub const TEXTURE_BINDING_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9104, .hexadecimal);
pub const TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9105, .hexadecimal);
pub const TEXTURE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9106, .hexadecimal);
pub const TEXTURE_FIXED_SAMPLE_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9107, .hexadecimal);
pub const SAMPLER_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9108, .hexadecimal);
pub const INT_SAMPLER_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9109, .hexadecimal);
pub const UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910A, .hexadecimal);
pub const SAMPLER_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910B, .hexadecimal);
pub const INT_SAMPLER_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910C, .hexadecimal);
pub const UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910D, .hexadecimal);
pub const MAX_COLOR_TEXTURE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910E, .hexadecimal);
pub const MAX_DEPTH_TEXTURE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910F, .hexadecimal);
pub const MAX_INTEGER_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9110, .hexadecimal);
pub const VERTEX_ATTRIB_ARRAY_DIVISOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FE, .hexadecimal);
pub const SRC1_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F9, .hexadecimal);
pub const ONE_MINUS_SRC1_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FA, .hexadecimal);
pub const ONE_MINUS_SRC1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FB, .hexadecimal);
pub const MAX_DUAL_SOURCE_DRAW_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FC, .hexadecimal);
pub const ANY_SAMPLES_PASSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2F, .hexadecimal);
pub const SAMPLER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8919, .hexadecimal);
pub const RGB10_A2UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906F, .hexadecimal);
pub const TEXTURE_SWIZZLE_R = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E42, .hexadecimal);
pub const TEXTURE_SWIZZLE_G = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E43, .hexadecimal);
pub const TEXTURE_SWIZZLE_B = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E44, .hexadecimal);
pub const TEXTURE_SWIZZLE_A = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E45, .hexadecimal);
pub const TEXTURE_SWIZZLE_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E46, .hexadecimal);
pub const TIME_ELAPSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BF, .hexadecimal);
pub const TIMESTAMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E28, .hexadecimal);
pub const INT_2_10_10_10_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9F, .hexadecimal);
pub const SAMPLE_SHADING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C36, .hexadecimal);
pub const MIN_SAMPLE_SHADING_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C37, .hexadecimal);
pub const MIN_PROGRAM_TEXTURE_GATHER_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5E, .hexadecimal);
pub const MAX_PROGRAM_TEXTURE_GATHER_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5F, .hexadecimal);
pub const TEXTURE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9009, .hexadecimal);
pub const TEXTURE_BINDING_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900A, .hexadecimal);
pub const PROXY_TEXTURE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900B, .hexadecimal);
pub const SAMPLER_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900C, .hexadecimal);
pub const SAMPLER_CUBE_MAP_ARRAY_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900D, .hexadecimal);
pub const INT_SAMPLER_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900E, .hexadecimal);
pub const UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900F, .hexadecimal);
pub const DRAW_INDIRECT_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3F, .hexadecimal);
pub const DRAW_INDIRECT_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F43, .hexadecimal);
pub const GEOMETRY_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887F, .hexadecimal);
pub const MAX_GEOMETRY_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5A, .hexadecimal);
pub const MIN_FRAGMENT_INTERPOLATION_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5B, .hexadecimal);
pub const MAX_FRAGMENT_INTERPOLATION_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5C, .hexadecimal);
pub const FRAGMENT_INTERPOLATION_OFFSET_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5D, .hexadecimal);
pub const MAX_VERTEX_STREAMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E71, .hexadecimal);
pub const DOUBLE_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFC, .hexadecimal);
pub const DOUBLE_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFD, .hexadecimal);
pub const DOUBLE_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFE, .hexadecimal);
pub const DOUBLE_MAT2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F46, .hexadecimal);
pub const DOUBLE_MAT3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F47, .hexadecimal);
pub const DOUBLE_MAT4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F48, .hexadecimal);
pub const DOUBLE_MAT2x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F49, .hexadecimal);
pub const DOUBLE_MAT2x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4A, .hexadecimal);
pub const DOUBLE_MAT3x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4B, .hexadecimal);
pub const DOUBLE_MAT3x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4C, .hexadecimal);
pub const DOUBLE_MAT4x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4D, .hexadecimal);
pub const DOUBLE_MAT4x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4E, .hexadecimal);
pub const ACTIVE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE5, .hexadecimal);
pub const ACTIVE_SUBROUTINE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE6, .hexadecimal);
pub const ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E47, .hexadecimal);
pub const ACTIVE_SUBROUTINE_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E48, .hexadecimal);
pub const ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E49, .hexadecimal);
pub const MAX_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE7, .hexadecimal);
pub const MAX_SUBROUTINE_UNIFORM_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE8, .hexadecimal);
pub const NUM_COMPATIBLE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4A, .hexadecimal);
pub const COMPATIBLE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4B, .hexadecimal);
pub const PATCHES = @as(c_int, 0x000E);
pub const PATCH_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E72, .hexadecimal);
pub const PATCH_DEFAULT_INNER_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E73, .hexadecimal);
pub const PATCH_DEFAULT_OUTER_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E74, .hexadecimal);
pub const TESS_CONTROL_OUTPUT_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E75, .hexadecimal);
pub const TESS_GEN_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E76, .hexadecimal);
pub const TESS_GEN_SPACING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E77, .hexadecimal);
pub const TESS_GEN_VERTEX_ORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E78, .hexadecimal);
pub const TESS_GEN_POINT_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E79, .hexadecimal);
pub const ISOLINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7A, .hexadecimal);
pub const FRACTIONAL_ODD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7B, .hexadecimal);
pub const FRACTIONAL_EVEN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7C, .hexadecimal);
pub const MAX_PATCH_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7D, .hexadecimal);
pub const MAX_TESS_GEN_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7E, .hexadecimal);
pub const MAX_TESS_CONTROL_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7F, .hexadecimal);
pub const MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E80, .hexadecimal);
pub const MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E81, .hexadecimal);
pub const MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E82, .hexadecimal);
pub const MAX_TESS_CONTROL_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E83, .hexadecimal);
pub const MAX_TESS_PATCH_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E84, .hexadecimal);
pub const MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E85, .hexadecimal);
pub const MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E86, .hexadecimal);
pub const MAX_TESS_CONTROL_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E89, .hexadecimal);
pub const MAX_TESS_EVALUATION_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8A, .hexadecimal);
pub const MAX_TESS_CONTROL_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886C, .hexadecimal);
pub const MAX_TESS_EVALUATION_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886D, .hexadecimal);
pub const MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1E, .hexadecimal);
pub const MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1F, .hexadecimal);
pub const UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F0, .hexadecimal);
pub const UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F1, .hexadecimal);
pub const TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E87, .hexadecimal);
pub const TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E88, .hexadecimal);
pub const TRANSFORM_FEEDBACK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E22, .hexadecimal);
pub const TRANSFORM_FEEDBACK_BUFFER_PAUSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E23, .hexadecimal);
pub const TRANSFORM_FEEDBACK_BUFFER_ACTIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E24, .hexadecimal);
pub const TRANSFORM_FEEDBACK_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E25, .hexadecimal);
pub const MAX_TRANSFORM_FEEDBACK_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E70, .hexadecimal);
pub const FIXED = @as(c_int, 0x140C);
pub const IMPLEMENTATION_COLOR_READ_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9A, .hexadecimal);
pub const IMPLEMENTATION_COLOR_READ_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9B, .hexadecimal);
pub const LOW_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF0, .hexadecimal);
pub const MEDIUM_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF1, .hexadecimal);
pub const HIGH_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF2, .hexadecimal);
pub const LOW_INT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF3, .hexadecimal);
pub const MEDIUM_INT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF4, .hexadecimal);
pub const HIGH_INT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF5, .hexadecimal);
pub const SHADER_COMPILER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFA, .hexadecimal);
pub const SHADER_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF8, .hexadecimal);
pub const NUM_SHADER_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF9, .hexadecimal);
pub const MAX_VERTEX_UNIFORM_VECTORS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFB, .hexadecimal);
pub const MAX_VARYING_VECTORS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFC, .hexadecimal);
pub const MAX_FRAGMENT_UNIFORM_VECTORS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFD, .hexadecimal);
pub const RGB565 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D62, .hexadecimal);
pub const PROGRAM_BINARY_RETRIEVABLE_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8257, .hexadecimal);
pub const PROGRAM_BINARY_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8741, .hexadecimal);
pub const NUM_PROGRAM_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FE, .hexadecimal);
pub const PROGRAM_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FF, .hexadecimal);
pub const VERTEX_SHADER_BIT = @as(c_int, 0x00000001);
pub const FRAGMENT_SHADER_BIT = @as(c_int, 0x00000002);
pub const GEOMETRY_SHADER_BIT = @as(c_int, 0x00000004);
pub const TESS_CONTROL_SHADER_BIT = @as(c_int, 0x00000008);
pub const TESS_EVALUATION_SHADER_BIT = @as(c_int, 0x00000010);
pub const ALL_SHADER_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const PROGRAM_SEPARABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8258, .hexadecimal);
pub const ACTIVE_PROGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8259, .hexadecimal);
pub const PROGRAM_PIPELINE_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825A, .hexadecimal);
pub const MAX_VIEWPORTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825B, .hexadecimal);
pub const VIEWPORT_SUBPIXEL_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825C, .hexadecimal);
pub const VIEWPORT_BOUNDS_RANGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825D, .hexadecimal);
pub const LAYER_PROVOKING_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825E, .hexadecimal);
pub const VIEWPORT_INDEX_PROVOKING_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825F, .hexadecimal);
pub const UNDEFINED_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8260, .hexadecimal);
pub const COPY_READ_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F36, .hexadecimal);
pub const COPY_WRITE_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F37, .hexadecimal);
pub const TRANSFORM_FEEDBACK_ACTIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E24, .hexadecimal);
pub const TRANSFORM_FEEDBACK_PAUSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E23, .hexadecimal);
pub const UNPACK_COMPRESSED_BLOCK_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9127, .hexadecimal);
pub const UNPACK_COMPRESSED_BLOCK_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9128, .hexadecimal);
pub const UNPACK_COMPRESSED_BLOCK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9129, .hexadecimal);
pub const UNPACK_COMPRESSED_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912A, .hexadecimal);
pub const PACK_COMPRESSED_BLOCK_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912B, .hexadecimal);
pub const PACK_COMPRESSED_BLOCK_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912C, .hexadecimal);
pub const PACK_COMPRESSED_BLOCK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912D, .hexadecimal);
pub const PACK_COMPRESSED_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912E, .hexadecimal);
pub const NUM_SAMPLE_COUNTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9380, .hexadecimal);
pub const MIN_MAP_BUFFER_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BC, .hexadecimal);
pub const ATOMIC_COUNTER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C0, .hexadecimal);
pub const ATOMIC_COUNTER_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C1, .hexadecimal);
pub const ATOMIC_COUNTER_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C2, .hexadecimal);
pub const ATOMIC_COUNTER_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C3, .hexadecimal);
pub const ATOMIC_COUNTER_BUFFER_DATA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C4, .hexadecimal);
pub const ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C5, .hexadecimal);
pub const ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C6, .hexadecimal);
pub const ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C7, .hexadecimal);
pub const ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C8, .hexadecimal);
pub const ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C9, .hexadecimal);
pub const ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CA, .hexadecimal);
pub const ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CB, .hexadecimal);
pub const MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CC, .hexadecimal);
pub const MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CD, .hexadecimal);
pub const MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CE, .hexadecimal);
pub const MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CF, .hexadecimal);
pub const MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D0, .hexadecimal);
pub const MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D1, .hexadecimal);
pub const MAX_VERTEX_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D2, .hexadecimal);
pub const MAX_TESS_CONTROL_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D3, .hexadecimal);
pub const MAX_TESS_EVALUATION_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D4, .hexadecimal);
pub const MAX_GEOMETRY_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D5, .hexadecimal);
pub const MAX_FRAGMENT_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D6, .hexadecimal);
pub const MAX_COMBINED_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D7, .hexadecimal);
pub const MAX_ATOMIC_COUNTER_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D8, .hexadecimal);
pub const MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DC, .hexadecimal);
pub const ACTIVE_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D9, .hexadecimal);
pub const UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DA, .hexadecimal);
pub const UNSIGNED_INT_ATOMIC_COUNTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DB, .hexadecimal);
pub const VERTEX_ATTRIB_ARRAY_BARRIER_BIT = @as(c_int, 0x00000001);
pub const ELEMENT_ARRAY_BARRIER_BIT = @as(c_int, 0x00000002);
pub const UNIFORM_BARRIER_BIT = @as(c_int, 0x00000004);
pub const TEXTURE_FETCH_BARRIER_BIT = @as(c_int, 0x00000008);
pub const SHADER_IMAGE_ACCESS_BARRIER_BIT = @as(c_int, 0x00000020);
pub const COMMAND_BARRIER_BIT = @as(c_int, 0x00000040);
pub const PIXEL_BUFFER_BARRIER_BIT = @as(c_int, 0x00000080);
pub const TEXTURE_UPDATE_BARRIER_BIT = @as(c_int, 0x00000100);
pub const BUFFER_UPDATE_BARRIER_BIT = @as(c_int, 0x00000200);
pub const FRAMEBUFFER_BARRIER_BIT = @as(c_int, 0x00000400);
pub const TRANSFORM_FEEDBACK_BARRIER_BIT = @as(c_int, 0x00000800);
pub const ATOMIC_COUNTER_BARRIER_BIT = @as(c_int, 0x00001000);
pub const ALL_BARRIER_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const MAX_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F38, .hexadecimal);
pub const MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F39, .hexadecimal);
pub const IMAGE_BINDING_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3A, .hexadecimal);
pub const IMAGE_BINDING_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3B, .hexadecimal);
pub const IMAGE_BINDING_LAYERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3C, .hexadecimal);
pub const IMAGE_BINDING_LAYER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3D, .hexadecimal);
pub const IMAGE_BINDING_ACCESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3E, .hexadecimal);
pub const IMAGE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904C, .hexadecimal);
pub const IMAGE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904D, .hexadecimal);
pub const IMAGE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904E, .hexadecimal);
pub const IMAGE_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904F, .hexadecimal);
pub const IMAGE_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9050, .hexadecimal);
pub const IMAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9051, .hexadecimal);
pub const IMAGE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9052, .hexadecimal);
pub const IMAGE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9053, .hexadecimal);
pub const IMAGE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9054, .hexadecimal);
pub const IMAGE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9055, .hexadecimal);
pub const IMAGE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9056, .hexadecimal);
pub const INT_IMAGE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9057, .hexadecimal);
pub const INT_IMAGE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9058, .hexadecimal);
pub const INT_IMAGE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9059, .hexadecimal);
pub const INT_IMAGE_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905A, .hexadecimal);
pub const INT_IMAGE_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905B, .hexadecimal);
pub const INT_IMAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905C, .hexadecimal);
pub const INT_IMAGE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905D, .hexadecimal);
pub const INT_IMAGE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905E, .hexadecimal);
pub const INT_IMAGE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905F, .hexadecimal);
pub const INT_IMAGE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9060, .hexadecimal);
pub const INT_IMAGE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9061, .hexadecimal);
pub const UNSIGNED_INT_IMAGE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9062, .hexadecimal);
pub const UNSIGNED_INT_IMAGE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9063, .hexadecimal);
pub const UNSIGNED_INT_IMAGE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9064, .hexadecimal);
pub const UNSIGNED_INT_IMAGE_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9065, .hexadecimal);
pub const UNSIGNED_INT_IMAGE_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9066, .hexadecimal);
pub const UNSIGNED_INT_IMAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9067, .hexadecimal);
pub const UNSIGNED_INT_IMAGE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9068, .hexadecimal);
pub const UNSIGNED_INT_IMAGE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9069, .hexadecimal);
pub const UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906A, .hexadecimal);
pub const UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906B, .hexadecimal);
pub const UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906C, .hexadecimal);
pub const MAX_IMAGE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906D, .hexadecimal);
pub const IMAGE_BINDING_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906E, .hexadecimal);
pub const IMAGE_FORMAT_COMPATIBILITY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90C7, .hexadecimal);
pub const IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90C8, .hexadecimal);
pub const IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90C9, .hexadecimal);
pub const MAX_VERTEX_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CA, .hexadecimal);
pub const MAX_TESS_CONTROL_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CB, .hexadecimal);
pub const MAX_TESS_EVALUATION_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CC, .hexadecimal);
pub const MAX_GEOMETRY_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CD, .hexadecimal);
pub const MAX_FRAGMENT_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CE, .hexadecimal);
pub const MAX_COMBINED_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CF, .hexadecimal);
pub const COMPRESSED_RGBA_BPTC_UNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8C, .hexadecimal);
pub const COMPRESSED_SRGB_ALPHA_BPTC_UNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8D, .hexadecimal);
pub const COMPRESSED_RGB_BPTC_SIGNED_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8E, .hexadecimal);
pub const COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8F, .hexadecimal);
pub const TEXTURE_IMMUTABLE_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912F, .hexadecimal);
pub const NUM_SHADING_LANGUAGE_VERSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E9, .hexadecimal);
pub const VERTEX_ATTRIB_ARRAY_LONG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874E, .hexadecimal);
pub const COMPRESSED_RGB8_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9274, .hexadecimal);
pub const COMPRESSED_SRGB8_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9275, .hexadecimal);
pub const COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9276, .hexadecimal);
pub const COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9277, .hexadecimal);
pub const COMPRESSED_RGBA8_ETC2_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9278, .hexadecimal);
pub const COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9279, .hexadecimal);
pub const COMPRESSED_R11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9270, .hexadecimal);
pub const COMPRESSED_SIGNED_R11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9271, .hexadecimal);
pub const COMPRESSED_RG11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9272, .hexadecimal);
pub const COMPRESSED_SIGNED_RG11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9273, .hexadecimal);
pub const PRIMITIVE_RESTART_FIXED_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D69, .hexadecimal);
pub const ANY_SAMPLES_PASSED_CONSERVATIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D6A, .hexadecimal);
pub const MAX_ELEMENT_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D6B, .hexadecimal);
pub const COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B9, .hexadecimal);
pub const MAX_COMPUTE_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BB, .hexadecimal);
pub const MAX_COMPUTE_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BC, .hexadecimal);
pub const MAX_COMPUTE_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BD, .hexadecimal);
pub const MAX_COMPUTE_SHARED_MEMORY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8262, .hexadecimal);
pub const MAX_COMPUTE_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8263, .hexadecimal);
pub const MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8264, .hexadecimal);
pub const MAX_COMPUTE_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8265, .hexadecimal);
pub const MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8266, .hexadecimal);
pub const MAX_COMPUTE_WORK_GROUP_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EB, .hexadecimal);
pub const MAX_COMPUTE_WORK_GROUP_COUNT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BE, .hexadecimal);
pub const MAX_COMPUTE_WORK_GROUP_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BF, .hexadecimal);
pub const COMPUTE_WORK_GROUP_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8267, .hexadecimal);
pub const UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EC, .hexadecimal);
pub const ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90ED, .hexadecimal);
pub const DISPATCH_INDIRECT_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EE, .hexadecimal);
pub const DISPATCH_INDIRECT_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EF, .hexadecimal);
pub const COMPUTE_SHADER_BIT = @as(c_int, 0x00000020);
pub const DEBUG_OUTPUT_SYNCHRONOUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8242, .hexadecimal);
pub const DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8243, .hexadecimal);
pub const DEBUG_CALLBACK_FUNCTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8244, .hexadecimal);
pub const DEBUG_CALLBACK_USER_PARAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8245, .hexadecimal);
pub const DEBUG_SOURCE_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8246, .hexadecimal);
pub const DEBUG_SOURCE_WINDOW_SYSTEM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8247, .hexadecimal);
pub const DEBUG_SOURCE_SHADER_COMPILER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8248, .hexadecimal);
pub const DEBUG_SOURCE_THIRD_PARTY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8249, .hexadecimal);
pub const DEBUG_SOURCE_APPLICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824A, .hexadecimal);
pub const DEBUG_SOURCE_OTHER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824B, .hexadecimal);
pub const DEBUG_TYPE_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824C, .hexadecimal);
pub const DEBUG_TYPE_DEPRECATED_BEHAVIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824D, .hexadecimal);
pub const DEBUG_TYPE_UNDEFINED_BEHAVIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824E, .hexadecimal);
pub const DEBUG_TYPE_PORTABILITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824F, .hexadecimal);
pub const DEBUG_TYPE_PERFORMANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8250, .hexadecimal);
pub const DEBUG_TYPE_OTHER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8251, .hexadecimal);
pub const MAX_DEBUG_MESSAGE_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9143, .hexadecimal);
pub const MAX_DEBUG_LOGGED_MESSAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9144, .hexadecimal);
pub const DEBUG_LOGGED_MESSAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9145, .hexadecimal);
pub const DEBUG_SEVERITY_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9146, .hexadecimal);
pub const DEBUG_SEVERITY_MEDIUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9147, .hexadecimal);
pub const DEBUG_SEVERITY_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9148, .hexadecimal);
pub const DEBUG_TYPE_MARKER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8268, .hexadecimal);
pub const DEBUG_TYPE_PUSH_GROUP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8269, .hexadecimal);
pub const DEBUG_TYPE_POP_GROUP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826A, .hexadecimal);
pub const DEBUG_SEVERITY_NOTIFICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826B, .hexadecimal);
pub const MAX_DEBUG_GROUP_STACK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826C, .hexadecimal);
pub const DEBUG_GROUP_STACK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826D, .hexadecimal);
pub const BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E0, .hexadecimal);
pub const SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E1, .hexadecimal);
pub const PROGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E2, .hexadecimal);
pub const QUERY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E3, .hexadecimal);
pub const PROGRAM_PIPELINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E4, .hexadecimal);
pub const SAMPLER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E6, .hexadecimal);
pub const MAX_LABEL_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E8, .hexadecimal);
pub const DEBUG_OUTPUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E0, .hexadecimal);
pub const CONTEXT_FLAG_DEBUG_BIT = @as(c_int, 0x00000002);
pub const MAX_UNIFORM_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826E, .hexadecimal);
pub const FRAMEBUFFER_DEFAULT_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9310, .hexadecimal);
pub const FRAMEBUFFER_DEFAULT_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9311, .hexadecimal);
pub const FRAMEBUFFER_DEFAULT_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9312, .hexadecimal);
pub const FRAMEBUFFER_DEFAULT_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9313, .hexadecimal);
pub const FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9314, .hexadecimal);
pub const MAX_FRAMEBUFFER_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9315, .hexadecimal);
pub const MAX_FRAMEBUFFER_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9316, .hexadecimal);
pub const MAX_FRAMEBUFFER_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9317, .hexadecimal);
pub const MAX_FRAMEBUFFER_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9318, .hexadecimal);
pub const INTERNALFORMAT_SUPPORTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826F, .hexadecimal);
pub const INTERNALFORMAT_PREFERRED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8270, .hexadecimal);
pub const INTERNALFORMAT_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8271, .hexadecimal);
pub const INTERNALFORMAT_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8272, .hexadecimal);
pub const INTERNALFORMAT_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8273, .hexadecimal);
pub const INTERNALFORMAT_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8274, .hexadecimal);
pub const INTERNALFORMAT_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8275, .hexadecimal);
pub const INTERNALFORMAT_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8276, .hexadecimal);
pub const INTERNALFORMAT_SHARED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8277, .hexadecimal);
pub const INTERNALFORMAT_RED_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8278, .hexadecimal);
pub const INTERNALFORMAT_GREEN_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8279, .hexadecimal);
pub const INTERNALFORMAT_BLUE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827A, .hexadecimal);
pub const INTERNALFORMAT_ALPHA_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827B, .hexadecimal);
pub const INTERNALFORMAT_DEPTH_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827C, .hexadecimal);
pub const INTERNALFORMAT_STENCIL_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827D, .hexadecimal);
pub const MAX_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827E, .hexadecimal);
pub const MAX_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827F, .hexadecimal);
pub const MAX_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8280, .hexadecimal);
pub const MAX_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8281, .hexadecimal);
pub const MAX_COMBINED_DIMENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8282, .hexadecimal);
pub const COLOR_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8283, .hexadecimal);
pub const DEPTH_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8284, .hexadecimal);
pub const STENCIL_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8285, .hexadecimal);
pub const COLOR_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8286, .hexadecimal);
pub const DEPTH_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8287, .hexadecimal);
pub const STENCIL_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8288, .hexadecimal);
pub const FRAMEBUFFER_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8289, .hexadecimal);
pub const FRAMEBUFFER_RENDERABLE_LAYERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828A, .hexadecimal);
pub const FRAMEBUFFER_BLEND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828B, .hexadecimal);
pub const READ_PIXELS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828C, .hexadecimal);
pub const READ_PIXELS_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828D, .hexadecimal);
pub const READ_PIXELS_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828E, .hexadecimal);
pub const TEXTURE_IMAGE_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828F, .hexadecimal);
pub const TEXTURE_IMAGE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8290, .hexadecimal);
pub const GET_TEXTURE_IMAGE_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8291, .hexadecimal);
pub const GET_TEXTURE_IMAGE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8292, .hexadecimal);
pub const MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8293, .hexadecimal);
pub const MANUAL_GENERATE_MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8294, .hexadecimal);
pub const AUTO_GENERATE_MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8295, .hexadecimal);
pub const COLOR_ENCODING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8296, .hexadecimal);
pub const SRGB_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8297, .hexadecimal);
pub const SRGB_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8298, .hexadecimal);
pub const FILTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829A, .hexadecimal);
pub const VERTEX_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829B, .hexadecimal);
pub const TESS_CONTROL_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829C, .hexadecimal);
pub const TESS_EVALUATION_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829D, .hexadecimal);
pub const GEOMETRY_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829E, .hexadecimal);
pub const FRAGMENT_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829F, .hexadecimal);
pub const COMPUTE_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A0, .hexadecimal);
pub const TEXTURE_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A1, .hexadecimal);
pub const TEXTURE_GATHER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A2, .hexadecimal);
pub const TEXTURE_GATHER_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A3, .hexadecimal);
pub const SHADER_IMAGE_LOAD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A4, .hexadecimal);
pub const SHADER_IMAGE_STORE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A5, .hexadecimal);
pub const SHADER_IMAGE_ATOMIC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A6, .hexadecimal);
pub const IMAGE_TEXEL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A7, .hexadecimal);
pub const IMAGE_COMPATIBILITY_CLASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A8, .hexadecimal);
pub const IMAGE_PIXEL_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A9, .hexadecimal);
pub const IMAGE_PIXEL_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AA, .hexadecimal);
pub const SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AC, .hexadecimal);
pub const SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AD, .hexadecimal);
pub const SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AE, .hexadecimal);
pub const SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AF, .hexadecimal);
pub const TEXTURE_COMPRESSED_BLOCK_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B1, .hexadecimal);
pub const TEXTURE_COMPRESSED_BLOCK_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B2, .hexadecimal);
pub const TEXTURE_COMPRESSED_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B3, .hexadecimal);
pub const CLEAR_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B4, .hexadecimal);
pub const TEXTURE_VIEW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B5, .hexadecimal);
pub const VIEW_COMPATIBILITY_CLASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B6, .hexadecimal);
pub const FULL_SUPPORT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B7, .hexadecimal);
pub const CAVEAT_SUPPORT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B8, .hexadecimal);
pub const IMAGE_CLASS_4_X_32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B9, .hexadecimal);
pub const IMAGE_CLASS_2_X_32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BA, .hexadecimal);
pub const IMAGE_CLASS_1_X_32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BB, .hexadecimal);
pub const IMAGE_CLASS_4_X_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BC, .hexadecimal);
pub const IMAGE_CLASS_2_X_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BD, .hexadecimal);
pub const IMAGE_CLASS_1_X_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BE, .hexadecimal);
pub const IMAGE_CLASS_4_X_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BF, .hexadecimal);
pub const IMAGE_CLASS_2_X_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C0, .hexadecimal);
pub const IMAGE_CLASS_1_X_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C1, .hexadecimal);
pub const IMAGE_CLASS_11_11_10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C2, .hexadecimal);
pub const IMAGE_CLASS_10_10_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C3, .hexadecimal);
pub const VIEW_CLASS_128_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C4, .hexadecimal);
pub const VIEW_CLASS_96_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C5, .hexadecimal);
pub const VIEW_CLASS_64_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C6, .hexadecimal);
pub const VIEW_CLASS_48_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C7, .hexadecimal);
pub const VIEW_CLASS_32_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C8, .hexadecimal);
pub const VIEW_CLASS_24_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C9, .hexadecimal);
pub const VIEW_CLASS_16_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CA, .hexadecimal);
pub const VIEW_CLASS_8_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CB, .hexadecimal);
pub const VIEW_CLASS_S3TC_DXT1_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CC, .hexadecimal);
pub const VIEW_CLASS_S3TC_DXT1_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CD, .hexadecimal);
pub const VIEW_CLASS_S3TC_DXT3_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CE, .hexadecimal);
pub const VIEW_CLASS_S3TC_DXT5_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CF, .hexadecimal);
pub const VIEW_CLASS_RGTC1_RED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D0, .hexadecimal);
pub const VIEW_CLASS_RGTC2_RG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D1, .hexadecimal);
pub const VIEW_CLASS_BPTC_UNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D2, .hexadecimal);
pub const VIEW_CLASS_BPTC_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D3, .hexadecimal);
pub const UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E1, .hexadecimal);
pub const UNIFORM_BLOCK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E2, .hexadecimal);
pub const PROGRAM_INPUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E3, .hexadecimal);
pub const PROGRAM_OUTPUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E4, .hexadecimal);
pub const BUFFER_VARIABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E5, .hexadecimal);
pub const SHADER_STORAGE_BLOCK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E6, .hexadecimal);
pub const VERTEX_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E8, .hexadecimal);
pub const TESS_CONTROL_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E9, .hexadecimal);
pub const TESS_EVALUATION_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EA, .hexadecimal);
pub const GEOMETRY_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EB, .hexadecimal);
pub const FRAGMENT_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EC, .hexadecimal);
pub const COMPUTE_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92ED, .hexadecimal);
pub const VERTEX_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EE, .hexadecimal);
pub const TESS_CONTROL_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EF, .hexadecimal);
pub const TESS_EVALUATION_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F0, .hexadecimal);
pub const GEOMETRY_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F1, .hexadecimal);
pub const FRAGMENT_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F2, .hexadecimal);
pub const COMPUTE_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F3, .hexadecimal);
pub const TRANSFORM_FEEDBACK_VARYING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F4, .hexadecimal);
pub const ACTIVE_RESOURCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F5, .hexadecimal);
pub const MAX_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F6, .hexadecimal);
pub const MAX_NUM_ACTIVE_VARIABLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F7, .hexadecimal);
pub const MAX_NUM_COMPATIBLE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F8, .hexadecimal);
pub const NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F9, .hexadecimal);
pub const TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FA, .hexadecimal);
pub const ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FB, .hexadecimal);
pub const OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FC, .hexadecimal);
pub const BLOCK_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FD, .hexadecimal);
pub const ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FE, .hexadecimal);
pub const MATRIX_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FF, .hexadecimal);
pub const IS_ROW_MAJOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9300, .hexadecimal);
pub const ATOMIC_COUNTER_BUFFER_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9301, .hexadecimal);
pub const BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9302, .hexadecimal);
pub const BUFFER_DATA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9303, .hexadecimal);
pub const NUM_ACTIVE_VARIABLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9304, .hexadecimal);
pub const ACTIVE_VARIABLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9305, .hexadecimal);
pub const REFERENCED_BY_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9306, .hexadecimal);
pub const REFERENCED_BY_TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9307, .hexadecimal);
pub const REFERENCED_BY_TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9308, .hexadecimal);
pub const REFERENCED_BY_GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9309, .hexadecimal);
pub const REFERENCED_BY_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930A, .hexadecimal);
pub const REFERENCED_BY_COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930B, .hexadecimal);
pub const TOP_LEVEL_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930C, .hexadecimal);
pub const TOP_LEVEL_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930D, .hexadecimal);
pub const LOCATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930E, .hexadecimal);
pub const LOCATION_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930F, .hexadecimal);
pub const IS_PER_PATCH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E7, .hexadecimal);
pub const SHADER_STORAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D2, .hexadecimal);
pub const SHADER_STORAGE_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D3, .hexadecimal);
pub const SHADER_STORAGE_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D4, .hexadecimal);
pub const SHADER_STORAGE_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D5, .hexadecimal);
pub const MAX_VERTEX_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D6, .hexadecimal);
pub const MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D7, .hexadecimal);
pub const MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D8, .hexadecimal);
pub const MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D9, .hexadecimal);
pub const MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DA, .hexadecimal);
pub const MAX_COMPUTE_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DB, .hexadecimal);
pub const MAX_COMBINED_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DC, .hexadecimal);
pub const MAX_SHADER_STORAGE_BUFFER_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DD, .hexadecimal);
pub const MAX_SHADER_STORAGE_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DE, .hexadecimal);
pub const SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DF, .hexadecimal);
pub const SHADER_STORAGE_BARRIER_BIT = @as(c_int, 0x00002000);
pub const MAX_COMBINED_SHADER_OUTPUT_RESOURCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F39, .hexadecimal);
pub const DEPTH_STENCIL_TEXTURE_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EA, .hexadecimal);
pub const TEXTURE_BUFFER_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919D, .hexadecimal);
pub const TEXTURE_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919E, .hexadecimal);
pub const TEXTURE_BUFFER_OFFSET_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919F, .hexadecimal);
pub const TEXTURE_VIEW_MIN_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DB, .hexadecimal);
pub const TEXTURE_VIEW_NUM_LEVELS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DC, .hexadecimal);
pub const TEXTURE_VIEW_MIN_LAYER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DD, .hexadecimal);
pub const TEXTURE_VIEW_NUM_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DE, .hexadecimal);
pub const TEXTURE_IMMUTABLE_LEVELS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DF, .hexadecimal);
pub const VERTEX_ATTRIB_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D4, .hexadecimal);
pub const VERTEX_ATTRIB_RELATIVE_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D5, .hexadecimal);
pub const VERTEX_BINDING_DIVISOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D6, .hexadecimal);
pub const VERTEX_BINDING_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D7, .hexadecimal);
pub const VERTEX_BINDING_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D8, .hexadecimal);
pub const MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D9, .hexadecimal);
pub const MAX_VERTEX_ATTRIB_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DA, .hexadecimal);
pub const VERTEX_BINDING_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4F, .hexadecimal);
pub const DISPLAY_LIST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E7, .hexadecimal);
pub const MAX_VERTEX_ATTRIB_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E5, .hexadecimal);
pub const PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8221, .hexadecimal);
pub const TEXTURE_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hexadecimal);
pub const MAP_PERSISTENT_BIT = @as(c_int, 0x0040);
pub const MAP_COHERENT_BIT = @as(c_int, 0x0080);
pub const DYNAMIC_STORAGE_BIT = @as(c_int, 0x0100);
pub const CLIENT_STORAGE_BIT = @as(c_int, 0x0200);
pub const CLIENT_MAPPED_BUFFER_BARRIER_BIT = @as(c_int, 0x00004000);
pub const BUFFER_IMMUTABLE_STORAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821F, .hexadecimal);
pub const BUFFER_STORAGE_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8220, .hexadecimal);
pub const CLEAR_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9365, .hexadecimal);
pub const LOCATION_COMPONENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934A, .hexadecimal);
pub const TRANSFORM_FEEDBACK_BUFFER_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934B, .hexadecimal);
pub const TRANSFORM_FEEDBACK_BUFFER_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934C, .hexadecimal);
pub const QUERY_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9192, .hexadecimal);
pub const QUERY_BUFFER_BARRIER_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal);
pub const QUERY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9193, .hexadecimal);
pub const QUERY_RESULT_NO_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9194, .hexadecimal);
pub const MIRROR_CLAMP_TO_EDGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8743, .hexadecimal);
pub const CONTEXT_LOST = @as(c_int, 0x0507);
pub const NEGATIVE_ONE_TO_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935E, .hexadecimal);
pub const ZERO_TO_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935F, .hexadecimal);
pub const CLIP_ORIGIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935C, .hexadecimal);
pub const CLIP_DEPTH_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935D, .hexadecimal);
pub const QUERY_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E17, .hexadecimal);
pub const QUERY_NO_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E18, .hexadecimal);
pub const QUERY_BY_REGION_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E19, .hexadecimal);
pub const QUERY_BY_REGION_NO_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1A, .hexadecimal);
pub const MAX_CULL_DISTANCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F9, .hexadecimal);
pub const MAX_COMBINED_CLIP_AND_CULL_DISTANCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FA, .hexadecimal);
pub const TEXTURE_TARGET = @as(c_int, 0x1006);
pub const QUERY_TARGET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EA, .hexadecimal);
pub const GUILTY_CONTEXT_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8253, .hexadecimal);
pub const INNOCENT_CONTEXT_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8254, .hexadecimal);
pub const UNKNOWN_CONTEXT_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8255, .hexadecimal);
pub const RESET_NOTIFICATION_STRATEGY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8256, .hexadecimal);
pub const LOSE_CONTEXT_ON_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8252, .hexadecimal);
pub const NO_RESET_NOTIFICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8261, .hexadecimal);
pub const CONTEXT_FLAG_ROBUST_ACCESS_BIT = @as(c_int, 0x00000004);
pub const COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D0, .hexadecimal);
pub const POST_CONVOLUTION_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D1, .hexadecimal);
pub const POST_COLOR_MATRIX_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D2, .hexadecimal);
pub const PROXY_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D3, .hexadecimal);
pub const PROXY_POST_CONVOLUTION_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D4, .hexadecimal);
pub const PROXY_POST_COLOR_MATRIX_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D5, .hexadecimal);
pub const CONVOLUTION_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8010, .hexadecimal);
pub const CONVOLUTION_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8011, .hexadecimal);
pub const SEPARABLE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8012, .hexadecimal);
pub const HISTOGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8024, .hexadecimal);
pub const PROXY_HISTOGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8025, .hexadecimal);
pub const MINMAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802E, .hexadecimal);
pub const CONTEXT_RELEASE_BEHAVIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FB, .hexadecimal);
pub const CONTEXT_RELEASE_BEHAVIOR_FLUSH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FC, .hexadecimal);
pub const SHADER_BINARY_FORMAT_SPIR_V = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9551, .hexadecimal);
pub const SPIR_V_BINARY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9552, .hexadecimal);
pub const PARAMETER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EE, .hexadecimal);
pub const PARAMETER_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EF, .hexadecimal);
pub const CONTEXT_FLAG_NO_ERROR_BIT = @as(c_int, 0x00000008);
pub const VERTICES_SUBMITTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EE, .hexadecimal);
pub const PRIMITIVES_SUBMITTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EF, .hexadecimal);
pub const VERTEX_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F0, .hexadecimal);
pub const TESS_CONTROL_SHADER_PATCHES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F1, .hexadecimal);
pub const TESS_EVALUATION_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F2, .hexadecimal);
pub const GEOMETRY_SHADER_PRIMITIVES_EMITTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F3, .hexadecimal);
pub const FRAGMENT_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F4, .hexadecimal);
pub const COMPUTE_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F5, .hexadecimal);
pub const CLIPPING_INPUT_PRIMITIVES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F6, .hexadecimal);
pub const CLIPPING_OUTPUT_PRIMITIVES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F7, .hexadecimal);
pub const POLYGON_OFFSET_CLAMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1B, .hexadecimal);
pub const SPIR_V_EXTENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9553, .hexadecimal);
pub const NUM_SPIR_V_EXTENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9554, .hexadecimal);
pub const TEXTURE_MAX_ANISOTROPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FE, .hexadecimal);
pub const MAX_TEXTURE_MAX_ANISOTROPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FF, .hexadecimal);
pub const TRANSFORM_FEEDBACK_OVERFLOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EC, .hexadecimal);
pub const TRANSFORM_FEEDBACK_STREAM_OVERFLOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82ED, .hexadecimal);

pub var accum: Types.PFN_GLACCUMPROC = undefined;
pub var activeShaderProgram: Types.PFN_GLACTIVESHADERPROGRAMPROC = undefined;
pub var activeTexture: Types.PFN_GLACTIVETEXTUREPROC = undefined;
pub var alphaFunc: Types.PFN_GLALPHAFUNCPROC = undefined;
pub var areTexturesResident: Types.PFN_GLARETEXTURESRESIDENTPROC = undefined;
pub var arrayElement: Types.PFN_GLARRAYELEMENTPROC = undefined;
pub var attachShader: Types.PFN_GLATTACHSHADERPROC = undefined;
pub var begin: Types.PFN_GLBEGINPROC = undefined;
pub var beginConditionalRender: Types.PFN_GLBEGINCONDITIONALRENDERPROC = undefined;
pub var beginQuery: Types.PFN_GLBEGINQUERYPROC = undefined;
pub var beginQueryIndexed: Types.PFN_GLBEGINQUERYINDEXEDPROC = undefined;
pub var beginTransformFeedback: Types.PFN_GLBEGINTRANSFORMFEEDBACKPROC = undefined;
pub var bindAttribLocation: Types.PFN_GLBINDATTRIBLOCATIONPROC = undefined;
pub var bindBuffer: Types.PFN_GLBINDBUFFERPROC = undefined;
pub var bindBufferBase: Types.PFN_GLBINDBUFFERBASEPROC = undefined;
pub var bindBufferRange: Types.PFN_GLBINDBUFFERRANGEPROC = undefined;
pub var bindBuffersBase: Types.PFN_GLBINDBUFFERSBASEPROC = undefined;
pub var bindBuffersRange: Types.PFN_GLBINDBUFFERSRANGEPROC = undefined;
pub var bindFragDataLocation: Types.PFN_GLBINDFRAGDATALOCATIONPROC = undefined;
pub var bindFragDataLocationIndexed: Types.PFN_GLBINDFRAGDATALOCATIONINDEXEDPROC = undefined;
pub var bindFramebuffer: Types.PFN_GLBINDFRAMEBUFFERPROC = undefined;
pub var bindImageTexture: Types.PFN_GLBINDIMAGETEXTUREPROC = undefined;
pub var bindImageTextures: Types.PFN_GLBINDIMAGETEXTURESPROC = undefined;
pub var bindProgramPipeline: Types.PFN_GLBINDPROGRAMPIPELINEPROC = undefined;
pub var bindRenderbuffer: Types.PFN_GLBINDRENDERBUFFERPROC = undefined;
pub var bindSampler: Types.PFN_GLBINDSAMPLERPROC = undefined;
pub var bindSamplers: Types.PFN_GLBINDSAMPLERSPROC = undefined;
pub var bindTexture: Types.PFN_GLBINDTEXTUREPROC = undefined;
pub var bindTextureUnit: Types.PFN_GLBINDTEXTUREUNITPROC = undefined;
pub var bindTextures: Types.PFN_GLBINDTEXTURESPROC = undefined;
pub var bindTransformFeedback: Types.PFN_GLBINDTRANSFORMFEEDBACKPROC = undefined;
pub var bindVertexArray: Types.PFN_GLBINDVERTEXARRAYPROC = undefined;
pub var bindVertexBuffer: Types.PFN_GLBINDVERTEXBUFFERPROC = undefined;
pub var bindVertexBuffers: Types.PFN_GLBINDVERTEXBUFFERSPROC = undefined;
pub var bitmap: Types.PFN_GLBITMAPPROC = undefined;
pub var blendColor: Types.PFN_GLBLENDCOLORPROC = undefined;
pub var blendEquation: Types.PFN_GLBLENDEQUATIONPROC = undefined;
pub var blendEquationSeparate: Types.PFN_GLBLENDEQUATIONSEPARATEPROC = undefined;
pub var blendEquationSeparatei: Types.PFN_GLBLENDEQUATIONSEPARATEIPROC = undefined;
pub var blendEquationi: Types.PFN_GLBLENDEQUATIONIPROC = undefined;
pub var blendFunc: Types.PFN_GLBLENDFUNCPROC = undefined;
pub var blendFuncSeparate: Types.PFN_GLBLENDFUNCSEPARATEPROC = undefined;
pub var blendFuncSeparatei: Types.PFN_GLBLENDFUNCSEPARATEIPROC = undefined;
pub var blendFunci: Types.PFN_GLBLENDFUNCIPROC = undefined;
pub var blitFramebuffer: Types.PFN_GLBLITFRAMEBUFFERPROC = undefined;
pub var blitNamedFramebuffer: Types.PFN_GLBLITNAMEDFRAMEBUFFERPROC = undefined;
pub var bufferData: Types.PFN_GLBUFFERDATAPROC = undefined;
pub var bufferStorage: Types.PFN_GLBUFFERSTORAGEPROC = undefined;
pub var bufferSubData: Types.PFN_GLBUFFERSUBDATAPROC = undefined;
pub var callList: Types.PFN_GLCALLLISTPROC = undefined;
pub var callLists: Types.PFN_GLCALLLISTSPROC = undefined;
pub var checkFramebufferStatus: Types.PFN_GLCHECKFRAMEBUFFERSTATUSPROC = undefined;
pub var checkNamedFramebufferStatus: Types.PFN_GLCHECKNAMEDFRAMEBUFFERSTATUSPROC = undefined;
pub var clampColor: Types.PFN_GLCLAMPCOLORPROC = undefined;
pub var clear: Types.PFN_GLCLEARPROC = undefined;
pub var clearAccum: Types.PFN_GLCLEARACCUMPROC = undefined;
pub var clearBufferData: Types.PFN_GLCLEARBUFFERDATAPROC = undefined;
pub var clearBufferSubData: Types.PFN_GLCLEARBUFFERSUBDATAPROC = undefined;
pub var clearBufferfi: Types.PFN_GLCLEARBUFFERFIPROC = undefined;
pub var clearBufferfv: Types.PFN_GLCLEARBUFFERFVPROC = undefined;
pub var clearBufferiv: Types.PFN_GLCLEARBUFFERIVPROC = undefined;
pub var clearBufferuiv: Types.PFN_GLCLEARBUFFERUIVPROC = undefined;
pub var clearColor: Types.PFN_GLCLEARCOLORPROC = undefined;
pub var clearDepth: Types.PFN_GLCLEARDEPTHPROC = undefined;
pub var clearDepthf: Types.PFN_GLCLEARDEPTHFPROC = undefined;
pub var clearIndex: Types.PFN_GLCLEARINDEXPROC = undefined;
pub var clearNamedBufferData: Types.PFN_GLCLEARNAMEDBUFFERDATAPROC = undefined;
pub var clearNamedBufferSubData: Types.PFN_GLCLEARNAMEDBUFFERSUBDATAPROC = undefined;
pub var clearNamedFramebufferfi: Types.PFN_GLCLEARNAMEDFRAMEBUFFERFIPROC = undefined;
pub var clearNamedFramebufferfv: Types.PFN_GLCLEARNAMEDFRAMEBUFFERFVPROC = undefined;
pub var clearNamedFramebufferiv: Types.PFN_GLCLEARNAMEDFRAMEBUFFERIVPROC = undefined;
pub var clearNamedFramebufferuiv: Types.PFN_GLCLEARNAMEDFRAMEBUFFERUIVPROC = undefined;
pub var clearStencil: Types.PFN_GLCLEARSTENCILPROC = undefined;
pub var clearTexImage: Types.PFN_GLCLEARTEXIMAGEPROC = undefined;
pub var clearTexSubImage: Types.PFN_GLCLEARTEXSUBIMAGEPROC = undefined;
pub var clientActiveTexture: Types.PFN_GLCLIENTACTIVETEXTUREPROC = undefined;
pub var clientWaitSync: Types.PFN_GLCLIENTWAITSYNCPROC = undefined;
pub var clipControl: Types.PFN_GLCLIPCONTROLPROC = undefined;
pub var clipPlane: Types.PFN_GLCLIPPLANEPROC = undefined;
pub var color3b: Types.PFN_GLCOLOR3BPROC = undefined;
pub var color3bv: Types.PFN_GLCOLOR3BVPROC = undefined;
pub var color3d: Types.PFN_GLCOLOR3DPROC = undefined;
pub var color3dv: Types.PFN_GLCOLOR3DVPROC = undefined;
pub var color3f: Types.PFN_GLCOLOR3FPROC = undefined;
pub var color3fv: Types.PFN_GLCOLOR3FVPROC = undefined;
pub var color3i: Types.PFN_GLCOLOR3IPROC = undefined;
pub var color3iv: Types.PFN_GLCOLOR3IVPROC = undefined;
pub var color3s: Types.PFN_GLCOLOR3SPROC = undefined;
pub var color3sv: Types.PFN_GLCOLOR3SVPROC = undefined;
pub var color3ub: Types.PFN_GLCOLOR3UBPROC = undefined;
pub var color3ubv: Types.PFN_GLCOLOR3UBVPROC = undefined;
pub var color3ui: Types.PFN_GLCOLOR3UIPROC = undefined;
pub var color3uiv: Types.PFN_GLCOLOR3UIVPROC = undefined;
pub var color3us: Types.PFN_GLCOLOR3USPROC = undefined;
pub var color3usv: Types.PFN_GLCOLOR3USVPROC = undefined;
pub var color4b: Types.PFN_GLCOLOR4BPROC = undefined;
pub var color4bv: Types.PFN_GLCOLOR4BVPROC = undefined;
pub var color4d: Types.PFN_GLCOLOR4DPROC = undefined;
pub var color4dv: Types.PFN_GLCOLOR4DVPROC = undefined;
pub var color4f: Types.PFN_GLCOLOR4FPROC = undefined;
pub var color4fv: Types.PFN_GLCOLOR4FVPROC = undefined;
pub var color4i: Types.PFN_GLCOLOR4IPROC = undefined;
pub var color4iv: Types.PFN_GLCOLOR4IVPROC = undefined;
pub var color4s: Types.PFN_GLCOLOR4SPROC = undefined;
pub var color4sv: Types.PFN_GLCOLOR4SVPROC = undefined;
pub var color4ub: Types.PFN_GLCOLOR4UBPROC = undefined;
pub var color4ubv: Types.PFN_GLCOLOR4UBVPROC = undefined;
pub var color4ui: Types.PFN_GLCOLOR4UIPROC = undefined;
pub var color4uiv: Types.PFN_GLCOLOR4UIVPROC = undefined;
pub var color4us: Types.PFN_GLCOLOR4USPROC = undefined;
pub var color4usv: Types.PFN_GLCOLOR4USVPROC = undefined;
pub var colorMask: Types.PFN_GLCOLORMASKPROC = undefined;
pub var colorMaski: Types.PFN_GLCOLORMASKIPROC = undefined;
pub var colorMaterial: Types.PFN_GLCOLORMATERIALPROC = undefined;
pub var colorP3ui: Types.PFN_GLCOLORP3UIPROC = undefined;
pub var colorP3uiv: Types.PFN_GLCOLORP3UIVPROC = undefined;
pub var colorP4ui: Types.PFN_GLCOLORP4UIPROC = undefined;
pub var colorP4uiv: Types.PFN_GLCOLORP4UIVPROC = undefined;
pub var colorPointer: Types.PFN_GLCOLORPOINTERPROC = undefined;
pub var compileShader: Types.PFN_GLCOMPILESHADERPROC = undefined;
pub var compressedTexImage1D: Types.PFN_GLCOMPRESSEDTEXIMAGE1DPROC = undefined;
pub var compressedTexImage2D: Types.PFN_GLCOMPRESSEDTEXIMAGE2DPROC = undefined;
pub var compressedTexImage3D: Types.PFN_GLCOMPRESSEDTEXIMAGE3DPROC = undefined;
pub var compressedTexSubImage1D: Types.PFN_GLCOMPRESSEDTEXSUBIMAGE1DPROC = undefined;
pub var compressedTexSubImage2D: Types.PFN_GLCOMPRESSEDTEXSUBIMAGE2DPROC = undefined;
pub var compressedTexSubImage3D: Types.PFN_GLCOMPRESSEDTEXSUBIMAGE3DPROC = undefined;
pub var compressedTextureSubImage1D: Types.PFN_GLCOMPRESSEDTEXTURESUBIMAGE1DPROC = undefined;
pub var compressedTextureSubImage2D: Types.PFN_GLCOMPRESSEDTEXTURESUBIMAGE2DPROC = undefined;
pub var compressedTextureSubImage3D: Types.PFN_GLCOMPRESSEDTEXTURESUBIMAGE3DPROC = undefined;
pub var copyBufferSubData: Types.PFN_GLCOPYBUFFERSUBDATAPROC = undefined;
pub var copyImageSubData: Types.PFN_GLCOPYIMAGESUBDATAPROC = undefined;
pub var copyNamedBufferSubData: Types.PFN_GLCOPYNAMEDBUFFERSUBDATAPROC = undefined;
pub var copyPixels: Types.PFN_GLCOPYPIXELSPROC = undefined;
pub var copyTexImage1D: Types.PFN_GLCOPYTEXIMAGE1DPROC = undefined;
pub var copyTexImage2D: Types.PFN_GLCOPYTEXIMAGE2DPROC = undefined;
pub var copyTexSubImage1D: Types.PFN_GLCOPYTEXSUBIMAGE1DPROC = undefined;
pub var copyTexSubImage2D: Types.PFN_GLCOPYTEXSUBIMAGE2DPROC = undefined;
pub var copyTexSubImage3D: Types.PFN_GLCOPYTEXSUBIMAGE3DPROC = undefined;
pub var copyTextureSubImage1D: Types.PFN_GLCOPYTEXTURESUBIMAGE1DPROC = undefined;
pub var copyTextureSubImage2D: Types.PFN_GLCOPYTEXTURESUBIMAGE2DPROC = undefined;
pub var copyTextureSubImage3D: Types.PFN_GLCOPYTEXTURESUBIMAGE3DPROC = undefined;
pub var createBuffers: Types.PFN_GLCREATEBUFFERSPROC = undefined;
pub var createFramebuffers: Types.PFN_GLCREATEFRAMEBUFFERSPROC = undefined;
pub var createProgram: Types.PFN_GLCREATEPROGRAMPROC = undefined;
pub var createProgramPipelines: Types.PFN_GLCREATEPROGRAMPIPELINESPROC = undefined;
pub var createQueries: Types.PFN_GLCREATEQUERIESPROC = undefined;
pub var createRenderbuffers: Types.PFN_GLCREATERENDERBUFFERSPROC = undefined;
pub var createSamplers: Types.PFN_GLCREATESAMPLERSPROC = undefined;
pub var createShader: Types.PFN_GLCREATESHADERPROC = undefined;
pub var createShaderProgramv: Types.PFN_GLCREATESHADERPROGRAMVPROC = undefined;
pub var createTextures: Types.PFN_GLCREATETEXTURESPROC = undefined;
pub var createTransformFeedbacks: Types.PFN_GLCREATETRANSFORMFEEDBACKSPROC = undefined;
pub var createVertexArrays: Types.PFN_GLCREATEVERTEXARRAYSPROC = undefined;
pub var cullFace: Types.PFN_GLCULLFACEPROC = undefined;
pub var debugMessageCallback: Types.PFN_GLDEBUGMESSAGECALLBACKPROC = undefined;
pub var debugMessageControl: Types.PFN_GLDEBUGMESSAGECONTROLPROC = undefined;
pub var debugMessageInsert: Types.PFN_GLDEBUGMESSAGEINSERTPROC = undefined;
pub var deleteBuffers: Types.PFN_GLDELETEBUFFERSPROC = undefined;
pub var deleteFramebuffers: Types.PFN_GLDELETEFRAMEBUFFERSPROC = undefined;
pub var deleteLists: Types.PFN_GLDELETELISTSPROC = undefined;
pub var deleteProgram: Types.PFN_GLDELETEPROGRAMPROC = undefined;
pub var deleteProgramPipelines: Types.PFN_GLDELETEPROGRAMPIPELINESPROC = undefined;
pub var deleteQueries: Types.PFN_GLDELETEQUERIESPROC = undefined;
pub var deleteRenderbuffers: Types.PFN_GLDELETERENDERBUFFERSPROC = undefined;
pub var deleteSamplers: Types.PFN_GLDELETESAMPLERSPROC = undefined;
pub var deleteShader: Types.PFN_GLDELETESHADERPROC = undefined;
pub var deleteSync: Types.PFN_GLDELETESYNCPROC = undefined;
pub var deleteTextures: Types.PFN_GLDELETETEXTURESPROC = undefined;
pub var deleteTransformFeedbacks: Types.PFN_GLDELETETRANSFORMFEEDBACKSPROC = undefined;
pub var deleteVertexArrays: Types.PFN_GLDELETEVERTEXARRAYSPROC = undefined;
pub var depthFunc: Types.PFN_GLDEPTHFUNCPROC = undefined;
pub var depthMask: Types.PFN_GLDEPTHMASKPROC = undefined;
pub var depthRange: Types.PFN_GLDEPTHRANGEPROC = undefined;
pub var depthRangeArrayv: Types.PFN_GLDEPTHRANGEARRAYVPROC = undefined;
pub var depthRangeIndexed: Types.PFN_GLDEPTHRANGEINDEXEDPROC = undefined;
pub var depthRangef: Types.PFN_GLDEPTHRANGEFPROC = undefined;
pub var detachShader: Types.PFN_GLDETACHSHADERPROC = undefined;
pub var disable: Types.PFN_GLDISABLEPROC = undefined;
pub var disableClientState: Types.PFN_GLDISABLECLIENTSTATEPROC = undefined;
pub var disableVertexArrayAttrib: Types.PFN_GLDISABLEVERTEXARRAYATTRIBPROC = undefined;
pub var disableVertexAttribArray: Types.PFN_GLDISABLEVERTEXATTRIBARRAYPROC = undefined;
pub var disablei: Types.PFN_GLDISABLEIPROC = undefined;
pub var dispatchCompute: Types.PFN_GLDISPATCHCOMPUTEPROC = undefined;
pub var dispatchComputeIndirect: Types.PFN_GLDISPATCHCOMPUTEINDIRECTPROC = undefined;
pub var drawArrays: Types.PFN_GLDRAWARRAYSPROC = undefined;
pub var drawArraysIndirect: Types.PFN_GLDRAWARRAYSINDIRECTPROC = undefined;
pub var drawArraysInstanced: Types.PFN_GLDRAWARRAYSINSTANCEDPROC = undefined;
pub var drawArraysInstancedBaseInstance: Types.PFN_GLDRAWARRAYSINSTANCEDBASEINSTANCEPROC = undefined;
pub var drawBuffer: Types.PFN_GLDRAWBUFFERPROC = undefined;
pub var drawBuffers: Types.PFN_GLDRAWBUFFERSPROC = undefined;
pub var drawElements: Types.PFN_GLDRAWELEMENTSPROC = undefined;
pub var drawElementsBaseVertex: Types.PFN_GLDRAWELEMENTSBASEVERTEXPROC = undefined;
pub var drawElementsIndirect: Types.PFN_GLDRAWELEMENTSINDIRECTPROC = undefined;
pub var drawElementsInstanced: Types.PFN_GLDRAWELEMENTSINSTANCEDPROC = undefined;
pub var drawElementsInstancedBaseInstance: Types.PFN_GLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC = undefined;
pub var drawElementsInstancedBaseVertex: Types.PFN_GLDRAWELEMENTSINSTANCEDBASEVERTEXPROC = undefined;
pub var drawElementsInstancedBaseVertexBaseInstance: Types.PFN_GLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC = undefined;
pub var drawPixels: Types.PFN_GLDRAWPIXELSPROC = undefined;
pub var drawRangeElements: Types.PFN_GLDRAWRANGEELEMENTSPROC = undefined;
pub var drawRangeElementsBaseVertex: Types.PFN_GLDRAWRANGEELEMENTSBASEVERTEXPROC = undefined;
pub var drawTransformFeedback: Types.PFN_GLDRAWTRANSFORMFEEDBACKPROC = undefined;
pub var drawTransformFeedbackInstanced: Types.PFN_GLDRAWTRANSFORMFEEDBACKINSTANCEDPROC = undefined;
pub var drawTransformFeedbackStream: Types.PFN_GLDRAWTRANSFORMFEEDBACKSTREAMPROC = undefined;
pub var drawTransformFeedbackStreamInstanced: Types.PFN_GLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC = undefined;
pub var edgeFlag: Types.PFN_GLEDGEFLAGPROC = undefined;
pub var edgeFlagPointer: Types.PFN_GLEDGEFLAGPOINTERPROC = undefined;
pub var edgeFlagv: Types.PFN_GLEDGEFLAGVPROC = undefined;
pub var enable: Types.PFN_GLENABLEPROC = undefined;
pub var enableClientState: Types.PFN_GLENABLECLIENTSTATEPROC = undefined;
pub var enableVertexArrayAttrib: Types.PFN_GLENABLEVERTEXARRAYATTRIBPROC = undefined;
pub var enableVertexAttribArray: Types.PFN_GLENABLEVERTEXATTRIBARRAYPROC = undefined;
pub var enablei: Types.PFN_GLENABLEIPROC = undefined;
pub var end: Types.PFN_GLENDPROC = undefined;
pub var endConditionalRender: Types.PFN_GLENDCONDITIONALRENDERPROC = undefined;
pub var endList: Types.PFN_GLENDLISTPROC = undefined;
pub var endQuery: Types.PFN_GLENDQUERYPROC = undefined;
pub var endQueryIndexed: Types.PFN_GLENDQUERYINDEXEDPROC = undefined;
pub var endTransformFeedback: Types.PFN_GLENDTRANSFORMFEEDBACKPROC = undefined;
pub var evalCoord1d: Types.PFN_GLEVALCOORD1DPROC = undefined;
pub var evalCoord1dv: Types.PFN_GLEVALCOORD1DVPROC = undefined;
pub var evalCoord1f: Types.PFN_GLEVALCOORD1FPROC = undefined;
pub var evalCoord1fv: Types.PFN_GLEVALCOORD1FVPROC = undefined;
pub var evalCoord2d: Types.PFN_GLEVALCOORD2DPROC = undefined;
pub var evalCoord2dv: Types.PFN_GLEVALCOORD2DVPROC = undefined;
pub var evalCoord2f: Types.PFN_GLEVALCOORD2FPROC = undefined;
pub var evalCoord2fv: Types.PFN_GLEVALCOORD2FVPROC = undefined;
pub var evalMesh1: Types.PFN_GLEVALMESH1PROC = undefined;
pub var evalMesh2: Types.PFN_GLEVALMESH2PROC = undefined;
pub var evalPoint1: Types.PFN_GLEVALPOINT1PROC = undefined;
pub var evalPoint2: Types.PFN_GLEVALPOINT2PROC = undefined;
pub var feedbackBuffer: Types.PFN_GLFEEDBACKBUFFERPROC = undefined;
pub var fenceSync: Types.PFN_GLFENCESYNCPROC = undefined;
pub var finish: Types.PFN_GLFINISHPROC = undefined;
pub var flush: Types.PFN_GLFLUSHPROC = undefined;
pub var flushMappedBufferRange: Types.PFN_GLFLUSHMAPPEDBUFFERRANGEPROC = undefined;
pub var flushMappedNamedBufferRange: Types.PFN_GLFLUSHMAPPEDNAMEDBUFFERRANGEPROC = undefined;
pub var fogCoordPointer: Types.PFN_GLFOGCOORDPOINTERPROC = undefined;
pub var fogCoordd: Types.PFN_GLFOGCOORDDPROC = undefined;
pub var fogCoorddv: Types.PFN_GLFOGCOORDDVPROC = undefined;
pub var fogCoordf: Types.PFN_GLFOGCOORDFPROC = undefined;
pub var fogCoordfv: Types.PFN_GLFOGCOORDFVPROC = undefined;
pub var fogf: Types.PFN_GLFOGFPROC = undefined;
pub var fogfv: Types.PFN_GLFOGFVPROC = undefined;
pub var fogi: Types.PFN_GLFOGIPROC = undefined;
pub var fogiv: Types.PFN_GLFOGIVPROC = undefined;
pub var framebufferParameteri: Types.PFN_GLFRAMEBUFFERPARAMETERIPROC = undefined;
pub var framebufferRenderbuffer: Types.PFN_GLFRAMEBUFFERRENDERBUFFERPROC = undefined;
pub var framebufferTexture: Types.PFN_GLFRAMEBUFFERTEXTUREPROC = undefined;
pub var framebufferTexture1D: Types.PFN_GLFRAMEBUFFERTEXTURE1DPROC = undefined;
pub var framebufferTexture2D: Types.PFN_GLFRAMEBUFFERTEXTURE2DPROC = undefined;
pub var framebufferTexture3D: Types.PFN_GLFRAMEBUFFERTEXTURE3DPROC = undefined;
pub var framebufferTextureLayer: Types.PFN_GLFRAMEBUFFERTEXTURELAYERPROC = undefined;
pub var frontFace: Types.PFN_GLFRONTFACEPROC = undefined;
pub var frustum: Types.PFN_GLFRUSTUMPROC = undefined;
pub var genBuffers: Types.PFN_GLGENBUFFERSPROC = undefined;
pub var genFramebuffers: Types.PFN_GLGENFRAMEBUFFERSPROC = undefined;
pub var genLists: Types.PFN_GLGENLISTSPROC = undefined;
pub var genProgramPipelines: Types.PFN_GLGENPROGRAMPIPELINESPROC = undefined;
pub var genQueries: Types.PFN_GLGENQUERIESPROC = undefined;
pub var genRenderbuffers: Types.PFN_GLGENRENDERBUFFERSPROC = undefined;
pub var genSamplers: Types.PFN_GLGENSAMPLERSPROC = undefined;
pub var genTextures: Types.PFN_GLGENTEXTURESPROC = undefined;
pub var genTransformFeedbacks: Types.PFN_GLGENTRANSFORMFEEDBACKSPROC = undefined;
pub var genVertexArrays: Types.PFN_GLGENVERTEXARRAYSPROC = undefined;
pub var generateMipmap: Types.PFN_GLGENERATEMIPMAPPROC = undefined;
pub var generateTextureMipmap: Types.PFN_GLGENERATETEXTUREMIPMAPPROC = undefined;
pub var getActiveAtomicCounterBufferiv: Types.PFN_GLGETACTIVEATOMICCOUNTERBUFFERIVPROC = undefined;
pub var getActiveAttrib: Types.PFN_GLGETACTIVEATTRIBPROC = undefined;
pub var getActiveSubroutineName: Types.PFN_GLGETACTIVESUBROUTINENAMEPROC = undefined;
pub var getActiveSubroutineUniformName: Types.PFN_GLGETACTIVESUBROUTINEUNIFORMNAMEPROC = undefined;
pub var getActiveSubroutineUniformiv: Types.PFN_GLGETACTIVESUBROUTINEUNIFORMIVPROC = undefined;
pub var getActiveUniform: Types.PFN_GLGETACTIVEUNIFORMPROC = undefined;
pub var getActiveUniformBlockName: Types.PFN_GLGETACTIVEUNIFORMBLOCKNAMEPROC = undefined;
pub var getActiveUniformBlockiv: Types.PFN_GLGETACTIVEUNIFORMBLOCKIVPROC = undefined;
pub var getActiveUniformName: Types.PFN_GLGETACTIVEUNIFORMNAMEPROC = undefined;
pub var getActiveUniformsiv: Types.PFN_GLGETACTIVEUNIFORMSIVPROC = undefined;
pub var getAttachedShaders: Types.PFN_GLGETATTACHEDSHADERSPROC = undefined;
pub var getAttribLocation: Types.PFN_GLGETATTRIBLOCATIONPROC = undefined;
pub var getBooleani_v: Types.PFN_GLGETBOOLEANI_VPROC = undefined;
pub var getBooleanv: Types.PFN_GLGETBOOLEANVPROC = undefined;
pub var getBufferParameteri64v: Types.PFN_GLGETBUFFERPARAMETERI64VPROC = undefined;
pub var getBufferParameteriv: Types.PFN_GLGETBUFFERPARAMETERIVPROC = undefined;
pub var getBufferPointerv: Types.PFN_GLGETBUFFERPOINTERVPROC = undefined;
pub var getBufferSubData: Types.PFN_GLGETBUFFERSUBDATAPROC = undefined;
pub var getClipPlane: Types.PFN_GLGETCLIPPLANEPROC = undefined;
pub var getCompressedTexImage: Types.PFN_GLGETCOMPRESSEDTEXIMAGEPROC = undefined;
pub var getCompressedTextureImage: Types.PFN_GLGETCOMPRESSEDTEXTUREIMAGEPROC = undefined;
pub var getCompressedTextureSubImage: Types.PFN_GLGETCOMPRESSEDTEXTURESUBIMAGEPROC = undefined;
pub var getDebugMessageLog: Types.PFN_GLGETDEBUGMESSAGELOGPROC = undefined;
pub var getDoublei_v: Types.PFN_GLGETDOUBLEI_VPROC = undefined;
pub var getDoublev: Types.PFN_GLGETDOUBLEVPROC = undefined;
pub var getError: Types.PFN_GLGETERRORPROC = undefined;
pub var getFloati_v: Types.PFN_GLGETFLOATI_VPROC = undefined;
pub var getFloatv: Types.PFN_GLGETFLOATVPROC = undefined;
pub var getFragDataIndex: Types.PFN_GLGETFRAGDATAINDEXPROC = undefined;
pub var getFragDataLocation: Types.PFN_GLGETFRAGDATALOCATIONPROC = undefined;
pub var getFramebufferAttachmentParameteriv: Types.PFN_GLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = undefined;
pub var getFramebufferParameteriv: Types.PFN_GLGETFRAMEBUFFERPARAMETERIVPROC = undefined;
pub var getGraphicsResetStatus: Types.PFN_GLGETGRAPHICSRESETSTATUSPROC = undefined;
pub var getInteger64i_v: Types.PFN_GLGETINTEGER64I_VPROC = undefined;
pub var getInteger64v: Types.PFN_GLGETINTEGER64VPROC = undefined;
pub var getIntegeri_v: Types.PFN_GLGETINTEGERI_VPROC = undefined;
pub var getIntegerv: Types.PFN_GLGETINTEGERVPROC = undefined;
pub var getInternalformati64v: Types.PFN_GLGETINTERNALFORMATI64VPROC = undefined;
pub var getInternalformativ: Types.PFN_GLGETINTERNALFORMATIVPROC = undefined;
pub var getLightfv: Types.PFN_GLGETLIGHTFVPROC = undefined;
pub var getLightiv: Types.PFN_GLGETLIGHTIVPROC = undefined;
pub var getMapdv: Types.PFN_GLGETMAPDVPROC = undefined;
pub var getMapfv: Types.PFN_GLGETMAPFVPROC = undefined;
pub var getMapiv: Types.PFN_GLGETMAPIVPROC = undefined;
pub var getMaterialfv: Types.PFN_GLGETMATERIALFVPROC = undefined;
pub var getMaterialiv: Types.PFN_GLGETMATERIALIVPROC = undefined;
pub var getMultisamplefv: Types.PFN_GLGETMULTISAMPLEFVPROC = undefined;
pub var getNamedBufferParameteri64v: Types.PFN_GLGETNAMEDBUFFERPARAMETERI64VPROC = undefined;
pub var getNamedBufferParameteriv: Types.PFN_GLGETNAMEDBUFFERPARAMETERIVPROC = undefined;
pub var getNamedBufferPointerv: Types.PFN_GLGETNAMEDBUFFERPOINTERVPROC = undefined;
pub var getNamedBufferSubData: Types.PFN_GLGETNAMEDBUFFERSUBDATAPROC = undefined;
pub var getNamedFramebufferAttachmentParameteriv: Types.PFN_GLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC = undefined;
pub var getNamedFramebufferParameteriv: Types.PFN_GLGETNAMEDFRAMEBUFFERPARAMETERIVPROC = undefined;
pub var getNamedRenderbufferParameteriv: Types.PFN_GLGETNAMEDRENDERBUFFERPARAMETERIVPROC = undefined;
pub var getObjectLabel: Types.PFN_GLGETOBJECTLABELPROC = undefined;
pub var getObjectPtrLabel: Types.PFN_GLGETOBJECTPTRLABELPROC = undefined;
pub var getPixelMapfv: Types.PFN_GLGETPIXELMAPFVPROC = undefined;
pub var getPixelMapuiv: Types.PFN_GLGETPIXELMAPUIVPROC = undefined;
pub var getPixelMapusv: Types.PFN_GLGETPIXELMAPUSVPROC = undefined;
pub var getPointerv: Types.PFN_GLGETPOINTERVPROC = undefined;
pub var getPolygonStipple: Types.PFN_GLGETPOLYGONSTIPPLEPROC = undefined;
pub var getProgramBinary: Types.PFN_GLGETPROGRAMBINARYPROC = undefined;
pub var getProgramInfoLog: Types.PFN_GLGETPROGRAMINFOLOGPROC = undefined;
pub var getProgramInterfaceiv: Types.PFN_GLGETPROGRAMINTERFACEIVPROC = undefined;
pub var getProgramPipelineInfoLog: Types.PFN_GLGETPROGRAMPIPELINEINFOLOGPROC = undefined;
pub var getProgramPipelineiv: Types.PFN_GLGETPROGRAMPIPELINEIVPROC = undefined;
pub var getProgramResourceIndex: Types.PFN_GLGETPROGRAMRESOURCEINDEXPROC = undefined;
pub var getProgramResourceLocation: Types.PFN_GLGETPROGRAMRESOURCELOCATIONPROC = undefined;
pub var getProgramResourceLocationIndex: Types.PFN_GLGETPROGRAMRESOURCELOCATIONINDEXPROC = undefined;
pub var getProgramResourceName: Types.PFN_GLGETPROGRAMRESOURCENAMEPROC = undefined;
pub var getProgramResourceiv: Types.PFN_GLGETPROGRAMRESOURCEIVPROC = undefined;
pub var getProgramStageiv: Types.PFN_GLGETPROGRAMSTAGEIVPROC = undefined;
pub var getProgramiv: Types.PFN_GLGETPROGRAMIVPROC = undefined;
pub var getQueryBufferObjecti64v: Types.PFN_GLGETQUERYBUFFEROBJECTI64VPROC = undefined;
pub var getQueryBufferObjectiv: Types.PFN_GLGETQUERYBUFFEROBJECTIVPROC = undefined;
pub var getQueryBufferObjectui64v: Types.PFN_GLGETQUERYBUFFEROBJECTUI64VPROC = undefined;
pub var getQueryBufferObjectuiv: Types.PFN_GLGETQUERYBUFFEROBJECTUIVPROC = undefined;
pub var getQueryIndexediv: Types.PFN_GLGETQUERYINDEXEDIVPROC = undefined;
pub var getQueryObjecti64v: Types.PFN_GLGETQUERYOBJECTI64VPROC = undefined;
pub var getQueryObjectiv: Types.PFN_GLGETQUERYOBJECTIVPROC = undefined;
pub var getQueryObjectui64v: Types.PFN_GLGETQUERYOBJECTUI64VPROC = undefined;
pub var getQueryObjectuiv: Types.PFN_GLGETQUERYOBJECTUIVPROC = undefined;
pub var getQueryiv: Types.PFN_GLGETQUERYIVPROC = undefined;
pub var getRenderbufferParameteriv: Types.PFN_GLGETRENDERBUFFERPARAMETERIVPROC = undefined;
pub var getSamplerParameterIiv: Types.PFN_GLGETSAMPLERPARAMETERIIVPROC = undefined;
pub var getSamplerParameterIuiv: Types.PFN_GLGETSAMPLERPARAMETERIUIVPROC = undefined;
pub var getSamplerParameterfv: Types.PFN_GLGETSAMPLERPARAMETERFVPROC = undefined;
pub var getSamplerParameteriv: Types.PFN_GLGETSAMPLERPARAMETERIVPROC = undefined;
pub var getShaderInfoLog: Types.PFN_GLGETSHADERINFOLOGPROC = undefined;
pub var getShaderPrecisionFormat: Types.PFN_GLGETSHADERPRECISIONFORMATPROC = undefined;
pub var getShaderSource: Types.PFN_GLGETSHADERSOURCEPROC = undefined;
pub var getShaderiv: Types.PFN_GLGETSHADERIVPROC = undefined;
pub var getString: Types.PFN_GLGETSTRINGPROC = undefined;
pub var getStringi: Types.PFN_GLGETSTRINGIPROC = undefined;
pub var getSubroutineIndex: Types.PFN_GLGETSUBROUTINEINDEXPROC = undefined;
pub var getSubroutineUniformLocation: Types.PFN_GLGETSUBROUTINEUNIFORMLOCATIONPROC = undefined;
pub var getSynciv: Types.PFN_GLGETSYNCIVPROC = undefined;
pub var getTexEnvfv: Types.PFN_GLGETTEXENVFVPROC = undefined;
pub var getTexEnviv: Types.PFN_GLGETTEXENVIVPROC = undefined;
pub var getTexGendv: Types.PFN_GLGETTEXGENDVPROC = undefined;
pub var getTexGenfv: Types.PFN_GLGETTEXGENFVPROC = undefined;
pub var getTexGeniv: Types.PFN_GLGETTEXGENIVPROC = undefined;
pub var getTexImage: Types.PFN_GLGETTEXIMAGEPROC = undefined;
pub var getTexLevelParameterfv: Types.PFN_GLGETTEXLEVELPARAMETERFVPROC = undefined;
pub var getTexLevelParameteriv: Types.PFN_GLGETTEXLEVELPARAMETERIVPROC = undefined;
pub var getTexParameterIiv: Types.PFN_GLGETTEXPARAMETERIIVPROC = undefined;
pub var getTexParameterIuiv: Types.PFN_GLGETTEXPARAMETERIUIVPROC = undefined;
pub var getTexParameterfv: Types.PFN_GLGETTEXPARAMETERFVPROC = undefined;
pub var getTexParameteriv: Types.PFN_GLGETTEXPARAMETERIVPROC = undefined;
pub var getTextureImage: Types.PFN_GLGETTEXTUREIMAGEPROC = undefined;
pub var getTextureLevelParameterfv: Types.PFN_GLGETTEXTURELEVELPARAMETERFVPROC = undefined;
pub var getTextureLevelParameteriv: Types.PFN_GLGETTEXTURELEVELPARAMETERIVPROC = undefined;
pub var getTextureParameterIiv: Types.PFN_GLGETTEXTUREPARAMETERIIVPROC = undefined;
pub var getTextureParameterIuiv: Types.PFN_GLGETTEXTUREPARAMETERIUIVPROC = undefined;
pub var getTextureParameterfv: Types.PFN_GLGETTEXTUREPARAMETERFVPROC = undefined;
pub var getTextureParameteriv: Types.PFN_GLGETTEXTUREPARAMETERIVPROC = undefined;
pub var getTextureSubImage: Types.PFN_GLGETTEXTURESUBIMAGEPROC = undefined;
pub var getTransformFeedbackVarying: Types.PFN_GLGETTRANSFORMFEEDBACKVARYINGPROC = undefined;
pub var getTransformFeedbacki64_v: Types.PFN_GLGETTRANSFORMFEEDBACKI64_VPROC = undefined;
pub var getTransformFeedbacki_v: Types.PFN_GLGETTRANSFORMFEEDBACKI_VPROC = undefined;
pub var getTransformFeedbackiv: Types.PFN_GLGETTRANSFORMFEEDBACKIVPROC = undefined;
pub var getUniformBlockIndex: Types.PFN_GLGETUNIFORMBLOCKINDEXPROC = undefined;
pub var getUniformIndices: Types.PFN_GLGETUNIFORMINDICESPROC = undefined;
pub var getUniformLocation: Types.PFN_GLGETUNIFORMLOCATIONPROC = undefined;
pub var getUniformSubroutineuiv: Types.PFN_GLGETUNIFORMSUBROUTINEUIVPROC = undefined;
pub var getUniformdv: Types.PFN_GLGETUNIFORMDVPROC = undefined;
pub var getUniformfv: Types.PFN_GLGETUNIFORMFVPROC = undefined;
pub var getUniformiv: Types.PFN_GLGETUNIFORMIVPROC = undefined;
pub var getUniformuiv: Types.PFN_GLGETUNIFORMUIVPROC = undefined;
pub var getVertexArrayIndexed64iv: Types.PFN_GLGETVERTEXARRAYINDEXED64IVPROC = undefined;
pub var getVertexArrayIndexediv: Types.PFN_GLGETVERTEXARRAYINDEXEDIVPROC = undefined;
pub var getVertexArrayiv: Types.PFN_GLGETVERTEXARRAYIVPROC = undefined;
pub var getVertexAttribIiv: Types.PFN_GLGETVERTEXATTRIBIIVPROC = undefined;
pub var getVertexAttribIuiv: Types.PFN_GLGETVERTEXATTRIBIUIVPROC = undefined;
pub var getVertexAttribLdv: Types.PFN_GLGETVERTEXATTRIBLDVPROC = undefined;
pub var getVertexAttribPointerv: Types.PFN_GLGETVERTEXATTRIBPOINTERVPROC = undefined;
pub var getVertexAttribdv: Types.PFN_GLGETVERTEXATTRIBDVPROC = undefined;
pub var getVertexAttribfv: Types.PFN_GLGETVERTEXATTRIBFVPROC = undefined;
pub var getVertexAttribiv: Types.PFN_GLGETVERTEXATTRIBIVPROC = undefined;
pub var getnColorTable: Types.PFN_GLGETNCOLORTABLEPROC = undefined;
pub var getnCompressedTexImage: Types.PFN_GLGETNCOMPRESSEDTEXIMAGEPROC = undefined;
pub var getnConvolutionFilter: Types.PFN_GLGETNCONVOLUTIONFILTERPROC = undefined;
pub var getnHistogram: Types.PFN_GLGETNHISTOGRAMPROC = undefined;
pub var getnMapdv: Types.PFN_GLGETNMAPDVPROC = undefined;
pub var getnMapfv: Types.PFN_GLGETNMAPFVPROC = undefined;
pub var getnMapiv: Types.PFN_GLGETNMAPIVPROC = undefined;
pub var getnMinmax: Types.PFN_GLGETNMINMAXPROC = undefined;
pub var getnPixelMapfv: Types.PFN_GLGETNPIXELMAPFVPROC = undefined;
pub var getnPixelMapuiv: Types.PFN_GLGETNPIXELMAPUIVPROC = undefined;
pub var getnPixelMapusv: Types.PFN_GLGETNPIXELMAPUSVPROC = undefined;
pub var getnPolygonStipple: Types.PFN_GLGETNPOLYGONSTIPPLEPROC = undefined;
pub var getnSeparableFilter: Types.PFN_GLGETNSEPARABLEFILTERPROC = undefined;
pub var getnTexImage: Types.PFN_GLGETNTEXIMAGEPROC = undefined;
pub var getnUniformdv: Types.PFN_GLGETNUNIFORMDVPROC = undefined;
pub var getnUniformfv: Types.PFN_GLGETNUNIFORMFVPROC = undefined;
pub var getnUniformiv: Types.PFN_GLGETNUNIFORMIVPROC = undefined;
pub var getnUniformuiv: Types.PFN_GLGETNUNIFORMUIVPROC = undefined;
pub var hint: Types.PFN_GLHINTPROC = undefined;
pub var indexMask: Types.PFN_GLINDEXMASKPROC = undefined;
pub var indexPointer: Types.PFN_GLINDEXPOINTERPROC = undefined;
pub var indexd: Types.PFN_GLINDEXDPROC = undefined;
pub var indexdv: Types.PFN_GLINDEXDVPROC = undefined;
pub var indexf: Types.PFN_GLINDEXFPROC = undefined;
pub var indexfv: Types.PFN_GLINDEXFVPROC = undefined;
pub var indexi: Types.PFN_GLINDEXIPROC = undefined;
pub var indexiv: Types.PFN_GLINDEXIVPROC = undefined;
pub var indexs: Types.PFN_GLINDEXSPROC = undefined;
pub var indexsv: Types.PFN_GLINDEXSVPROC = undefined;
pub var indexub: Types.PFN_GLINDEXUBPROC = undefined;
pub var indexubv: Types.PFN_GLINDEXUBVPROC = undefined;
pub var initNames: Types.PFN_GLINITNAMESPROC = undefined;
pub var interleavedArrays: Types.PFN_GLINTERLEAVEDARRAYSPROC = undefined;
pub var invalidateBufferData: Types.PFN_GLINVALIDATEBUFFERDATAPROC = undefined;
pub var invalidateBufferSubData: Types.PFN_GLINVALIDATEBUFFERSUBDATAPROC = undefined;
pub var invalidateFramebuffer: Types.PFN_GLINVALIDATEFRAMEBUFFERPROC = undefined;
pub var invalidateNamedFramebufferData: Types.PFN_GLINVALIDATENAMEDFRAMEBUFFERDATAPROC = undefined;
pub var invalidateNamedFramebufferSubData: Types.PFN_GLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC = undefined;
pub var invalidateSubFramebuffer: Types.PFN_GLINVALIDATESUBFRAMEBUFFERPROC = undefined;
pub var invalidateTexImage: Types.PFN_GLINVALIDATETEXIMAGEPROC = undefined;
pub var invalidateTexSubImage: Types.PFN_GLINVALIDATETEXSUBIMAGEPROC = undefined;
pub var isBuffer: Types.PFN_GLISBUFFERPROC = undefined;
pub var isEnabled: Types.PFN_GLISENABLEDPROC = undefined;
pub var isEnabledi: Types.PFN_GLISENABLEDIPROC = undefined;
pub var isFramebuffer: Types.PFN_GLISFRAMEBUFFERPROC = undefined;
pub var isList: Types.PFN_GLISLISTPROC = undefined;
pub var isProgram: Types.PFN_GLISPROGRAMPROC = undefined;
pub var isProgramPipeline: Types.PFN_GLISPROGRAMPIPELINEPROC = undefined;
pub var isQuery: Types.PFN_GLISQUERYPROC = undefined;
pub var isRenderbuffer: Types.PFN_GLISRENDERBUFFERPROC = undefined;
pub var isSampler: Types.PFN_GLISSAMPLERPROC = undefined;
pub var isShader: Types.PFN_GLISSHADERPROC = undefined;
pub var isSync: Types.PFN_GLISSYNCPROC = undefined;
pub var isTexture: Types.PFN_GLISTEXTUREPROC = undefined;
pub var isTransformFeedback: Types.PFN_GLISTRANSFORMFEEDBACKPROC = undefined;
pub var isVertexArray: Types.PFN_GLISVERTEXARRAYPROC = undefined;
pub var lightModelf: Types.PFN_GLLIGHTMODELFPROC = undefined;
pub var lightModelfv: Types.PFN_GLLIGHTMODELFVPROC = undefined;
pub var lightModeli: Types.PFN_GLLIGHTMODELIPROC = undefined;
pub var lightModeliv: Types.PFN_GLLIGHTMODELIVPROC = undefined;
pub var lightf: Types.PFN_GLLIGHTFPROC = undefined;
pub var lightfv: Types.PFN_GLLIGHTFVPROC = undefined;
pub var lighti: Types.PFN_GLLIGHTIPROC = undefined;
pub var lightiv: Types.PFN_GLLIGHTIVPROC = undefined;
pub var lineStipple: Types.PFN_GLLINESTIPPLEPROC = undefined;
pub var lineWidth: Types.PFN_GLLINEWIDTHPROC = undefined;
pub var linkProgram: Types.PFN_GLLINKPROGRAMPROC = undefined;
pub var listBase: Types.PFN_GLLISTBASEPROC = undefined;
pub var loadIdentity: Types.PFN_GLLOADIDENTITYPROC = undefined;
pub var loadMatrixd: Types.PFN_GLLOADMATRIXDPROC = undefined;
pub var loadMatrixf: Types.PFN_GLLOADMATRIXFPROC = undefined;
pub var loadName: Types.PFN_GLLOADNAMEPROC = undefined;
pub var loadTransposeMatrixd: Types.PFN_GLLOADTRANSPOSEMATRIXDPROC = undefined;
pub var loadTransposeMatrixf: Types.PFN_GLLOADTRANSPOSEMATRIXFPROC = undefined;
pub var logicOp: Types.PFN_GLLOGICOPPROC = undefined;
pub var map1d: Types.PFN_GLMAP1DPROC = undefined;
pub var map1f: Types.PFN_GLMAP1FPROC = undefined;
pub var map2d: Types.PFN_GLMAP2DPROC = undefined;
pub var map2f: Types.PFN_GLMAP2FPROC = undefined;
pub var mapBuffer: Types.PFN_GLMAPBUFFERPROC = undefined;
pub var mapBufferRange: Types.PFN_GLMAPBUFFERRANGEPROC = undefined;
pub var mapGrid1d: Types.PFN_GLMAPGRID1DPROC = undefined;
pub var mapGrid1f: Types.PFN_GLMAPGRID1FPROC = undefined;
pub var mapGrid2d: Types.PFN_GLMAPGRID2DPROC = undefined;
pub var mapGrid2f: Types.PFN_GLMAPGRID2FPROC = undefined;
pub var mapNamedBuffer: Types.PFN_GLMAPNAMEDBUFFERPROC = undefined;
pub var mapNamedBufferRange: Types.PFN_GLMAPNAMEDBUFFERRANGEPROC = undefined;
pub var materialf: Types.PFN_GLMATERIALFPROC = undefined;
pub var materialfv: Types.PFN_GLMATERIALFVPROC = undefined;
pub var materiali: Types.PFN_GLMATERIALIPROC = undefined;
pub var materialiv: Types.PFN_GLMATERIALIVPROC = undefined;
pub var matrixMode: Types.PFN_GLMATRIXMODEPROC = undefined;
pub var memoryBarrier: Types.PFN_GLMEMORYBARRIERPROC = undefined;
pub var memoryBarrierByRegion: Types.PFN_GLMEMORYBARRIERBYREGIONPROC = undefined;
pub var minSampleShading: Types.PFN_GLMINSAMPLESHADINGPROC = undefined;
pub var multMatrixd: Types.PFN_GLMULTMATRIXDPROC = undefined;
pub var multMatrixf: Types.PFN_GLMULTMATRIXFPROC = undefined;
pub var multTransposeMatrixd: Types.PFN_GLMULTTRANSPOSEMATRIXDPROC = undefined;
pub var multTransposeMatrixf: Types.PFN_GLMULTTRANSPOSEMATRIXFPROC = undefined;
pub var multiDrawArrays: Types.PFN_GLMULTIDRAWARRAYSPROC = undefined;
pub var multiDrawArraysIndirect: Types.PFN_GLMULTIDRAWARRAYSINDIRECTPROC = undefined;
pub var multiDrawArraysIndirectCount: Types.PFN_GLMULTIDRAWARRAYSINDIRECTCOUNTPROC = undefined;
pub var multiDrawElements: Types.PFN_GLMULTIDRAWELEMENTSPROC = undefined;
pub var multiDrawElementsBaseVertex: Types.PFN_GLMULTIDRAWELEMENTSBASEVERTEXPROC = undefined;
pub var multiDrawElementsIndirect: Types.PFN_GLMULTIDRAWELEMENTSINDIRECTPROC = undefined;
pub var multiDrawElementsIndirectCount: Types.PFN_GLMULTIDRAWELEMENTSINDIRECTCOUNTPROC = undefined;
pub var multiTexCoord1d: Types.PFN_GLMULTITEXCOORD1DPROC = undefined;
pub var multiTexCoord1dv: Types.PFN_GLMULTITEXCOORD1DVPROC = undefined;
pub var multiTexCoord1f: Types.PFN_GLMULTITEXCOORD1FPROC = undefined;
pub var multiTexCoord1fv: Types.PFN_GLMULTITEXCOORD1FVPROC = undefined;
pub var multiTexCoord1i: Types.PFN_GLMULTITEXCOORD1IPROC = undefined;
pub var multiTexCoord1iv: Types.PFN_GLMULTITEXCOORD1IVPROC = undefined;
pub var multiTexCoord1s: Types.PFN_GLMULTITEXCOORD1SPROC = undefined;
pub var multiTexCoord1sv: Types.PFN_GLMULTITEXCOORD1SVPROC = undefined;
pub var multiTexCoord2d: Types.PFN_GLMULTITEXCOORD2DPROC = undefined;
pub var multiTexCoord2dv: Types.PFN_GLMULTITEXCOORD2DVPROC = undefined;
pub var multiTexCoord2f: Types.PFN_GLMULTITEXCOORD2FPROC = undefined;
pub var multiTexCoord2fv: Types.PFN_GLMULTITEXCOORD2FVPROC = undefined;
pub var multiTexCoord2i: Types.PFN_GLMULTITEXCOORD2IPROC = undefined;
pub var multiTexCoord2iv: Types.PFN_GLMULTITEXCOORD2IVPROC = undefined;
pub var multiTexCoord2s: Types.PFN_GLMULTITEXCOORD2SPROC = undefined;
pub var multiTexCoord2sv: Types.PFN_GLMULTITEXCOORD2SVPROC = undefined;
pub var multiTexCoord3d: Types.PFN_GLMULTITEXCOORD3DPROC = undefined;
pub var multiTexCoord3dv: Types.PFN_GLMULTITEXCOORD3DVPROC = undefined;
pub var multiTexCoord3f: Types.PFN_GLMULTITEXCOORD3FPROC = undefined;
pub var multiTexCoord3fv: Types.PFN_GLMULTITEXCOORD3FVPROC = undefined;
pub var multiTexCoord3i: Types.PFN_GLMULTITEXCOORD3IPROC = undefined;
pub var multiTexCoord3iv: Types.PFN_GLMULTITEXCOORD3IVPROC = undefined;
pub var multiTexCoord3s: Types.PFN_GLMULTITEXCOORD3SPROC = undefined;
pub var multiTexCoord3sv: Types.PFN_GLMULTITEXCOORD3SVPROC = undefined;
pub var multiTexCoord4d: Types.PFN_GLMULTITEXCOORD4DPROC = undefined;
pub var multiTexCoord4dv: Types.PFN_GLMULTITEXCOORD4DVPROC = undefined;
pub var multiTexCoord4f: Types.PFN_GLMULTITEXCOORD4FPROC = undefined;
pub var multiTexCoord4fv: Types.PFN_GLMULTITEXCOORD4FVPROC = undefined;
pub var multiTexCoord4i: Types.PFN_GLMULTITEXCOORD4IPROC = undefined;
pub var multiTexCoord4iv: Types.PFN_GLMULTITEXCOORD4IVPROC = undefined;
pub var multiTexCoord4s: Types.PFN_GLMULTITEXCOORD4SPROC = undefined;
pub var multiTexCoord4sv: Types.PFN_GLMULTITEXCOORD4SVPROC = undefined;
pub var multiTexCoordP1ui: Types.PFN_GLMULTITEXCOORDP1UIPROC = undefined;
pub var multiTexCoordP1uiv: Types.PFN_GLMULTITEXCOORDP1UIVPROC = undefined;
pub var multiTexCoordP2ui: Types.PFN_GLMULTITEXCOORDP2UIPROC = undefined;
pub var multiTexCoordP2uiv: Types.PFN_GLMULTITEXCOORDP2UIVPROC = undefined;
pub var multiTexCoordP3ui: Types.PFN_GLMULTITEXCOORDP3UIPROC = undefined;
pub var multiTexCoordP3uiv: Types.PFN_GLMULTITEXCOORDP3UIVPROC = undefined;
pub var multiTexCoordP4ui: Types.PFN_GLMULTITEXCOORDP4UIPROC = undefined;
pub var multiTexCoordP4uiv: Types.PFN_GLMULTITEXCOORDP4UIVPROC = undefined;
pub var namedBufferData: Types.PFN_GLNAMEDBUFFERDATAPROC = undefined;
pub var namedBufferStorage: Types.PFN_GLNAMEDBUFFERSTORAGEPROC = undefined;
pub var namedBufferSubData: Types.PFN_GLNAMEDBUFFERSUBDATAPROC = undefined;
pub var namedFramebufferDrawBuffer: Types.PFN_GLNAMEDFRAMEBUFFERDRAWBUFFERPROC = undefined;
pub var namedFramebufferDrawBuffers: Types.PFN_GLNAMEDFRAMEBUFFERDRAWBUFFERSPROC = undefined;
pub var namedFramebufferParameteri: Types.PFN_GLNAMEDFRAMEBUFFERPARAMETERIPROC = undefined;
pub var namedFramebufferReadBuffer: Types.PFN_GLNAMEDFRAMEBUFFERREADBUFFERPROC = undefined;
pub var namedFramebufferRenderbuffer: Types.PFN_GLNAMEDFRAMEBUFFERRENDERBUFFERPROC = undefined;
pub var namedFramebufferTexture: Types.PFN_GLNAMEDFRAMEBUFFERTEXTUREPROC = undefined;
pub var namedFramebufferTextureLayer: Types.PFN_GLNAMEDFRAMEBUFFERTEXTURELAYERPROC = undefined;
pub var namedRenderbufferStorage: Types.PFN_GLNAMEDRENDERBUFFERSTORAGEPROC = undefined;
pub var namedRenderbufferStorageMultisample: Types.PFN_GLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC = undefined;
pub var newList: Types.PFN_GLNEWLISTPROC = undefined;
pub var normal3b: Types.PFN_GLNORMAL3BPROC = undefined;
pub var normal3bv: Types.PFN_GLNORMAL3BVPROC = undefined;
pub var normal3d: Types.PFN_GLNORMAL3DPROC = undefined;
pub var normal3dv: Types.PFN_GLNORMAL3DVPROC = undefined;
pub var normal3f: Types.PFN_GLNORMAL3FPROC = undefined;
pub var normal3fv: Types.PFN_GLNORMAL3FVPROC = undefined;
pub var normal3i: Types.PFN_GLNORMAL3IPROC = undefined;
pub var normal3iv: Types.PFN_GLNORMAL3IVPROC = undefined;
pub var normal3s: Types.PFN_GLNORMAL3SPROC = undefined;
pub var normal3sv: Types.PFN_GLNORMAL3SVPROC = undefined;
pub var normalP3ui: Types.PFN_GLNORMALP3UIPROC = undefined;
pub var normalP3uiv: Types.PFN_GLNORMALP3UIVPROC = undefined;
pub var normalPointer: Types.PFN_GLNORMALPOINTERPROC = undefined;
pub var objectLabel: Types.PFN_GLOBJECTLABELPROC = undefined;
pub var objectPtrLabel: Types.PFN_GLOBJECTPTRLABELPROC = undefined;
pub var ortho: Types.PFN_GLORTHOPROC = undefined;
pub var passThrough: Types.PFN_GLPASSTHROUGHPROC = undefined;
pub var patchParameterfv: Types.PFN_GLPATCHPARAMETERFVPROC = undefined;
pub var patchParameteri: Types.PFN_GLPATCHPARAMETERIPROC = undefined;
pub var pauseTransformFeedback: Types.PFN_GLPAUSETRANSFORMFEEDBACKPROC = undefined;
pub var pixelMapfv: Types.PFN_GLPIXELMAPFVPROC = undefined;
pub var pixelMapuiv: Types.PFN_GLPIXELMAPUIVPROC = undefined;
pub var pixelMapusv: Types.PFN_GLPIXELMAPUSVPROC = undefined;
pub var pixelStoref: Types.PFN_GLPIXELSTOREFPROC = undefined;
pub var pixelStorei: Types.PFN_GLPIXELSTOREIPROC = undefined;
pub var pixelTransferf: Types.PFN_GLPIXELTRANSFERFPROC = undefined;
pub var pixelTransferi: Types.PFN_GLPIXELTRANSFERIPROC = undefined;
pub var pixelZoom: Types.PFN_GLPIXELZOOMPROC = undefined;
pub var pointParameterf: Types.PFN_GLPOINTPARAMETERFPROC = undefined;
pub var pointParameterfv: Types.PFN_GLPOINTPARAMETERFVPROC = undefined;
pub var pointParameteri: Types.PFN_GLPOINTPARAMETERIPROC = undefined;
pub var pointParameteriv: Types.PFN_GLPOINTPARAMETERIVPROC = undefined;
pub var pointSize: Types.PFN_GLPOINTSIZEPROC = undefined;
pub var polygonMode: Types.PFN_GLPOLYGONMODEPROC = undefined;
pub var polygonOffset: Types.PFN_GLPOLYGONOFFSETPROC = undefined;
pub var polygonOffsetClamp: Types.PFN_GLPOLYGONOFFSETCLAMPPROC = undefined;
pub var polygonStipple: Types.PFN_GLPOLYGONSTIPPLEPROC = undefined;
pub var popAttrib: Types.PFN_GLPOPATTRIBPROC = undefined;
pub var popClientAttrib: Types.PFN_GLPOPCLIENTATTRIBPROC = undefined;
pub var popDebugGroup: Types.PFN_GLPOPDEBUGGROUPPROC = undefined;
pub var popMatrix: Types.PFN_GLPOPMATRIXPROC = undefined;
pub var popName: Types.PFN_GLPOPNAMEPROC = undefined;
pub var primitiveRestartIndex: Types.PFN_GLPRIMITIVERESTARTINDEXPROC = undefined;
pub var prioritizeTextures: Types.PFN_GLPRIORITIZETEXTURESPROC = undefined;
pub var programBinary: Types.PFN_GLPROGRAMBINARYPROC = undefined;
pub var programParameteri: Types.PFN_GLPROGRAMPARAMETERIPROC = undefined;
pub var programUniform1d: Types.PFN_GLPROGRAMUNIFORM1DPROC = undefined;
pub var programUniform1dv: Types.PFN_GLPROGRAMUNIFORM1DVPROC = undefined;
pub var programUniform1f: Types.PFN_GLPROGRAMUNIFORM1FPROC = undefined;
pub var programUniform1fv: Types.PFN_GLPROGRAMUNIFORM1FVPROC = undefined;
pub var programUniform1i: Types.PFN_GLPROGRAMUNIFORM1IPROC = undefined;
pub var programUniform1iv: Types.PFN_GLPROGRAMUNIFORM1IVPROC = undefined;
pub var programUniform1ui: Types.PFN_GLPROGRAMUNIFORM1UIPROC = undefined;
pub var programUniform1uiv: Types.PFN_GLPROGRAMUNIFORM1UIVPROC = undefined;
pub var programUniform2d: Types.PFN_GLPROGRAMUNIFORM2DPROC = undefined;
pub var programUniform2dv: Types.PFN_GLPROGRAMUNIFORM2DVPROC = undefined;
pub var programUniform2f: Types.PFN_GLPROGRAMUNIFORM2FPROC = undefined;
pub var programUniform2fv: Types.PFN_GLPROGRAMUNIFORM2FVPROC = undefined;
pub var programUniform2i: Types.PFN_GLPROGRAMUNIFORM2IPROC = undefined;
pub var programUniform2iv: Types.PFN_GLPROGRAMUNIFORM2IVPROC = undefined;
pub var programUniform2ui: Types.PFN_GLPROGRAMUNIFORM2UIPROC = undefined;
pub var programUniform2uiv: Types.PFN_GLPROGRAMUNIFORM2UIVPROC = undefined;
pub var programUniform3d: Types.PFN_GLPROGRAMUNIFORM3DPROC = undefined;
pub var programUniform3dv: Types.PFN_GLPROGRAMUNIFORM3DVPROC = undefined;
pub var programUniform3f: Types.PFN_GLPROGRAMUNIFORM3FPROC = undefined;
pub var programUniform3fv: Types.PFN_GLPROGRAMUNIFORM3FVPROC = undefined;
pub var programUniform3i: Types.PFN_GLPROGRAMUNIFORM3IPROC = undefined;
pub var programUniform3iv: Types.PFN_GLPROGRAMUNIFORM3IVPROC = undefined;
pub var programUniform3ui: Types.PFN_GLPROGRAMUNIFORM3UIPROC = undefined;
pub var programUniform3uiv: Types.PFN_GLPROGRAMUNIFORM3UIVPROC = undefined;
pub var programUniform4d: Types.PFN_GLPROGRAMUNIFORM4DPROC = undefined;
pub var programUniform4dv: Types.PFN_GLPROGRAMUNIFORM4DVPROC = undefined;
pub var programUniform4f: Types.PFN_GLPROGRAMUNIFORM4FPROC = undefined;
pub var programUniform4fv: Types.PFN_GLPROGRAMUNIFORM4FVPROC = undefined;
pub var programUniform4i: Types.PFN_GLPROGRAMUNIFORM4IPROC = undefined;
pub var programUniform4iv: Types.PFN_GLPROGRAMUNIFORM4IVPROC = undefined;
pub var programUniform4ui: Types.PFN_GLPROGRAMUNIFORM4UIPROC = undefined;
pub var programUniform4uiv: Types.PFN_GLPROGRAMUNIFORM4UIVPROC = undefined;
pub var programUniformMatrix2dv: Types.PFN_GLPROGRAMUNIFORMMATRIX2DVPROC = undefined;
pub var programUniformMatrix2fv: Types.PFN_GLPROGRAMUNIFORMMATRIX2FVPROC = undefined;
pub var programUniformMatrix2x3dv: Types.PFN_GLPROGRAMUNIFORMMATRIX2X3DVPROC = undefined;
pub var programUniformMatrix2x3fv: Types.PFN_GLPROGRAMUNIFORMMATRIX2X3FVPROC = undefined;
pub var programUniformMatrix2x4dv: Types.PFN_GLPROGRAMUNIFORMMATRIX2X4DVPROC = undefined;
pub var programUniformMatrix2x4fv: Types.PFN_GLPROGRAMUNIFORMMATRIX2X4FVPROC = undefined;
pub var programUniformMatrix3dv: Types.PFN_GLPROGRAMUNIFORMMATRIX3DVPROC = undefined;
pub var programUniformMatrix3fv: Types.PFN_GLPROGRAMUNIFORMMATRIX3FVPROC = undefined;
pub var programUniformMatrix3x2dv: Types.PFN_GLPROGRAMUNIFORMMATRIX3X2DVPROC = undefined;
pub var programUniformMatrix3x2fv: Types.PFN_GLPROGRAMUNIFORMMATRIX3X2FVPROC = undefined;
pub var programUniformMatrix3x4dv: Types.PFN_GLPROGRAMUNIFORMMATRIX3X4DVPROC = undefined;
pub var programUniformMatrix3x4fv: Types.PFN_GLPROGRAMUNIFORMMATRIX3X4FVPROC = undefined;
pub var programUniformMatrix4dv: Types.PFN_GLPROGRAMUNIFORMMATRIX4DVPROC = undefined;
pub var programUniformMatrix4fv: Types.PFN_GLPROGRAMUNIFORMMATRIX4FVPROC = undefined;
pub var programUniformMatrix4x2dv: Types.PFN_GLPROGRAMUNIFORMMATRIX4X2DVPROC = undefined;
pub var programUniformMatrix4x2fv: Types.PFN_GLPROGRAMUNIFORMMATRIX4X2FVPROC = undefined;
pub var programUniformMatrix4x3dv: Types.PFN_GLPROGRAMUNIFORMMATRIX4X3DVPROC = undefined;
pub var programUniformMatrix4x3fv: Types.PFN_GLPROGRAMUNIFORMMATRIX4X3FVPROC = undefined;
pub var provokingVertex: Types.PFN_GLPROVOKINGVERTEXPROC = undefined;
pub var pushAttrib: Types.PFN_GLPUSHATTRIBPROC = undefined;
pub var pushClientAttrib: Types.PFN_GLPUSHCLIENTATTRIBPROC = undefined;
pub var pushDebugGroup: Types.PFN_GLPUSHDEBUGGROUPPROC = undefined;
pub var pushMatrix: Types.PFN_GLPUSHMATRIXPROC = undefined;
pub var pushName: Types.PFN_GLPUSHNAMEPROC = undefined;
pub var queryCounter: Types.PFN_GLQUERYCOUNTERPROC = undefined;
pub var rasterPos2d: Types.PFN_GLRASTERPOS2DPROC = undefined;
pub var rasterPos2dv: Types.PFN_GLRASTERPOS2DVPROC = undefined;
pub var rasterPos2f: Types.PFN_GLRASTERPOS2FPROC = undefined;
pub var rasterPos2fv: Types.PFN_GLRASTERPOS2FVPROC = undefined;
pub var rasterPos2i: Types.PFN_GLRASTERPOS2IPROC = undefined;
pub var rasterPos2iv: Types.PFN_GLRASTERPOS2IVPROC = undefined;
pub var rasterPos2s: Types.PFN_GLRASTERPOS2SPROC = undefined;
pub var rasterPos2sv: Types.PFN_GLRASTERPOS2SVPROC = undefined;
pub var rasterPos3d: Types.PFN_GLRASTERPOS3DPROC = undefined;
pub var rasterPos3dv: Types.PFN_GLRASTERPOS3DVPROC = undefined;
pub var rasterPos3f: Types.PFN_GLRASTERPOS3FPROC = undefined;
pub var rasterPos3fv: Types.PFN_GLRASTERPOS3FVPROC = undefined;
pub var rasterPos3i: Types.PFN_GLRASTERPOS3IPROC = undefined;
pub var rasterPos3iv: Types.PFN_GLRASTERPOS3IVPROC = undefined;
pub var rasterPos3s: Types.PFN_GLRASTERPOS3SPROC = undefined;
pub var rasterPos3sv: Types.PFN_GLRASTERPOS3SVPROC = undefined;
pub var rasterPos4d: Types.PFN_GLRASTERPOS4DPROC = undefined;
pub var rasterPos4dv: Types.PFN_GLRASTERPOS4DVPROC = undefined;
pub var rasterPos4f: Types.PFN_GLRASTERPOS4FPROC = undefined;
pub var rasterPos4fv: Types.PFN_GLRASTERPOS4FVPROC = undefined;
pub var rasterPos4i: Types.PFN_GLRASTERPOS4IPROC = undefined;
pub var rasterPos4iv: Types.PFN_GLRASTERPOS4IVPROC = undefined;
pub var rasterPos4s: Types.PFN_GLRASTERPOS4SPROC = undefined;
pub var rasterPos4sv: Types.PFN_GLRASTERPOS4SVPROC = undefined;
pub var readBuffer: Types.PFN_GLREADBUFFERPROC = undefined;
pub var readPixels: Types.PFN_GLREADPIXELSPROC = undefined;
pub var readnPixels: Types.PFN_GLREADNPIXELSPROC = undefined;
pub var rectd: Types.PFN_GLRECTDPROC = undefined;
pub var rectdv: Types.PFN_GLRECTDVPROC = undefined;
pub var rectf: Types.PFN_GLRECTFPROC = undefined;
pub var rectfv: Types.PFN_GLRECTFVPROC = undefined;
pub var recti: Types.PFN_GLRECTIPROC = undefined;
pub var rectiv: Types.PFN_GLRECTIVPROC = undefined;
pub var rects: Types.PFN_GLRECTSPROC = undefined;
pub var rectsv: Types.PFN_GLRECTSVPROC = undefined;
pub var releaseShaderCompiler: Types.PFN_GLRELEASESHADERCOMPILERPROC = undefined;
pub var renderMode: Types.PFN_GLRENDERMODEPROC = undefined;
pub var renderbufferStorage: Types.PFN_GLRENDERBUFFERSTORAGEPROC = undefined;
pub var renderbufferStorageMultisample: Types.PFN_GLRENDERBUFFERSTORAGEMULTISAMPLEPROC = undefined;
pub var resumeTransformFeedback: Types.PFN_GLRESUMETRANSFORMFEEDBACKPROC = undefined;
pub var rotated: Types.PFN_GLROTATEDPROC = undefined;
pub var rotatef: Types.PFN_GLROTATEFPROC = undefined;
pub var sampleCoverage: Types.PFN_GLSAMPLECOVERAGEPROC = undefined;
pub var sampleMaski: Types.PFN_GLSAMPLEMASKIPROC = undefined;
pub var samplerParameterIiv: Types.PFN_GLSAMPLERPARAMETERIIVPROC = undefined;
pub var samplerParameterIuiv: Types.PFN_GLSAMPLERPARAMETERIUIVPROC = undefined;
pub var samplerParameterf: Types.PFN_GLSAMPLERPARAMETERFPROC = undefined;
pub var samplerParameterfv: Types.PFN_GLSAMPLERPARAMETERFVPROC = undefined;
pub var samplerParameteri: Types.PFN_GLSAMPLERPARAMETERIPROC = undefined;
pub var samplerParameteriv: Types.PFN_GLSAMPLERPARAMETERIVPROC = undefined;
pub var scaled: Types.PFN_GLSCALEDPROC = undefined;
pub var scalef: Types.PFN_GLSCALEFPROC = undefined;
pub var scissor: Types.PFN_GLSCISSORPROC = undefined;
pub var scissorArrayv: Types.PFN_GLSCISSORARRAYVPROC = undefined;
pub var scissorIndexed: Types.PFN_GLSCISSORINDEXEDPROC = undefined;
pub var scissorIndexedv: Types.PFN_GLSCISSORINDEXEDVPROC = undefined;
pub var secondaryColor3b: Types.PFN_GLSECONDARYCOLOR3BPROC = undefined;
pub var secondaryColor3bv: Types.PFN_GLSECONDARYCOLOR3BVPROC = undefined;
pub var secondaryColor3d: Types.PFN_GLSECONDARYCOLOR3DPROC = undefined;
pub var secondaryColor3dv: Types.PFN_GLSECONDARYCOLOR3DVPROC = undefined;
pub var secondaryColor3f: Types.PFN_GLSECONDARYCOLOR3FPROC = undefined;
pub var secondaryColor3fv: Types.PFN_GLSECONDARYCOLOR3FVPROC = undefined;
pub var secondaryColor3i: Types.PFN_GLSECONDARYCOLOR3IPROC = undefined;
pub var secondaryColor3iv: Types.PFN_GLSECONDARYCOLOR3IVPROC = undefined;
pub var secondaryColor3s: Types.PFN_GLSECONDARYCOLOR3SPROC = undefined;
pub var secondaryColor3sv: Types.PFN_GLSECONDARYCOLOR3SVPROC = undefined;
pub var secondaryColor3ub: Types.PFN_GLSECONDARYCOLOR3UBPROC = undefined;
pub var secondaryColor3ubv: Types.PFN_GLSECONDARYCOLOR3UBVPROC = undefined;
pub var secondaryColor3ui: Types.PFN_GLSECONDARYCOLOR3UIPROC = undefined;
pub var secondaryColor3uiv: Types.PFN_GLSECONDARYCOLOR3UIVPROC = undefined;
pub var secondaryColor3us: Types.PFN_GLSECONDARYCOLOR3USPROC = undefined;
pub var secondaryColor3usv: Types.PFN_GLSECONDARYCOLOR3USVPROC = undefined;
pub var secondaryColorP3ui: Types.PFN_GLSECONDARYCOLORP3UIPROC = undefined;
pub var secondaryColorP3uiv: Types.PFN_GLSECONDARYCOLORP3UIVPROC = undefined;
pub var secondaryColorPointer: Types.PFN_GLSECONDARYCOLORPOINTERPROC = undefined;
pub var selectBuffer: Types.PFN_GLSELECTBUFFERPROC = undefined;
pub var shadeModel: Types.PFN_GLSHADEMODELPROC = undefined;
pub var shaderBinary: Types.PFN_GLSHADERBINARYPROC = undefined;
pub var shaderSource: Types.PFN_GLSHADERSOURCEPROC = undefined;
pub var shaderStorageBlockBinding: Types.PFN_GLSHADERSTORAGEBLOCKBINDINGPROC = undefined;
pub var specializeShader: Types.PFN_GLSPECIALIZESHADERPROC = undefined;
pub var stencilFunc: Types.PFN_GLSTENCILFUNCPROC = undefined;
pub var stencilFuncSeparate: Types.PFN_GLSTENCILFUNCSEPARATEPROC = undefined;
pub var stencilMask: Types.PFN_GLSTENCILMASKPROC = undefined;
pub var stencilMaskSeparate: Types.PFN_GLSTENCILMASKSEPARATEPROC = undefined;
pub var stencilOp: Types.PFN_GLSTENCILOPPROC = undefined;
pub var stencilOpSeparate: Types.PFN_GLSTENCILOPSEPARATEPROC = undefined;
pub var texBuffer: Types.PFN_GLTEXBUFFERPROC = undefined;
pub var texBufferRange: Types.PFN_GLTEXBUFFERRANGEPROC = undefined;
pub var texCoord1d: Types.PFN_GLTEXCOORD1DPROC = undefined;
pub var texCoord1dv: Types.PFN_GLTEXCOORD1DVPROC = undefined;
pub var texCoord1f: Types.PFN_GLTEXCOORD1FPROC = undefined;
pub var texCoord1fv: Types.PFN_GLTEXCOORD1FVPROC = undefined;
pub var texCoord1i: Types.PFN_GLTEXCOORD1IPROC = undefined;
pub var texCoord1iv: Types.PFN_GLTEXCOORD1IVPROC = undefined;
pub var texCoord1s: Types.PFN_GLTEXCOORD1SPROC = undefined;
pub var texCoord1sv: Types.PFN_GLTEXCOORD1SVPROC = undefined;
pub var texCoord2d: Types.PFN_GLTEXCOORD2DPROC = undefined;
pub var texCoord2dv: Types.PFN_GLTEXCOORD2DVPROC = undefined;
pub var texCoord2f: Types.PFN_GLTEXCOORD2FPROC = undefined;
pub var texCoord2fv: Types.PFN_GLTEXCOORD2FVPROC = undefined;
pub var texCoord2i: Types.PFN_GLTEXCOORD2IPROC = undefined;
pub var texCoord2iv: Types.PFN_GLTEXCOORD2IVPROC = undefined;
pub var texCoord2s: Types.PFN_GLTEXCOORD2SPROC = undefined;
pub var texCoord2sv: Types.PFN_GLTEXCOORD2SVPROC = undefined;
pub var texCoord3d: Types.PFN_GLTEXCOORD3DPROC = undefined;
pub var texCoord3dv: Types.PFN_GLTEXCOORD3DVPROC = undefined;
pub var texCoord3f: Types.PFN_GLTEXCOORD3FPROC = undefined;
pub var texCoord3fv: Types.PFN_GLTEXCOORD3FVPROC = undefined;
pub var texCoord3i: Types.PFN_GLTEXCOORD3IPROC = undefined;
pub var texCoord3iv: Types.PFN_GLTEXCOORD3IVPROC = undefined;
pub var texCoord3s: Types.PFN_GLTEXCOORD3SPROC = undefined;
pub var texCoord3sv: Types.PFN_GLTEXCOORD3SVPROC = undefined;
pub var texCoord4d: Types.PFN_GLTEXCOORD4DPROC = undefined;
pub var texCoord4dv: Types.PFN_GLTEXCOORD4DVPROC = undefined;
pub var texCoord4f: Types.PFN_GLTEXCOORD4FPROC = undefined;
pub var texCoord4fv: Types.PFN_GLTEXCOORD4FVPROC = undefined;
pub var texCoord4i: Types.PFN_GLTEXCOORD4IPROC = undefined;
pub var texCoord4iv: Types.PFN_GLTEXCOORD4IVPROC = undefined;
pub var texCoord4s: Types.PFN_GLTEXCOORD4SPROC = undefined;
pub var texCoord4sv: Types.PFN_GLTEXCOORD4SVPROC = undefined;
pub var texCoordP1ui: Types.PFN_GLTEXCOORDP1UIPROC = undefined;
pub var texCoordP1uiv: Types.PFN_GLTEXCOORDP1UIVPROC = undefined;
pub var texCoordP2ui: Types.PFN_GLTEXCOORDP2UIPROC = undefined;
pub var texCoordP2uiv: Types.PFN_GLTEXCOORDP2UIVPROC = undefined;
pub var texCoordP3ui: Types.PFN_GLTEXCOORDP3UIPROC = undefined;
pub var texCoordP3uiv: Types.PFN_GLTEXCOORDP3UIVPROC = undefined;
pub var texCoordP4ui: Types.PFN_GLTEXCOORDP4UIPROC = undefined;
pub var texCoordP4uiv: Types.PFN_GLTEXCOORDP4UIVPROC = undefined;
pub var texCoordPointer: Types.PFN_GLTEXCOORDPOINTERPROC = undefined;
pub var texEnvf: Types.PFN_GLTEXENVFPROC = undefined;
pub var texEnvfv: Types.PFN_GLTEXENVFVPROC = undefined;
pub var texEnvi: Types.PFN_GLTEXENVIPROC = undefined;
pub var texEnviv: Types.PFN_GLTEXENVIVPROC = undefined;
pub var texGend: Types.PFN_GLTEXGENDPROC = undefined;
pub var texGendv: Types.PFN_GLTEXGENDVPROC = undefined;
pub var texGenf: Types.PFN_GLTEXGENFPROC = undefined;
pub var texGenfv: Types.PFN_GLTEXGENFVPROC = undefined;
pub var texGeni: Types.PFN_GLTEXGENIPROC = undefined;
pub var texGeniv: Types.PFN_GLTEXGENIVPROC = undefined;
pub var texImage1D: Types.PFN_GLTEXIMAGE1DPROC = undefined;
pub var texImage2D: Types.PFN_GLTEXIMAGE2DPROC = undefined;
pub var texImage2DMultisample: Types.PFN_GLTEXIMAGE2DMULTISAMPLEPROC = undefined;
pub var texImage3D: Types.PFN_GLTEXIMAGE3DPROC = undefined;
pub var texImage3DMultisample: Types.PFN_GLTEXIMAGE3DMULTISAMPLEPROC = undefined;
pub var texParameterIiv: Types.PFN_GLTEXPARAMETERIIVPROC = undefined;
pub var texParameterIuiv: Types.PFN_GLTEXPARAMETERIUIVPROC = undefined;
pub var texParameterf: Types.PFN_GLTEXPARAMETERFPROC = undefined;
pub var texParameterfv: Types.PFN_GLTEXPARAMETERFVPROC = undefined;
pub var texParameteri: Types.PFN_GLTEXPARAMETERIPROC = undefined;
pub var texParameteriv: Types.PFN_GLTEXPARAMETERIVPROC = undefined;
pub var texStorage1D: Types.PFN_GLTEXSTORAGE1DPROC = undefined;
pub var texStorage2D: Types.PFN_GLTEXSTORAGE2DPROC = undefined;
pub var texStorage2DMultisample: Types.PFN_GLTEXSTORAGE2DMULTISAMPLEPROC = undefined;
pub var texStorage3D: Types.PFN_GLTEXSTORAGE3DPROC = undefined;
pub var texStorage3DMultisample: Types.PFN_GLTEXSTORAGE3DMULTISAMPLEPROC = undefined;
pub var texSubImage1D: Types.PFN_GLTEXSUBIMAGE1DPROC = undefined;
pub var texSubImage2D: Types.PFN_GLTEXSUBIMAGE2DPROC = undefined;
pub var texSubImage3D: Types.PFN_GLTEXSUBIMAGE3DPROC = undefined;
pub var textureBarrier: Types.PFN_GLTEXTUREBARRIERPROC = undefined;
pub var textureBuffer: Types.PFN_GLTEXTUREBUFFERPROC = undefined;
pub var textureBufferRange: Types.PFN_GLTEXTUREBUFFERRANGEPROC = undefined;
pub var textureParameterIiv: Types.PFN_GLTEXTUREPARAMETERIIVPROC = undefined;
pub var textureParameterIuiv: Types.PFN_GLTEXTUREPARAMETERIUIVPROC = undefined;
pub var textureParameterf: Types.PFN_GLTEXTUREPARAMETERFPROC = undefined;
pub var textureParameterfv: Types.PFN_GLTEXTUREPARAMETERFVPROC = undefined;
pub var textureParameteri: Types.PFN_GLTEXTUREPARAMETERIPROC = undefined;
pub var textureParameteriv: Types.PFN_GLTEXTUREPARAMETERIVPROC = undefined;
pub var textureStorage1D: Types.PFN_GLTEXTURESTORAGE1DPROC = undefined;
pub var textureStorage2D: Types.PFN_GLTEXTURESTORAGE2DPROC = undefined;
pub var textureStorage2DMultisample: Types.PFN_GLTEXTURESTORAGE2DMULTISAMPLEPROC = undefined;
pub var textureStorage3D: Types.PFN_GLTEXTURESTORAGE3DPROC = undefined;
pub var textureStorage3DMultisample: Types.PFN_GLTEXTURESTORAGE3DMULTISAMPLEPROC = undefined;
pub var textureSubImage1D: Types.PFN_GLTEXTURESUBIMAGE1DPROC = undefined;
pub var textureSubImage2D: Types.PFN_GLTEXTURESUBIMAGE2DPROC = undefined;
pub var textureSubImage3D: Types.PFN_GLTEXTURESUBIMAGE3DPROC = undefined;
pub var textureView: Types.PFN_GLTEXTUREVIEWPROC = undefined;
pub var transformFeedbackBufferBase: Types.PFN_GLTRANSFORMFEEDBACKBUFFERBASEPROC = undefined;
pub var transformFeedbackBufferRange: Types.PFN_GLTRANSFORMFEEDBACKBUFFERRANGEPROC = undefined;
pub var transformFeedbackVaryings: Types.PFN_GLTRANSFORMFEEDBACKVARYINGSPROC = undefined;
pub var translated: Types.PFN_GLTRANSLATEDPROC = undefined;
pub var translatef: Types.PFN_GLTRANSLATEFPROC = undefined;
pub var uniform1d: Types.PFN_GLUNIFORM1DPROC = undefined;
pub var uniform1dv: Types.PFN_GLUNIFORM1DVPROC = undefined;
pub var uniform1f: Types.PFN_GLUNIFORM1FPROC = undefined;
pub var uniform1fv: Types.PFN_GLUNIFORM1FVPROC = undefined;
pub var uniform1i: Types.PFN_GLUNIFORM1IPROC = undefined;
pub var uniform1iv: Types.PFN_GLUNIFORM1IVPROC = undefined;
pub var uniform1ui: Types.PFN_GLUNIFORM1UIPROC = undefined;
pub var uniform1uiv: Types.PFN_GLUNIFORM1UIVPROC = undefined;
pub var uniform2d: Types.PFN_GLUNIFORM2DPROC = undefined;
pub var uniform2dv: Types.PFN_GLUNIFORM2DVPROC = undefined;
pub var uniform2f: Types.PFN_GLUNIFORM2FPROC = undefined;
pub var uniform2fv: Types.PFN_GLUNIFORM2FVPROC = undefined;
pub var uniform2i: Types.PFN_GLUNIFORM2IPROC = undefined;
pub var uniform2iv: Types.PFN_GLUNIFORM2IVPROC = undefined;
pub var uniform2ui: Types.PFN_GLUNIFORM2UIPROC = undefined;
pub var uniform2uiv: Types.PFN_GLUNIFORM2UIVPROC = undefined;
pub var uniform3d: Types.PFN_GLUNIFORM3DPROC = undefined;
pub var uniform3dv: Types.PFN_GLUNIFORM3DVPROC = undefined;
pub var uniform3f: Types.PFN_GLUNIFORM3FPROC = undefined;
pub var uniform3fv: Types.PFN_GLUNIFORM3FVPROC = undefined;
pub var uniform3i: Types.PFN_GLUNIFORM3IPROC = undefined;
pub var uniform3iv: Types.PFN_GLUNIFORM3IVPROC = undefined;
pub var uniform3ui: Types.PFN_GLUNIFORM3UIPROC = undefined;
pub var uniform3uiv: Types.PFN_GLUNIFORM3UIVPROC = undefined;
pub var uniform4d: Types.PFN_GLUNIFORM4DPROC = undefined;
pub var uniform4dv: Types.PFN_GLUNIFORM4DVPROC = undefined;
pub var uniform4f: Types.PFN_GLUNIFORM4FPROC = undefined;
pub var uniform4fv: Types.PFN_GLUNIFORM4FVPROC = undefined;
pub var uniform4i: Types.PFN_GLUNIFORM4IPROC = undefined;
pub var uniform4iv: Types.PFN_GLUNIFORM4IVPROC = undefined;
pub var uniform4ui: Types.PFN_GLUNIFORM4UIPROC = undefined;
pub var uniform4uiv: Types.PFN_GLUNIFORM4UIVPROC = undefined;
pub var uniformBlockBinding: Types.PFN_GLUNIFORMBLOCKBINDINGPROC = undefined;
pub var uniformMatrix2dv: Types.PFN_GLUNIFORMMATRIX2DVPROC = undefined;
pub var uniformMatrix2fv: Types.PFN_GLUNIFORMMATRIX2FVPROC = undefined;
pub var uniformMatrix2x3dv: Types.PFN_GLUNIFORMMATRIX2X3DVPROC = undefined;
pub var uniformMatrix2x3fv: Types.PFN_GLUNIFORMMATRIX2X3FVPROC = undefined;
pub var uniformMatrix2x4dv: Types.PFN_GLUNIFORMMATRIX2X4DVPROC = undefined;
pub var uniformMatrix2x4fv: Types.PFN_GLUNIFORMMATRIX2X4FVPROC = undefined;
pub var uniformMatrix3dv: Types.PFN_GLUNIFORMMATRIX3DVPROC = undefined;
pub var uniformMatrix3fv: Types.PFN_GLUNIFORMMATRIX3FVPROC = undefined;
pub var uniformMatrix3x2dv: Types.PFN_GLUNIFORMMATRIX3X2DVPROC = undefined;
pub var uniformMatrix3x2fv: Types.PFN_GLUNIFORMMATRIX3X2FVPROC = undefined;
pub var uniformMatrix3x4dv: Types.PFN_GLUNIFORMMATRIX3X4DVPROC = undefined;
pub var uniformMatrix3x4fv: Types.PFN_GLUNIFORMMATRIX3X4FVPROC = undefined;
pub var uniformMatrix4dv: Types.PFN_GLUNIFORMMATRIX4DVPROC = undefined;
pub var uniformMatrix4fv: Types.PFN_GLUNIFORMMATRIX4FVPROC = undefined;
pub var uniformMatrix4x2dv: Types.PFN_GLUNIFORMMATRIX4X2DVPROC = undefined;
pub var uniformMatrix4x2fv: Types.PFN_GLUNIFORMMATRIX4X2FVPROC = undefined;
pub var uniformMatrix4x3dv: Types.PFN_GLUNIFORMMATRIX4X3DVPROC = undefined;
pub var uniformMatrix4x3fv: Types.PFN_GLUNIFORMMATRIX4X3FVPROC = undefined;
pub var uniformSubroutinesuiv: Types.PFN_GLUNIFORMSUBROUTINESUIVPROC = undefined;
pub var unmapBuffer: Types.PFN_GLUNMAPBUFFERPROC = undefined;
pub var unmapNamedBuffer: Types.PFN_GLUNMAPNAMEDBUFFERPROC = undefined;
pub var useProgram: Types.PFN_GLUSEPROGRAMPROC = undefined;
pub var useProgramStages: Types.PFN_GLUSEPROGRAMSTAGESPROC = undefined;
pub var validateProgram: Types.PFN_GLVALIDATEPROGRAMPROC = undefined;
pub var validateProgramPipeline: Types.PFN_GLVALIDATEPROGRAMPIPELINEPROC = undefined;
pub var vertex2d: Types.PFN_GLVERTEX2DPROC = undefined;
pub var vertex2dv: Types.PFN_GLVERTEX2DVPROC = undefined;
pub var vertex2f: Types.PFN_GLVERTEX2FPROC = undefined;
pub var vertex2fv: Types.PFN_GLVERTEX2FVPROC = undefined;
pub var vertex2i: Types.PFN_GLVERTEX2IPROC = undefined;
pub var vertex2iv: Types.PFN_GLVERTEX2IVPROC = undefined;
pub var vertex2s: Types.PFN_GLVERTEX2SPROC = undefined;
pub var vertex2sv: Types.PFN_GLVERTEX2SVPROC = undefined;
pub var vertex3d: Types.PFN_GLVERTEX3DPROC = undefined;
pub var vertex3dv: Types.PFN_GLVERTEX3DVPROC = undefined;
pub var vertex3f: Types.PFN_GLVERTEX3FPROC = undefined;
pub var vertex3fv: Types.PFN_GLVERTEX3FVPROC = undefined;
pub var vertex3i: Types.PFN_GLVERTEX3IPROC = undefined;
pub var vertex3iv: Types.PFN_GLVERTEX3IVPROC = undefined;
pub var vertex3s: Types.PFN_GLVERTEX3SPROC = undefined;
pub var vertex3sv: Types.PFN_GLVERTEX3SVPROC = undefined;
pub var vertex4d: Types.PFN_GLVERTEX4DPROC = undefined;
pub var vertex4dv: Types.PFN_GLVERTEX4DVPROC = undefined;
pub var vertex4f: Types.PFN_GLVERTEX4FPROC = undefined;
pub var vertex4fv: Types.PFN_GLVERTEX4FVPROC = undefined;
pub var vertex4i: Types.PFN_GLVERTEX4IPROC = undefined;
pub var vertex4iv: Types.PFN_GLVERTEX4IVPROC = undefined;
pub var vertex4s: Types.PFN_GLVERTEX4SPROC = undefined;
pub var vertex4sv: Types.PFN_GLVERTEX4SVPROC = undefined;
pub var vertexArrayAttribBinding: Types.PFN_GLVERTEXARRAYATTRIBBINDINGPROC = undefined;
pub var vertexArrayAttribFormat: Types.PFN_GLVERTEXARRAYATTRIBFORMATPROC = undefined;
pub var vertexArrayAttribIFormat: Types.PFN_GLVERTEXARRAYATTRIBIFORMATPROC = undefined;
pub var vertexArrayAttribLFormat: Types.PFN_GLVERTEXARRAYATTRIBLFORMATPROC = undefined;
pub var vertexArrayBindingDivisor: Types.PFN_GLVERTEXARRAYBINDINGDIVISORPROC = undefined;
pub var vertexArrayElementBuffer: Types.PFN_GLVERTEXARRAYELEMENTBUFFERPROC = undefined;
pub var vertexArrayVertexBuffer: Types.PFN_GLVERTEXARRAYVERTEXBUFFERPROC = undefined;
pub var vertexArrayVertexBuffers: Types.PFN_GLVERTEXARRAYVERTEXBUFFERSPROC = undefined;
pub var vertexAttrib1d: Types.PFN_GLVERTEXATTRIB1DPROC = undefined;
pub var vertexAttrib1dv: Types.PFN_GLVERTEXATTRIB1DVPROC = undefined;
pub var vertexAttrib1f: Types.PFN_GLVERTEXATTRIB1FPROC = undefined;
pub var vertexAttrib1fv: Types.PFN_GLVERTEXATTRIB1FVPROC = undefined;
pub var vertexAttrib1s: Types.PFN_GLVERTEXATTRIB1SPROC = undefined;
pub var vertexAttrib1sv: Types.PFN_GLVERTEXATTRIB1SVPROC = undefined;
pub var vertexAttrib2d: Types.PFN_GLVERTEXATTRIB2DPROC = undefined;
pub var vertexAttrib2dv: Types.PFN_GLVERTEXATTRIB2DVPROC = undefined;
pub var vertexAttrib2f: Types.PFN_GLVERTEXATTRIB2FPROC = undefined;
pub var vertexAttrib2fv: Types.PFN_GLVERTEXATTRIB2FVPROC = undefined;
pub var vertexAttrib2s: Types.PFN_GLVERTEXATTRIB2SPROC = undefined;
pub var vertexAttrib2sv: Types.PFN_GLVERTEXATTRIB2SVPROC = undefined;
pub var vertexAttrib3d: Types.PFN_GLVERTEXATTRIB3DPROC = undefined;
pub var vertexAttrib3dv: Types.PFN_GLVERTEXATTRIB3DVPROC = undefined;
pub var vertexAttrib3f: Types.PFN_GLVERTEXATTRIB3FPROC = undefined;
pub var vertexAttrib3fv: Types.PFN_GLVERTEXATTRIB3FVPROC = undefined;
pub var vertexAttrib3s: Types.PFN_GLVERTEXATTRIB3SPROC = undefined;
pub var vertexAttrib3sv: Types.PFN_GLVERTEXATTRIB3SVPROC = undefined;
pub var vertexAttrib4Nbv: Types.PFN_GLVERTEXATTRIB4NBVPROC = undefined;
pub var vertexAttrib4Niv: Types.PFN_GLVERTEXATTRIB4NIVPROC = undefined;
pub var vertexAttrib4Nsv: Types.PFN_GLVERTEXATTRIB4NSVPROC = undefined;
pub var vertexAttrib4Nub: Types.PFN_GLVERTEXATTRIB4NUBPROC = undefined;
pub var vertexAttrib4Nubv: Types.PFN_GLVERTEXATTRIB4NUBVPROC = undefined;
pub var vertexAttrib4Nuiv: Types.PFN_GLVERTEXATTRIB4NUIVPROC = undefined;
pub var vertexAttrib4Nusv: Types.PFN_GLVERTEXATTRIB4NUSVPROC = undefined;
pub var vertexAttrib4bv: Types.PFN_GLVERTEXATTRIB4BVPROC = undefined;
pub var vertexAttrib4d: Types.PFN_GLVERTEXATTRIB4DPROC = undefined;
pub var vertexAttrib4dv: Types.PFN_GLVERTEXATTRIB4DVPROC = undefined;
pub var vertexAttrib4f: Types.PFN_GLVERTEXATTRIB4FPROC = undefined;
pub var vertexAttrib4fv: Types.PFN_GLVERTEXATTRIB4FVPROC = undefined;
pub var vertexAttrib4iv: Types.PFN_GLVERTEXATTRIB4IVPROC = undefined;
pub var vertexAttrib4s: Types.PFN_GLVERTEXATTRIB4SPROC = undefined;
pub var vertexAttrib4sv: Types.PFN_GLVERTEXATTRIB4SVPROC = undefined;
pub var vertexAttrib4ubv: Types.PFN_GLVERTEXATTRIB4UBVPROC = undefined;
pub var vertexAttrib4uiv: Types.PFN_GLVERTEXATTRIB4UIVPROC = undefined;
pub var vertexAttrib4usv: Types.PFN_GLVERTEXATTRIB4USVPROC = undefined;
pub var vertexAttribBinding: Types.PFN_GLVERTEXATTRIBBINDINGPROC = undefined;
pub var vertexAttribDivisor: Types.PFN_GLVERTEXATTRIBDIVISORPROC = undefined;
pub var vertexAttribFormat: Types.PFN_GLVERTEXATTRIBFORMATPROC = undefined;
pub var vertexAttribI1i: Types.PFN_GLVERTEXATTRIBI1IPROC = undefined;
pub var vertexAttribI1iv: Types.PFN_GLVERTEXATTRIBI1IVPROC = undefined;
pub var vertexAttribI1ui: Types.PFN_GLVERTEXATTRIBI1UIPROC = undefined;
pub var vertexAttribI1uiv: Types.PFN_GLVERTEXATTRIBI1UIVPROC = undefined;
pub var vertexAttribI2i: Types.PFN_GLVERTEXATTRIBI2IPROC = undefined;
pub var vertexAttribI2iv: Types.PFN_GLVERTEXATTRIBI2IVPROC = undefined;
pub var vertexAttribI2ui: Types.PFN_GLVERTEXATTRIBI2UIPROC = undefined;
pub var vertexAttribI2uiv: Types.PFN_GLVERTEXATTRIBI2UIVPROC = undefined;
pub var vertexAttribI3i: Types.PFN_GLVERTEXATTRIBI3IPROC = undefined;
pub var vertexAttribI3iv: Types.PFN_GLVERTEXATTRIBI3IVPROC = undefined;
pub var vertexAttribI3ui: Types.PFN_GLVERTEXATTRIBI3UIPROC = undefined;
pub var vertexAttribI3uiv: Types.PFN_GLVERTEXATTRIBI3UIVPROC = undefined;
pub var vertexAttribI4bv: Types.PFN_GLVERTEXATTRIBI4BVPROC = undefined;
pub var vertexAttribI4i: Types.PFN_GLVERTEXATTRIBI4IPROC = undefined;
pub var vertexAttribI4iv: Types.PFN_GLVERTEXATTRIBI4IVPROC = undefined;
pub var vertexAttribI4sv: Types.PFN_GLVERTEXATTRIBI4SVPROC = undefined;
pub var vertexAttribI4ubv: Types.PFN_GLVERTEXATTRIBI4UBVPROC = undefined;
pub var vertexAttribI4ui: Types.PFN_GLVERTEXATTRIBI4UIPROC = undefined;
pub var vertexAttribI4uiv: Types.PFN_GLVERTEXATTRIBI4UIVPROC = undefined;
pub var vertexAttribI4usv: Types.PFN_GLVERTEXATTRIBI4USVPROC = undefined;
pub var vertexAttribIFormat: Types.PFN_GLVERTEXATTRIBIFORMATPROC = undefined;
pub var vertexAttribIPointer: Types.PFN_GLVERTEXATTRIBIPOINTERPROC = undefined;
pub var vertexAttribL1d: Types.PFN_GLVERTEXATTRIBL1DPROC = undefined;
pub var vertexAttribL1dv: Types.PFN_GLVERTEXATTRIBL1DVPROC = undefined;
pub var vertexAttribL2d: Types.PFN_GLVERTEXATTRIBL2DPROC = undefined;
pub var vertexAttribL2dv: Types.PFN_GLVERTEXATTRIBL2DVPROC = undefined;
pub var vertexAttribL3d: Types.PFN_GLVERTEXATTRIBL3DPROC = undefined;
pub var vertexAttribL3dv: Types.PFN_GLVERTEXATTRIBL3DVPROC = undefined;
pub var vertexAttribL4d: Types.PFN_GLVERTEXATTRIBL4DPROC = undefined;
pub var vertexAttribL4dv: Types.PFN_GLVERTEXATTRIBL4DVPROC = undefined;
pub var vertexAttribLFormat: Types.PFN_GLVERTEXATTRIBLFORMATPROC = undefined;
pub var vertexAttribLPointer: Types.PFN_GLVERTEXATTRIBLPOINTERPROC = undefined;
pub var vertexAttribP1ui: Types.PFN_GLVERTEXATTRIBP1UIPROC = undefined;
pub var vertexAttribP1uiv: Types.PFN_GLVERTEXATTRIBP1UIVPROC = undefined;
pub var vertexAttribP2ui: Types.PFN_GLVERTEXATTRIBP2UIPROC = undefined;
pub var vertexAttribP2uiv: Types.PFN_GLVERTEXATTRIBP2UIVPROC = undefined;
pub var vertexAttribP3ui: Types.PFN_GLVERTEXATTRIBP3UIPROC = undefined;
pub var vertexAttribP3uiv: Types.PFN_GLVERTEXATTRIBP3UIVPROC = undefined;
pub var vertexAttribP4ui: Types.PFN_GLVERTEXATTRIBP4UIPROC = undefined;
pub var vertexAttribP4uiv: Types.PFN_GLVERTEXATTRIBP4UIVPROC = undefined;
pub var vertexAttribPointer: Types.PFN_GLVERTEXATTRIBPOINTERPROC = undefined;
pub var vertexBindingDivisor: Types.PFN_GLVERTEXBINDINGDIVISORPROC = undefined;
pub var vertexP2ui: Types.PFN_GLVERTEXP2UIPROC = undefined;
pub var vertexP2uiv: Types.PFN_GLVERTEXP2UIVPROC = undefined;
pub var vertexP3ui: Types.PFN_GLVERTEXP3UIPROC = undefined;
pub var vertexP3uiv: Types.PFN_GLVERTEXP3UIVPROC = undefined;
pub var vertexP4ui: Types.PFN_GLVERTEXP4UIPROC = undefined;
pub var vertexP4uiv: Types.PFN_GLVERTEXP4UIVPROC = undefined;
pub var vertexPointer: Types.PFN_GLVERTEXPOINTERPROC = undefined;
pub var viewport: Types.PFN_GLVIEWPORTPROC = undefined;
pub var viewportArrayv: Types.PFN_GLVIEWPORTARRAYVPROC = undefined;
pub var viewportIndexedf: Types.PFN_GLVIEWPORTINDEXEDFPROC = undefined;
pub var viewportIndexedfv: Types.PFN_GLVIEWPORTINDEXEDFVPROC = undefined;
pub var waitSync: Types.PFN_GLWAITSYNCPROC = undefined;
pub var windowPos2d: Types.PFN_GLWINDOWPOS2DPROC = undefined;
pub var windowPos2dv: Types.PFN_GLWINDOWPOS2DVPROC = undefined;
pub var windowPos2f: Types.PFN_GLWINDOWPOS2FPROC = undefined;
pub var windowPos2fv: Types.PFN_GLWINDOWPOS2FVPROC = undefined;
pub var windowPos2i: Types.PFN_GLWINDOWPOS2IPROC = undefined;
pub var windowPos2iv: Types.PFN_GLWINDOWPOS2IVPROC = undefined;
pub var windowPos2s: Types.PFN_GLWINDOWPOS2SPROC = undefined;
pub var windowPos2sv: Types.PFN_GLWINDOWPOS2SVPROC = undefined;
pub var windowPos3d: Types.PFN_GLWINDOWPOS3DPROC = undefined;
pub var windowPos3dv: Types.PFN_GLWINDOWPOS3DVPROC = undefined;
pub var windowPos3f: Types.PFN_GLWINDOWPOS3FPROC = undefined;
pub var windowPos3fv: Types.PFN_GLWINDOWPOS3FVPROC = undefined;
pub var windowPos3i: Types.PFN_GLWINDOWPOS3IPROC = undefined;
pub var windowPos3iv: Types.PFN_GLWINDOWPOS3IVPROC = undefined;
pub var windowPos3s: Types.PFN_GLWINDOWPOS3SPROC = undefined;

pub fn loadGL() !void {
    accum = try Types.load(Types.PFN_GLACCUMPROC, "glAccum");
    activeShaderProgram = try Types.load(Types.PFN_GLACTIVESHADERPROGRAMPROC, "glActiveShaderProgram");
    activeTexture = try Types.load(Types.PFN_GLACTIVETEXTUREPROC, "glActiveTexture");
    alphaFunc = try Types.load(Types.PFN_GLALPHAFUNCPROC, "glAlphaFunc");
    areTexturesResident = try Types.load(Types.PFN_GLARETEXTURESRESIDENTPROC, "glAreTexturesResident");
    arrayElement = try Types.load(Types.PFN_GLARRAYELEMENTPROC, "glArrayElement");
    attachShader = try Types.load(Types.PFN_GLATTACHSHADERPROC, "glAttachShader");
    begin = try Types.load(Types.PFN_GLBEGINPROC, "glBegin");
    beginConditionalRender = try Types.load(Types.PFN_GLBEGINCONDITIONALRENDERPROC, "glBeginConditionalRender");
    beginQuery = try Types.load(Types.PFN_GLBEGINQUERYPROC, "glBeginQuery");
    beginQueryIndexed = try Types.load(Types.PFN_GLBEGINQUERYINDEXEDPROC, "glBeginQueryIndexed");
    beginTransformFeedback = try Types.load(Types.PFN_GLBEGINTRANSFORMFEEDBACKPROC, "glBeginTransformFeedback");
    bindAttribLocation = try Types.load(Types.PFN_GLBINDATTRIBLOCATIONPROC, "glBindAttribLocation");
    bindBuffer = try Types.load(Types.PFN_GLBINDBUFFERPROC, "glBindBuffer");
    bindBufferBase = try Types.load(Types.PFN_GLBINDBUFFERBASEPROC, "glBindBufferBase");
    bindBufferRange = try Types.load(Types.PFN_GLBINDBUFFERRANGEPROC, "glBindBufferRange");
    bindBuffersBase = try Types.load(Types.PFN_GLBINDBUFFERSBASEPROC, "glBindBuffersBase");
    bindBuffersRange = try Types.load(Types.PFN_GLBINDBUFFERSRANGEPROC, "glBindBuffersRange");
    bindFragDataLocation = try Types.load(Types.PFN_GLBINDFRAGDATALOCATIONPROC, "glBindFragDataLocation");
    bindFragDataLocationIndexed = try Types.load(Types.PFN_GLBINDFRAGDATALOCATIONINDEXEDPROC, "glBindFragDataLocationIndexed");
    bindFramebuffer = try Types.load(Types.PFN_GLBINDFRAMEBUFFERPROC, "glBindFramebuffer");
    bindImageTexture = try Types.load(Types.PFN_GLBINDIMAGETEXTUREPROC, "glBindImageTexture");
    bindImageTextures = try Types.load(Types.PFN_GLBINDIMAGETEXTURESPROC, "glBindImageTextures");
    bindProgramPipeline = try Types.load(Types.PFN_GLBINDPROGRAMPIPELINEPROC, "glBindProgramPipeline");
    bindRenderbuffer = try Types.load(Types.PFN_GLBINDRENDERBUFFERPROC, "glBindRenderbuffer");
    bindSampler = try Types.load(Types.PFN_GLBINDSAMPLERPROC, "glBindSampler");
    bindSamplers = try Types.load(Types.PFN_GLBINDSAMPLERSPROC, "glBindSamplers");
    bindTexture = try Types.load(Types.PFN_GLBINDTEXTUREPROC, "glBindTexture");
    bindTextureUnit = try Types.load(Types.PFN_GLBINDTEXTUREUNITPROC, "glBindTextureUnit");
    bindTextures = try Types.load(Types.PFN_GLBINDTEXTURESPROC, "glBindTextures");
    bindTransformFeedback = try Types.load(Types.PFN_GLBINDTRANSFORMFEEDBACKPROC, "glBindTransformFeedback");
    bindVertexArray = try Types.load(Types.PFN_GLBINDVERTEXARRAYPROC, "glBindVertexArray");
    bindVertexBuffer = try Types.load(Types.PFN_GLBINDVERTEXBUFFERPROC, "glBindVertexBuffer");
    bindVertexBuffers = try Types.load(Types.PFN_GLBINDVERTEXBUFFERSPROC, "glBindVertexBuffers");
    bitmap = try Types.load(Types.PFN_GLBITMAPPROC, "glBitmap");
    blendColor = try Types.load(Types.PFN_GLBLENDCOLORPROC, "glBlendColor");
    blendEquation = try Types.load(Types.PFN_GLBLENDEQUATIONPROC, "glBlendEquation");
    blendEquationSeparate = try Types.load(Types.PFN_GLBLENDEQUATIONSEPARATEPROC, "glBlendEquationSeparate");
    blendEquationSeparatei = try Types.load(Types.PFN_GLBLENDEQUATIONSEPARATEIPROC, "glBlendEquationSeparatei");
    blendEquationi = try Types.load(Types.PFN_GLBLENDEQUATIONIPROC, "glBlendEquationi");
    blendFunc = try Types.load(Types.PFN_GLBLENDFUNCPROC, "glBlendFunc");
    blendFuncSeparate = try Types.load(Types.PFN_GLBLENDFUNCSEPARATEPROC, "glBlendFuncSeparate");
    blendFuncSeparatei = try Types.load(Types.PFN_GLBLENDFUNCSEPARATEIPROC, "glBlendFuncSeparatei");
    blendFunci = try Types.load(Types.PFN_GLBLENDFUNCIPROC, "glBlendFunci");
    blitFramebuffer = try Types.load(Types.PFN_GLBLITFRAMEBUFFERPROC, "glBlitFramebuffer");
    blitNamedFramebuffer = try Types.load(Types.PFN_GLBLITNAMEDFRAMEBUFFERPROC, "glBlitNamedFramebuffer");
    bufferData = try Types.load(Types.PFN_GLBUFFERDATAPROC, "glBufferData");
    bufferStorage = try Types.load(Types.PFN_GLBUFFERSTORAGEPROC, "glBufferStorage");
    bufferSubData = try Types.load(Types.PFN_GLBUFFERSUBDATAPROC, "glBufferSubData");
    callList = try Types.load(Types.PFN_GLCALLLISTPROC, "glCallList");
    callLists = try Types.load(Types.PFN_GLCALLLISTSPROC, "glCallLists");
    checkFramebufferStatus = try Types.load(Types.PFN_GLCHECKFRAMEBUFFERSTATUSPROC, "glCheckFramebufferStatus");
    checkNamedFramebufferStatus = try Types.load(Types.PFN_GLCHECKNAMEDFRAMEBUFFERSTATUSPROC, "glCheckNamedFramebufferStatus");
    clampColor = try Types.load(Types.PFN_GLCLAMPCOLORPROC, "glClampColor");
    clear = try Types.load(Types.PFN_GLCLEARPROC, "glClear");
    clearAccum = try Types.load(Types.PFN_GLCLEARACCUMPROC, "glClearAccum");
    clearBufferData = try Types.load(Types.PFN_GLCLEARBUFFERDATAPROC, "glClearBufferData");
    clearBufferSubData = try Types.load(Types.PFN_GLCLEARBUFFERSUBDATAPROC, "glClearBufferSubData");
    clearBufferfi = try Types.load(Types.PFN_GLCLEARBUFFERFIPROC, "glClearBufferfi");
    clearBufferfv = try Types.load(Types.PFN_GLCLEARBUFFERFVPROC, "glClearBufferfv");
    clearBufferiv = try Types.load(Types.PFN_GLCLEARBUFFERIVPROC, "glClearBufferiv");
    clearBufferuiv = try Types.load(Types.PFN_GLCLEARBUFFERUIVPROC, "glClearBufferuiv");
    clearColor = try Types.load(Types.PFN_GLCLEARCOLORPROC, "glClearColor");
    clearDepth = try Types.load(Types.PFN_GLCLEARDEPTHPROC, "glClearDepth");
    clearDepthf = try Types.load(Types.PFN_GLCLEARDEPTHFPROC, "glClearDepthf");
    clearIndex = try Types.load(Types.PFN_GLCLEARINDEXPROC, "glClearIndex");
    clearNamedBufferData = try Types.load(Types.PFN_GLCLEARNAMEDBUFFERDATAPROC, "glClearNamedBufferData");
    clearNamedBufferSubData = try Types.load(Types.PFN_GLCLEARNAMEDBUFFERSUBDATAPROC, "glClearNamedBufferSubData");
    clearNamedFramebufferfi = try Types.load(Types.PFN_GLCLEARNAMEDFRAMEBUFFERFIPROC, "glClearNamedFramebufferfi");
    clearNamedFramebufferfv = try Types.load(Types.PFN_GLCLEARNAMEDFRAMEBUFFERFVPROC, "glClearNamedFramebufferfv");
    clearNamedFramebufferiv = try Types.load(Types.PFN_GLCLEARNAMEDFRAMEBUFFERIVPROC, "glClearNamedFramebufferiv");
    clearNamedFramebufferuiv = try Types.load(Types.PFN_GLCLEARNAMEDFRAMEBUFFERUIVPROC, "glClearNamedFramebufferuiv");
    clearStencil = try Types.load(Types.PFN_GLCLEARSTENCILPROC, "glClearStencil");
    clearTexImage = try Types.load(Types.PFN_GLCLEARTEXIMAGEPROC, "glClearTexImage");
    clearTexSubImage = try Types.load(Types.PFN_GLCLEARTEXSUBIMAGEPROC, "glClearTexSubImage");
    clientActiveTexture = try Types.load(Types.PFN_GLCLIENTACTIVETEXTUREPROC, "glClientActiveTexture");
    clientWaitSync = try Types.load(Types.PFN_GLCLIENTWAITSYNCPROC, "glClientWaitSync");
    clipControl = try Types.load(Types.PFN_GLCLIPCONTROLPROC, "glClipControl");
    clipPlane = try Types.load(Types.PFN_GLCLIPPLANEPROC, "glClipPlane");
    color3b = try Types.load(Types.PFN_GLCOLOR3BPROC, "glColor3b");
    color3bv = try Types.load(Types.PFN_GLCOLOR3BVPROC, "glColor3bv");
    color3d = try Types.load(Types.PFN_GLCOLOR3DPROC, "glColor3d");
    color3dv = try Types.load(Types.PFN_GLCOLOR3DVPROC, "glColor3dv");
    color3f = try Types.load(Types.PFN_GLCOLOR3FPROC, "glColor3f");
    color3fv = try Types.load(Types.PFN_GLCOLOR3FVPROC, "glColor3fv");
    color3i = try Types.load(Types.PFN_GLCOLOR3IPROC, "glColor3i");
    color3iv = try Types.load(Types.PFN_GLCOLOR3IVPROC, "glColor3iv");
    color3s = try Types.load(Types.PFN_GLCOLOR3SPROC, "glColor3s");
    color3sv = try Types.load(Types.PFN_GLCOLOR3SVPROC, "glColor3sv");
    color3ub = try Types.load(Types.PFN_GLCOLOR3UBPROC, "glColor3ub");
    color3ubv = try Types.load(Types.PFN_GLCOLOR3UBVPROC, "glColor3ubv");
    color3ui = try Types.load(Types.PFN_GLCOLOR3UIPROC, "glColor3ui");
    color3uiv = try Types.load(Types.PFN_GLCOLOR3UIVPROC, "glColor3uiv");
    color3us = try Types.load(Types.PFN_GLCOLOR3USPROC, "glColor3us");
    color3usv = try Types.load(Types.PFN_GLCOLOR3USVPROC, "glColor3usv");
    color4b = try Types.load(Types.PFN_GLCOLOR4BPROC, "glColor4b");
    color4bv = try Types.load(Types.PFN_GLCOLOR4BVPROC, "glColor4bv");
    color4d = try Types.load(Types.PFN_GLCOLOR4DPROC, "glColor4d");
    color4dv = try Types.load(Types.PFN_GLCOLOR4DVPROC, "glColor4dv");
    color4f = try Types.load(Types.PFN_GLCOLOR4FPROC, "glColor4f");
    color4fv = try Types.load(Types.PFN_GLCOLOR4FVPROC, "glColor4fv");
    color4i = try Types.load(Types.PFN_GLCOLOR4IPROC, "glColor4i");
    color4iv = try Types.load(Types.PFN_GLCOLOR4IVPROC, "glColor4iv");
    color4s = try Types.load(Types.PFN_GLCOLOR4SPROC, "glColor4s");
    color4sv = try Types.load(Types.PFN_GLCOLOR4SVPROC, "glColor4sv");
    color4ub = try Types.load(Types.PFN_GLCOLOR4UBPROC, "glColor4ub");
    color4ubv = try Types.load(Types.PFN_GLCOLOR4UBVPROC, "glColor4ubv");
    color4ui = try Types.load(Types.PFN_GLCOLOR4UIPROC, "glColor4ui");
    color4uiv = try Types.load(Types.PFN_GLCOLOR4UIVPROC, "glColor4uiv");
    color4us = try Types.load(Types.PFN_GLCOLOR4USPROC, "glColor4us");
    color4usv = try Types.load(Types.PFN_GLCOLOR4USVPROC, "glColor4usv");
    colorMask = try Types.load(Types.PFN_GLCOLORMASKPROC, "glColorMask");
    colorMaski = try Types.load(Types.PFN_GLCOLORMASKIPROC, "glColorMaski");
    colorMaterial = try Types.load(Types.PFN_GLCOLORMATERIALPROC, "glColorMaterial");
    colorP3ui = try Types.load(Types.PFN_GLCOLORP3UIPROC, "glColorP3ui");
    colorP3uiv = try Types.load(Types.PFN_GLCOLORP3UIVPROC, "glColorP3uiv");
    colorP4ui = try Types.load(Types.PFN_GLCOLORP4UIPROC, "glColorP4ui");
    colorP4uiv = try Types.load(Types.PFN_GLCOLORP4UIVPROC, "glColorP4uiv");
    colorPointer = try Types.load(Types.PFN_GLCOLORPOINTERPROC, "glColorPointer");
    compileShader = try Types.load(Types.PFN_GLCOMPILESHADERPROC, "glCompileShader");
    compressedTexImage1D = try Types.load(Types.PFN_GLCOMPRESSEDTEXIMAGE1DPROC, "glCompressedTexImage1D");
    compressedTexImage2D = try Types.load(Types.PFN_GLCOMPRESSEDTEXIMAGE2DPROC, "glCompressedTexImage2D");
    compressedTexImage3D = try Types.load(Types.PFN_GLCOMPRESSEDTEXIMAGE3DPROC, "glCompressedTexImage3D");
    compressedTexSubImage1D = try Types.load(Types.PFN_GLCOMPRESSEDTEXSUBIMAGE1DPROC, "glCompressedTexSubImage1D");
    compressedTexSubImage2D = try Types.load(Types.PFN_GLCOMPRESSEDTEXSUBIMAGE2DPROC, "glCompressedTexSubImage2D");
    compressedTexSubImage3D = try Types.load(Types.PFN_GLCOMPRESSEDTEXSUBIMAGE3DPROC, "glCompressedTexSubImage3D");
    compressedTextureSubImage1D = try Types.load(Types.PFN_GLCOMPRESSEDTEXTURESUBIMAGE1DPROC, "glCompressedTextureSubImage1D");
    compressedTextureSubImage2D = try Types.load(Types.PFN_GLCOMPRESSEDTEXTURESUBIMAGE2DPROC, "glCompressedTextureSubImage2D");
    compressedTextureSubImage3D = try Types.load(Types.PFN_GLCOMPRESSEDTEXTURESUBIMAGE3DPROC, "glCompressedTextureSubImage3D");
    copyBufferSubData = try Types.load(Types.PFN_GLCOPYBUFFERSUBDATAPROC, "glCopyBufferSubData");
    copyImageSubData = try Types.load(Types.PFN_GLCOPYIMAGESUBDATAPROC, "glCopyImageSubData");
    copyNamedBufferSubData = try Types.load(Types.PFN_GLCOPYNAMEDBUFFERSUBDATAPROC, "glCopyNamedBufferSubData");
    copyPixels = try Types.load(Types.PFN_GLCOPYPIXELSPROC, "glCopyPixels");
    copyTexImage1D = try Types.load(Types.PFN_GLCOPYTEXIMAGE1DPROC, "glCopyTexImage1D");
    copyTexImage2D = try Types.load(Types.PFN_GLCOPYTEXIMAGE2DPROC, "glCopyTexImage2D");
    copyTexSubImage1D = try Types.load(Types.PFN_GLCOPYTEXSUBIMAGE1DPROC, "glCopyTexSubImage1D");
    copyTexSubImage2D = try Types.load(Types.PFN_GLCOPYTEXSUBIMAGE2DPROC, "glCopyTexSubImage2D");
    copyTexSubImage3D = try Types.load(Types.PFN_GLCOPYTEXSUBIMAGE3DPROC, "glCopyTexSubImage3D");
    copyTextureSubImage1D = try Types.load(Types.PFN_GLCOPYTEXTURESUBIMAGE1DPROC, "glCopyTextureSubImage1D");
    copyTextureSubImage2D = try Types.load(Types.PFN_GLCOPYTEXTURESUBIMAGE2DPROC, "glCopyTextureSubImage2D");
    copyTextureSubImage3D = try Types.load(Types.PFN_GLCOPYTEXTURESUBIMAGE3DPROC, "glCopyTextureSubImage3D");
    createBuffers = try Types.load(Types.PFN_GLCREATEBUFFERSPROC, "glCreateBuffers");
    createFramebuffers = try Types.load(Types.PFN_GLCREATEFRAMEBUFFERSPROC, "glCreateFramebuffers");
    createProgram = try Types.load(Types.PFN_GLCREATEPROGRAMPROC, "glCreateProgram");
    createProgramPipelines = try Types.load(Types.PFN_GLCREATEPROGRAMPIPELINESPROC, "glCreateProgramPipelines");
    createQueries = try Types.load(Types.PFN_GLCREATEQUERIESPROC, "glCreateQueries");
    createRenderbuffers = try Types.load(Types.PFN_GLCREATERENDERBUFFERSPROC, "glCreateRenderbuffers");
    createSamplers = try Types.load(Types.PFN_GLCREATESAMPLERSPROC, "glCreateSamplers");
    createShader = try Types.load(Types.PFN_GLCREATESHADERPROC, "glCreateShader");
    createShaderProgramv = try Types.load(Types.PFN_GLCREATESHADERPROGRAMVPROC, "glCreateShaderProgramv");
    createTextures = try Types.load(Types.PFN_GLCREATETEXTURESPROC, "glCreateTextures");
    createTransformFeedbacks = try Types.load(Types.PFN_GLCREATETRANSFORMFEEDBACKSPROC, "glCreateTransformFeedbacks");
    createVertexArrays = try Types.load(Types.PFN_GLCREATEVERTEXARRAYSPROC, "glCreateVertexArrays");
    cullFace = try Types.load(Types.PFN_GLCULLFACEPROC, "glCullFace");
    debugMessageCallback = try Types.load(Types.PFN_GLDEBUGMESSAGECALLBACKPROC, "glDebugMessageCallback");
    debugMessageControl = try Types.load(Types.PFN_GLDEBUGMESSAGECONTROLPROC, "glDebugMessageControl");
    debugMessageInsert = try Types.load(Types.PFN_GLDEBUGMESSAGEINSERTPROC, "glDebugMessageInsert");
    deleteBuffers = try Types.load(Types.PFN_GLDELETEBUFFERSPROC, "glDeleteBuffers");
    deleteFramebuffers = try Types.load(Types.PFN_GLDELETEFRAMEBUFFERSPROC, "glDeleteFramebuffers");
    deleteLists = try Types.load(Types.PFN_GLDELETELISTSPROC, "glDeleteLists");
    deleteProgram = try Types.load(Types.PFN_GLDELETEPROGRAMPROC, "glDeleteProgram");
    deleteProgramPipelines = try Types.load(Types.PFN_GLDELETEPROGRAMPIPELINESPROC, "glDeleteProgramPipelines");
    deleteQueries = try Types.load(Types.PFN_GLDELETEQUERIESPROC, "glDeleteQueries");
    deleteRenderbuffers = try Types.load(Types.PFN_GLDELETERENDERBUFFERSPROC, "glDeleteRenderbuffers");
    deleteSamplers = try Types.load(Types.PFN_GLDELETESAMPLERSPROC, "glDeleteSamplers");
    deleteShader = try Types.load(Types.PFN_GLDELETESHADERPROC, "glDeleteShader");
    deleteSync = try Types.load(Types.PFN_GLDELETESYNCPROC, "glDeleteSync");
    deleteTextures = try Types.load(Types.PFN_GLDELETETEXTURESPROC, "glDeleteTextures");
    deleteTransformFeedbacks = try Types.load(Types.PFN_GLDELETETRANSFORMFEEDBACKSPROC, "glDeleteTransformFeedbacks");
    deleteVertexArrays = try Types.load(Types.PFN_GLDELETEVERTEXARRAYSPROC, "glDeleteVertexArrays");
    depthFunc = try Types.load(Types.PFN_GLDEPTHFUNCPROC, "glDepthFunc");
    depthMask = try Types.load(Types.PFN_GLDEPTHMASKPROC, "glDepthMask");
    depthRange = try Types.load(Types.PFN_GLDEPTHRANGEPROC, "glDepthRange");
    depthRangeArrayv = try Types.load(Types.PFN_GLDEPTHRANGEARRAYVPROC, "glDepthRangeArrayv");
    depthRangeIndexed = try Types.load(Types.PFN_GLDEPTHRANGEINDEXEDPROC, "glDepthRangeIndexed");
    depthRangef = try Types.load(Types.PFN_GLDEPTHRANGEFPROC, "glDepthRangef");
    detachShader = try Types.load(Types.PFN_GLDETACHSHADERPROC, "glDetachShader");
    disable = try Types.load(Types.PFN_GLDISABLEPROC, "glDisable");
    disableClientState = try Types.load(Types.PFN_GLDISABLECLIENTSTATEPROC, "glDisableClientState");
    disableVertexArrayAttrib = try Types.load(Types.PFN_GLDISABLEVERTEXARRAYATTRIBPROC, "glDisableVertexArrayAttrib");
    disableVertexAttribArray = try Types.load(Types.PFN_GLDISABLEVERTEXATTRIBARRAYPROC, "glDisableVertexAttribArray");
    disablei = try Types.load(Types.PFN_GLDISABLEIPROC, "glDisablei");
    dispatchCompute = try Types.load(Types.PFN_GLDISPATCHCOMPUTEPROC, "glDispatchCompute");
    dispatchComputeIndirect = try Types.load(Types.PFN_GLDISPATCHCOMPUTEINDIRECTPROC, "glDispatchComputeIndirect");
    drawArrays = try Types.load(Types.PFN_GLDRAWARRAYSPROC, "glDrawArrays");
    drawArraysIndirect = try Types.load(Types.PFN_GLDRAWARRAYSINDIRECTPROC, "glDrawArraysIndirect");
    drawArraysInstanced = try Types.load(Types.PFN_GLDRAWARRAYSINSTANCEDPROC, "glDrawArraysInstanced");
    drawArraysInstancedBaseInstance = try Types.load(Types.PFN_GLDRAWARRAYSINSTANCEDBASEINSTANCEPROC, "glDrawArraysInstancedBaseInstance");
    drawBuffer = try Types.load(Types.PFN_GLDRAWBUFFERPROC, "glDrawBuffer");
    drawBuffers = try Types.load(Types.PFN_GLDRAWBUFFERSPROC, "glDrawBuffers");
    drawElements = try Types.load(Types.PFN_GLDRAWELEMENTSPROC, "glDrawElements");
    drawElementsBaseVertex = try Types.load(Types.PFN_GLDRAWELEMENTSBASEVERTEXPROC, "glDrawElementsBaseVertex");
    drawElementsIndirect = try Types.load(Types.PFN_GLDRAWELEMENTSINDIRECTPROC, "glDrawElementsIndirect");
    drawElementsInstanced = try Types.load(Types.PFN_GLDRAWELEMENTSINSTANCEDPROC, "glDrawElementsInstanced");
    drawElementsInstancedBaseInstance = try Types.load(Types.PFN_GLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC, "glDrawElementsInstancedBaseInstance");
    drawElementsInstancedBaseVertex = try Types.load(Types.PFN_GLDRAWELEMENTSINSTANCEDBASEVERTEXPROC, "glDrawElementsInstancedBaseVertex");
    drawElementsInstancedBaseVertexBaseInstance = try Types.load(Types.PFN_GLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC, "glDrawElementsInstancedBaseVertexBaseInstance");
    drawPixels = try Types.load(Types.PFN_GLDRAWPIXELSPROC, "glDrawPixels");
    drawRangeElements = try Types.load(Types.PFN_GLDRAWRANGEELEMENTSPROC, "glDrawRangeElements");
    drawRangeElementsBaseVertex = try Types.load(Types.PFN_GLDRAWRANGEELEMENTSBASEVERTEXPROC, "glDrawRangeElementsBaseVertex");
    drawTransformFeedback = try Types.load(Types.PFN_GLDRAWTRANSFORMFEEDBACKPROC, "glDrawTransformFeedback");
    drawTransformFeedbackInstanced = try Types.load(Types.PFN_GLDRAWTRANSFORMFEEDBACKINSTANCEDPROC, "glDrawTransformFeedbackInstanced");
    drawTransformFeedbackStream = try Types.load(Types.PFN_GLDRAWTRANSFORMFEEDBACKSTREAMPROC, "glDrawTransformFeedbackStream");
    drawTransformFeedbackStreamInstanced = try Types.load(Types.PFN_GLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC, "glDrawTransformFeedbackStreamInstanced");
    edgeFlag = try Types.load(Types.PFN_GLEDGEFLAGPROC, "glEdgeFlag");
    edgeFlagPointer = try Types.load(Types.PFN_GLEDGEFLAGPOINTERPROC, "glEdgeFlagPointer");
    edgeFlagv = try Types.load(Types.PFN_GLEDGEFLAGVPROC, "glEdgeFlagv");
    enable = try Types.load(Types.PFN_GLENABLEPROC, "glEnable");
    enableClientState = try Types.load(Types.PFN_GLENABLECLIENTSTATEPROC, "glEnableClientState");
    enableVertexArrayAttrib = try Types.load(Types.PFN_GLENABLEVERTEXARRAYATTRIBPROC, "glEnableVertexArrayAttrib");
    enableVertexAttribArray = try Types.load(Types.PFN_GLENABLEVERTEXATTRIBARRAYPROC, "glEnableVertexAttribArray");
    enablei = try Types.load(Types.PFN_GLENABLEIPROC, "glEnablei");
    end = try Types.load(Types.PFN_GLENDPROC, "glEnd");
    endConditionalRender = try Types.load(Types.PFN_GLENDCONDITIONALRENDERPROC, "glEndConditionalRender");
    endList = try Types.load(Types.PFN_GLENDLISTPROC, "glEndList");
    endQuery = try Types.load(Types.PFN_GLENDQUERYPROC, "glEndQuery");
    endQueryIndexed = try Types.load(Types.PFN_GLENDQUERYINDEXEDPROC, "glEndQueryIndexed");
    endTransformFeedback = try Types.load(Types.PFN_GLENDTRANSFORMFEEDBACKPROC, "glEndTransformFeedback");
    evalCoord1d = try Types.load(Types.PFN_GLEVALCOORD1DPROC, "glEvalCoord1d");
    evalCoord1dv = try Types.load(Types.PFN_GLEVALCOORD1DVPROC, "glEvalCoord1dv");
    evalCoord1f = try Types.load(Types.PFN_GLEVALCOORD1FPROC, "glEvalCoord1f");
    evalCoord1fv = try Types.load(Types.PFN_GLEVALCOORD1FVPROC, "glEvalCoord1fv");
    evalCoord2d = try Types.load(Types.PFN_GLEVALCOORD2DPROC, "glEvalCoord2d");
    evalCoord2dv = try Types.load(Types.PFN_GLEVALCOORD2DVPROC, "glEvalCoord2dv");
    evalCoord2f = try Types.load(Types.PFN_GLEVALCOORD2FPROC, "glEvalCoord2f");
    evalCoord2fv = try Types.load(Types.PFN_GLEVALCOORD2FVPROC, "glEvalCoord2fv");
    evalMesh1 = try Types.load(Types.PFN_GLEVALMESH1PROC, "glEvalMesh1");
    evalMesh2 = try Types.load(Types.PFN_GLEVALMESH2PROC, "glEvalMesh2");
    evalPoint1 = try Types.load(Types.PFN_GLEVALPOINT1PROC, "glEvalPoint1");
    evalPoint2 = try Types.load(Types.PFN_GLEVALPOINT2PROC, "glEvalPoint2");
    feedbackBuffer = try Types.load(Types.PFN_GLFEEDBACKBUFFERPROC, "glFeedbackBuffer");
    fenceSync = try Types.load(Types.PFN_GLFENCESYNCPROC, "glFenceSync");
    finish = try Types.load(Types.PFN_GLFINISHPROC, "glFinish");
    flush = try Types.load(Types.PFN_GLFLUSHPROC, "glFlush");
    flushMappedBufferRange = try Types.load(Types.PFN_GLFLUSHMAPPEDBUFFERRANGEPROC, "glFlushMappedBufferRange");
    flushMappedNamedBufferRange = try Types.load(Types.PFN_GLFLUSHMAPPEDNAMEDBUFFERRANGEPROC, "glFlushMappedNamedBufferRange");
    fogCoordPointer = try Types.load(Types.PFN_GLFOGCOORDPOINTERPROC, "glFogCoordPointer");
    fogCoordd = try Types.load(Types.PFN_GLFOGCOORDDPROC, "glFogCoordd");
    fogCoorddv = try Types.load(Types.PFN_GLFOGCOORDDVPROC, "glFogCoorddv");
    fogCoordf = try Types.load(Types.PFN_GLFOGCOORDFPROC, "glFogCoordf");
    fogCoordfv = try Types.load(Types.PFN_GLFOGCOORDFVPROC, "glFogCoordfv");
    fogf = try Types.load(Types.PFN_GLFOGFPROC, "glFogf");
    fogfv = try Types.load(Types.PFN_GLFOGFVPROC, "glFogfv");
    fogi = try Types.load(Types.PFN_GLFOGIPROC, "glFogi");
    fogiv = try Types.load(Types.PFN_GLFOGIVPROC, "glFogiv");
    framebufferParameteri = try Types.load(Types.PFN_GLFRAMEBUFFERPARAMETERIPROC, "glFramebufferParameteri");
    framebufferRenderbuffer = try Types.load(Types.PFN_GLFRAMEBUFFERRENDERBUFFERPROC, "glFramebufferRenderbuffer");
    framebufferTexture = try Types.load(Types.PFN_GLFRAMEBUFFERTEXTUREPROC, "glFramebufferTexture");
    framebufferTexture1D = try Types.load(Types.PFN_GLFRAMEBUFFERTEXTURE1DPROC, "glFramebufferTexture1D");
    framebufferTexture2D = try Types.load(Types.PFN_GLFRAMEBUFFERTEXTURE2DPROC, "glFramebufferTexture2D");
    framebufferTexture3D = try Types.load(Types.PFN_GLFRAMEBUFFERTEXTURE3DPROC, "glFramebufferTexture3D");
    framebufferTextureLayer = try Types.load(Types.PFN_GLFRAMEBUFFERTEXTURELAYERPROC, "glFramebufferTextureLayer");
    frontFace = try Types.load(Types.PFN_GLFRONTFACEPROC, "glFrontFace");
    frustum = try Types.load(Types.PFN_GLFRUSTUMPROC, "glFrustum");
    genBuffers = try Types.load(Types.PFN_GLGENBUFFERSPROC, "glGenBuffers");
    genFramebuffers = try Types.load(Types.PFN_GLGENFRAMEBUFFERSPROC, "glGenFramebuffers");
    genLists = try Types.load(Types.PFN_GLGENLISTSPROC, "glGenLists");
    genProgramPipelines = try Types.load(Types.PFN_GLGENPROGRAMPIPELINESPROC, "glGenProgramPipelines");
    genQueries = try Types.load(Types.PFN_GLGENQUERIESPROC, "glGenQueries");
    genRenderbuffers = try Types.load(Types.PFN_GLGENRENDERBUFFERSPROC, "glGenRenderbuffers");
    genSamplers = try Types.load(Types.PFN_GLGENSAMPLERSPROC, "glGenSamplers");
    genTextures = try Types.load(Types.PFN_GLGENTEXTURESPROC, "glGenTextures");
    genTransformFeedbacks = try Types.load(Types.PFN_GLGENTRANSFORMFEEDBACKSPROC, "glGenTransformFeedbacks");
    genVertexArrays = try Types.load(Types.PFN_GLGENVERTEXARRAYSPROC, "glGenVertexArrays");
    generateMipmap = try Types.load(Types.PFN_GLGENERATEMIPMAPPROC, "glGenerateMipmap");
    generateTextureMipmap = try Types.load(Types.PFN_GLGENERATETEXTUREMIPMAPPROC, "glGenerateTextureMipmap");
    getActiveAtomicCounterBufferiv = try Types.load(Types.PFN_GLGETACTIVEATOMICCOUNTERBUFFERIVPROC, "glGetActiveAtomicCounterBufferiv");
    getActiveAttrib = try Types.load(Types.PFN_GLGETACTIVEATTRIBPROC, "glGetActiveAttrib");
    getActiveSubroutineName = try Types.load(Types.PFN_GLGETACTIVESUBROUTINENAMEPROC, "glGetActiveSubroutineName");
    getActiveSubroutineUniformName = try Types.load(Types.PFN_GLGETACTIVESUBROUTINEUNIFORMNAMEPROC, "glGetActiveSubroutineUniformName");
    getActiveSubroutineUniformiv = try Types.load(Types.PFN_GLGETACTIVESUBROUTINEUNIFORMIVPROC, "glGetActiveSubroutineUniformiv");
    getActiveUniform = try Types.load(Types.PFN_GLGETACTIVEUNIFORMPROC, "glGetActiveUniform");
    getActiveUniformBlockName = try Types.load(Types.PFN_GLGETACTIVEUNIFORMBLOCKNAMEPROC, "glGetActiveUniformBlockName");
    getActiveUniformBlockiv = try Types.load(Types.PFN_GLGETACTIVEUNIFORMBLOCKIVPROC, "glGetActiveUniformBlockiv");
    getActiveUniformName = try Types.load(Types.PFN_GLGETACTIVEUNIFORMNAMEPROC, "glGetActiveUniformName");
    getActiveUniformsiv = try Types.load(Types.PFN_GLGETACTIVEUNIFORMSIVPROC, "glGetActiveUniformsiv");
    getAttachedShaders = try Types.load(Types.PFN_GLGETATTACHEDSHADERSPROC, "glGetAttachedShaders");
    getAttribLocation = try Types.load(Types.PFN_GLGETATTRIBLOCATIONPROC, "glGetAttribLocation");
    getBooleani_v = try Types.load(Types.PFN_GLGETBOOLEANI_VPROC, "glGetBooleani_v");
    getBooleanv = try Types.load(Types.PFN_GLGETBOOLEANVPROC, "glGetBooleanv");
    getBufferParameteri64v = try Types.load(Types.PFN_GLGETBUFFERPARAMETERI64VPROC, "glGetBufferParameteri64v");
    getBufferParameteriv = try Types.load(Types.PFN_GLGETBUFFERPARAMETERIVPROC, "glGetBufferParameteriv");
    getBufferPointerv = try Types.load(Types.PFN_GLGETBUFFERPOINTERVPROC, "glGetBufferPointerv");
    getBufferSubData = try Types.load(Types.PFN_GLGETBUFFERSUBDATAPROC, "glGetBufferSubData");
    getClipPlane = try Types.load(Types.PFN_GLGETCLIPPLANEPROC, "glGetClipPlane");
    getCompressedTexImage = try Types.load(Types.PFN_GLGETCOMPRESSEDTEXIMAGEPROC, "glGetCompressedTexImage");
    getCompressedTextureImage = try Types.load(Types.PFN_GLGETCOMPRESSEDTEXTUREIMAGEPROC, "glGetCompressedTextureImage");
    getCompressedTextureSubImage = try Types.load(Types.PFN_GLGETCOMPRESSEDTEXTURESUBIMAGEPROC, "glGetCompressedTextureSubImage");
    getDebugMessageLog = try Types.load(Types.PFN_GLGETDEBUGMESSAGELOGPROC, "glGetDebugMessageLog");
    getDoublei_v = try Types.load(Types.PFN_GLGETDOUBLEI_VPROC, "glGetDoublei_v");
    getDoublev = try Types.load(Types.PFN_GLGETDOUBLEVPROC, "glGetDoublev");
    getError = try Types.load(Types.PFN_GLGETERRORPROC, "glGetError");
    getFloati_v = try Types.load(Types.PFN_GLGETFLOATI_VPROC, "glGetFloati_v");
    getFloatv = try Types.load(Types.PFN_GLGETFLOATVPROC, "glGetFloatv");
    getFragDataIndex = try Types.load(Types.PFN_GLGETFRAGDATAINDEXPROC, "glGetFragDataIndex");
    getFragDataLocation = try Types.load(Types.PFN_GLGETFRAGDATALOCATIONPROC, "glGetFragDataLocation");
    getFramebufferAttachmentParameteriv = try Types.load(Types.PFN_GLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC, "glGetFramebufferAttachmentParameteriv");
    getFramebufferParameteriv = try Types.load(Types.PFN_GLGETFRAMEBUFFERPARAMETERIVPROC, "glGetFramebufferParameteriv");
    getGraphicsResetStatus = try Types.load(Types.PFN_GLGETGRAPHICSRESETSTATUSPROC, "glGetGraphicsResetStatus");
    getInteger64i_v = try Types.load(Types.PFN_GLGETINTEGER64I_VPROC, "glGetInteger64i_v");
    getInteger64v = try Types.load(Types.PFN_GLGETINTEGER64VPROC, "glGetInteger64v");
    getIntegeri_v = try Types.load(Types.PFN_GLGETINTEGERI_VPROC, "glGetIntegeri_v");
    getIntegerv = try Types.load(Types.PFN_GLGETINTEGERVPROC, "glGetIntegerv");
    getInternalformati64v = try Types.load(Types.PFN_GLGETINTERNALFORMATI64VPROC, "glGetInternalformati64v");
    getInternalformativ = try Types.load(Types.PFN_GLGETINTERNALFORMATIVPROC, "glGetInternalformativ");
    getLightfv = try Types.load(Types.PFN_GLGETLIGHTFVPROC, "glGetLightfv");
    getLightiv = try Types.load(Types.PFN_GLGETLIGHTIVPROC, "glGetLightiv");
    getMapdv = try Types.load(Types.PFN_GLGETMAPDVPROC, "glGetMapdv");
    getMapfv = try Types.load(Types.PFN_GLGETMAPFVPROC, "glGetMapfv");
    getMapiv = try Types.load(Types.PFN_GLGETMAPIVPROC, "glGetMapiv");
    getMaterialfv = try Types.load(Types.PFN_GLGETMATERIALFVPROC, "glGetMaterialfv");
    getMaterialiv = try Types.load(Types.PFN_GLGETMATERIALIVPROC, "glGetMaterialiv");
    getMultisamplefv = try Types.load(Types.PFN_GLGETMULTISAMPLEFVPROC, "glGetMultisamplefv");
    getNamedBufferParameteri64v = try Types.load(Types.PFN_GLGETNAMEDBUFFERPARAMETERI64VPROC, "glGetNamedBufferParameteri64v");
    getNamedBufferParameteriv = try Types.load(Types.PFN_GLGETNAMEDBUFFERPARAMETERIVPROC, "glGetNamedBufferParameteriv");
    getNamedBufferPointerv = try Types.load(Types.PFN_GLGETNAMEDBUFFERPOINTERVPROC, "glGetNamedBufferPointerv");
    getNamedBufferSubData = try Types.load(Types.PFN_GLGETNAMEDBUFFERSUBDATAPROC, "glGetNamedBufferSubData");
    getNamedFramebufferAttachmentParameteriv = try Types.load(Types.PFN_GLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC, "glGetNamedFramebufferAttachmentParameteriv");
    getNamedFramebufferParameteriv = try Types.load(Types.PFN_GLGETNAMEDFRAMEBUFFERPARAMETERIVPROC, "glGetNamedFramebufferParameteriv");
    getNamedRenderbufferParameteriv = try Types.load(Types.PFN_GLGETNAMEDRENDERBUFFERPARAMETERIVPROC, "glGetNamedRenderbufferParameteriv");
    getObjectLabel = try Types.load(Types.PFN_GLGETOBJECTLABELPROC, "glGetObjectLabel");
    getObjectPtrLabel = try Types.load(Types.PFN_GLGETOBJECTPTRLABELPROC, "glGetObjectPtrLabel");
    getPixelMapfv = try Types.load(Types.PFN_GLGETPIXELMAPFVPROC, "glGetPixelMapfv");
    getPixelMapuiv = try Types.load(Types.PFN_GLGETPIXELMAPUIVPROC, "glGetPixelMapuiv");
    getPixelMapusv = try Types.load(Types.PFN_GLGETPIXELMAPUSVPROC, "glGetPixelMapusv");
    getPointerv = try Types.load(Types.PFN_GLGETPOINTERVPROC, "glGetPointerv");
    getPolygonStipple = try Types.load(Types.PFN_GLGETPOLYGONSTIPPLEPROC, "glGetPolygonStipple");
    getProgramBinary = try Types.load(Types.PFN_GLGETPROGRAMBINARYPROC, "glGetProgramBinary");
    getProgramInfoLog = try Types.load(Types.PFN_GLGETPROGRAMINFOLOGPROC, "glGetProgramInfoLog");
    getProgramInterfaceiv = try Types.load(Types.PFN_GLGETPROGRAMINTERFACEIVPROC, "glGetProgramInterfaceiv");
    getProgramPipelineInfoLog = try Types.load(Types.PFN_GLGETPROGRAMPIPELINEINFOLOGPROC, "glGetProgramPipelineInfoLog");
    getProgramPipelineiv = try Types.load(Types.PFN_GLGETPROGRAMPIPELINEIVPROC, "glGetProgramPipelineiv");
    getProgramResourceIndex = try Types.load(Types.PFN_GLGETPROGRAMRESOURCEINDEXPROC, "glGetProgramResourceIndex");
    getProgramResourceLocation = try Types.load(Types.PFN_GLGETPROGRAMRESOURCELOCATIONPROC, "glGetProgramResourceLocation");
    getProgramResourceLocationIndex = try Types.load(Types.PFN_GLGETPROGRAMRESOURCELOCATIONINDEXPROC, "glGetProgramResourceLocationIndex");
    getProgramResourceName = try Types.load(Types.PFN_GLGETPROGRAMRESOURCENAMEPROC, "glGetProgramResourceName");
    getProgramResourceiv = try Types.load(Types.PFN_GLGETPROGRAMRESOURCEIVPROC, "glGetProgramResourceiv");
    getProgramStageiv = try Types.load(Types.PFN_GLGETPROGRAMSTAGEIVPROC, "glGetProgramStageiv");
    getProgramiv = try Types.load(Types.PFN_GLGETPROGRAMIVPROC, "glGetProgramiv");
    getQueryBufferObjecti64v = try Types.load(Types.PFN_GLGETQUERYBUFFEROBJECTI64VPROC, "glGetQueryBufferObjecti64v");
    getQueryBufferObjectiv = try Types.load(Types.PFN_GLGETQUERYBUFFEROBJECTIVPROC, "glGetQueryBufferObjectiv");
    getQueryBufferObjectui64v = try Types.load(Types.PFN_GLGETQUERYBUFFEROBJECTUI64VPROC, "glGetQueryBufferObjectui64v");
    getQueryBufferObjectuiv = try Types.load(Types.PFN_GLGETQUERYBUFFEROBJECTUIVPROC, "glGetQueryBufferObjectuiv");
    getQueryIndexediv = try Types.load(Types.PFN_GLGETQUERYINDEXEDIVPROC, "glGetQueryIndexediv");
    getQueryObjecti64v = try Types.load(Types.PFN_GLGETQUERYOBJECTI64VPROC, "glGetQueryObjecti64v");
    getQueryObjectiv = try Types.load(Types.PFN_GLGETQUERYOBJECTIVPROC, "glGetQueryObjectiv");
    getQueryObjectui64v = try Types.load(Types.PFN_GLGETQUERYOBJECTUI64VPROC, "glGetQueryObjectui64v");
    getQueryObjectuiv = try Types.load(Types.PFN_GLGETQUERYOBJECTUIVPROC, "glGetQueryObjectuiv");
    getQueryiv = try Types.load(Types.PFN_GLGETQUERYIVPROC, "glGetQueryiv");
    getRenderbufferParameteriv = try Types.load(Types.PFN_GLGETRENDERBUFFERPARAMETERIVPROC, "glGetRenderbufferParameteriv");
    getSamplerParameterIiv = try Types.load(Types.PFN_GLGETSAMPLERPARAMETERIIVPROC, "glGetSamplerParameterIiv");
    getSamplerParameterIuiv = try Types.load(Types.PFN_GLGETSAMPLERPARAMETERIUIVPROC, "glGetSamplerParameterIuiv");
    getSamplerParameterfv = try Types.load(Types.PFN_GLGETSAMPLERPARAMETERFVPROC, "glGetSamplerParameterfv");
    getSamplerParameteriv = try Types.load(Types.PFN_GLGETSAMPLERPARAMETERIVPROC, "glGetSamplerParameteriv");
    getShaderInfoLog = try Types.load(Types.PFN_GLGETSHADERINFOLOGPROC, "glGetShaderInfoLog");
    getShaderPrecisionFormat = try Types.load(Types.PFN_GLGETSHADERPRECISIONFORMATPROC, "glGetShaderPrecisionFormat");
    getShaderSource = try Types.load(Types.PFN_GLGETSHADERSOURCEPROC, "glGetShaderSource");
    getShaderiv = try Types.load(Types.PFN_GLGETSHADERIVPROC, "glGetShaderiv");
    getString = try Types.load(Types.PFN_GLGETSTRINGPROC, "glGetString");
    getStringi = try Types.load(Types.PFN_GLGETSTRINGIPROC, "glGetStringi");
    getSubroutineIndex = try Types.load(Types.PFN_GLGETSUBROUTINEINDEXPROC, "glGetSubroutineIndex");
    getSubroutineUniformLocation = try Types.load(Types.PFN_GLGETSUBROUTINEUNIFORMLOCATIONPROC, "glGetSubroutineUniformLocation");
    getSynciv = try Types.load(Types.PFN_GLGETSYNCIVPROC, "glGetSynciv");
    getTexEnvfv = try Types.load(Types.PFN_GLGETTEXENVFVPROC, "glGetTexEnvfv");
    getTexEnviv = try Types.load(Types.PFN_GLGETTEXENVIVPROC, "glGetTexEnviv");
    getTexGendv = try Types.load(Types.PFN_GLGETTEXGENDVPROC, "glGetTexGendv");
    getTexGenfv = try Types.load(Types.PFN_GLGETTEXGENFVPROC, "glGetTexGenfv");
    getTexGeniv = try Types.load(Types.PFN_GLGETTEXGENIVPROC, "glGetTexGeniv");
    getTexImage = try Types.load(Types.PFN_GLGETTEXIMAGEPROC, "glGetTexImage");
    getTexLevelParameterfv = try Types.load(Types.PFN_GLGETTEXLEVELPARAMETERFVPROC, "glGetTexLevelParameterfv");
    getTexLevelParameteriv = try Types.load(Types.PFN_GLGETTEXLEVELPARAMETERIVPROC, "glGetTexLevelParameteriv");
    getTexParameterIiv = try Types.load(Types.PFN_GLGETTEXPARAMETERIIVPROC, "glGetTexParameterIiv");
    getTexParameterIuiv = try Types.load(Types.PFN_GLGETTEXPARAMETERIUIVPROC, "glGetTexParameterIuiv");
    getTexParameterfv = try Types.load(Types.PFN_GLGETTEXPARAMETERFVPROC, "glGetTexParameterfv");
    getTexParameteriv = try Types.load(Types.PFN_GLGETTEXPARAMETERIVPROC, "glGetTexParameteriv");
    getTextureImage = try Types.load(Types.PFN_GLGETTEXTUREIMAGEPROC, "glGetTextureImage");
    getTextureLevelParameterfv = try Types.load(Types.PFN_GLGETTEXTURELEVELPARAMETERFVPROC, "glGetTextureLevelParameterfv");
    getTextureLevelParameteriv = try Types.load(Types.PFN_GLGETTEXTURELEVELPARAMETERIVPROC, "glGetTextureLevelParameteriv");
    getTextureParameterIiv = try Types.load(Types.PFN_GLGETTEXTUREPARAMETERIIVPROC, "glGetTextureParameterIiv");
    getTextureParameterIuiv = try Types.load(Types.PFN_GLGETTEXTUREPARAMETERIUIVPROC, "glGetTextureParameterIuiv");
    getTextureParameterfv = try Types.load(Types.PFN_GLGETTEXTUREPARAMETERFVPROC, "glGetTextureParameterfv");
    getTextureParameteriv = try Types.load(Types.PFN_GLGETTEXTUREPARAMETERIVPROC, "glGetTextureParameteriv");
    getTextureSubImage = try Types.load(Types.PFN_GLGETTEXTURESUBIMAGEPROC, "glGetTextureSubImage");
    getTransformFeedbackVarying = try Types.load(Types.PFN_GLGETTRANSFORMFEEDBACKVARYINGPROC, "glGetTransformFeedbackVarying");
    getTransformFeedbacki64_v = try Types.load(Types.PFN_GLGETTRANSFORMFEEDBACKI64_VPROC, "glGetTransformFeedbacki64_v");
    getTransformFeedbacki_v = try Types.load(Types.PFN_GLGETTRANSFORMFEEDBACKI_VPROC, "glGetTransformFeedbacki_v");
    getTransformFeedbackiv = try Types.load(Types.PFN_GLGETTRANSFORMFEEDBACKIVPROC, "glGetTransformFeedbackiv");
    getUniformBlockIndex = try Types.load(Types.PFN_GLGETUNIFORMBLOCKINDEXPROC, "glGetUniformBlockIndex");
    getUniformIndices = try Types.load(Types.PFN_GLGETUNIFORMINDICESPROC, "glGetUniformIndices");
    getUniformLocation = try Types.load(Types.PFN_GLGETUNIFORMLOCATIONPROC, "glGetUniformLocation");
    getUniformSubroutineuiv = try Types.load(Types.PFN_GLGETUNIFORMSUBROUTINEUIVPROC, "glGetUniformSubroutineuiv");
    getUniformdv = try Types.load(Types.PFN_GLGETUNIFORMDVPROC, "glGetUniformdv");
    getUniformfv = try Types.load(Types.PFN_GLGETUNIFORMFVPROC, "glGetUniformfv");
    getUniformiv = try Types.load(Types.PFN_GLGETUNIFORMIVPROC, "glGetUniformiv");
    getUniformuiv = try Types.load(Types.PFN_GLGETUNIFORMUIVPROC, "glGetUniformuiv");
    getVertexArrayIndexed64iv = try Types.load(Types.PFN_GLGETVERTEXARRAYINDEXED64IVPROC, "glGetVertexArrayIndexed64iv");
    getVertexArrayIndexediv = try Types.load(Types.PFN_GLGETVERTEXARRAYINDEXEDIVPROC, "glGetVertexArrayIndexediv");
    getVertexArrayiv = try Types.load(Types.PFN_GLGETVERTEXARRAYIVPROC, "glGetVertexArrayiv");
    getVertexAttribIiv = try Types.load(Types.PFN_GLGETVERTEXATTRIBIIVPROC, "glGetVertexAttribIiv");
    getVertexAttribIuiv = try Types.load(Types.PFN_GLGETVERTEXATTRIBIUIVPROC, "glGetVertexAttribIuiv");
    getVertexAttribLdv = try Types.load(Types.PFN_GLGETVERTEXATTRIBLDVPROC, "glGetVertexAttribLdv");
    getVertexAttribPointerv = try Types.load(Types.PFN_GLGETVERTEXATTRIBPOINTERVPROC, "glGetVertexAttribPointerv");
    getVertexAttribdv = try Types.load(Types.PFN_GLGETVERTEXATTRIBDVPROC, "glGetVertexAttribdv");
    getVertexAttribfv = try Types.load(Types.PFN_GLGETVERTEXATTRIBFVPROC, "glGetVertexAttribfv");
    getVertexAttribiv = try Types.load(Types.PFN_GLGETVERTEXATTRIBIVPROC, "glGetVertexAttribiv");
    getnColorTable = try Types.load(Types.PFN_GLGETNCOLORTABLEPROC, "glGetnColorTable");
    getnCompressedTexImage = try Types.load(Types.PFN_GLGETNCOMPRESSEDTEXIMAGEPROC, "glGetnCompressedTexImage");
    getnConvolutionFilter = try Types.load(Types.PFN_GLGETNCONVOLUTIONFILTERPROC, "glGetnConvolutionFilter");
    getnHistogram = try Types.load(Types.PFN_GLGETNHISTOGRAMPROC, "glGetnHistogram");
    getnMapdv = try Types.load(Types.PFN_GLGETNMAPDVPROC, "glGetnMapdv");
    getnMapfv = try Types.load(Types.PFN_GLGETNMAPFVPROC, "glGetnMapfv");
    getnMapiv = try Types.load(Types.PFN_GLGETNMAPIVPROC, "glGetnMapiv");
    getnMinmax = try Types.load(Types.PFN_GLGETNMINMAXPROC, "glGetnMinmax");
    getnPixelMapfv = try Types.load(Types.PFN_GLGETNPIXELMAPFVPROC, "glGetnPixelMapfv");
    getnPixelMapuiv = try Types.load(Types.PFN_GLGETNPIXELMAPUIVPROC, "glGetnPixelMapuiv");
    getnPixelMapusv = try Types.load(Types.PFN_GLGETNPIXELMAPUSVPROC, "glGetnPixelMapusv");
    getnPolygonStipple = try Types.load(Types.PFN_GLGETNPOLYGONSTIPPLEPROC, "glGetnPolygonStipple");
    getnSeparableFilter = try Types.load(Types.PFN_GLGETNSEPARABLEFILTERPROC, "glGetnSeparableFilter");
    getnTexImage = try Types.load(Types.PFN_GLGETNTEXIMAGEPROC, "glGetnTexImage");
    getnUniformdv = try Types.load(Types.PFN_GLGETNUNIFORMDVPROC, "glGetnUniformdv");
    getnUniformfv = try Types.load(Types.PFN_GLGETNUNIFORMFVPROC, "glGetnUniformfv");
    getnUniformiv = try Types.load(Types.PFN_GLGETNUNIFORMIVPROC, "glGetnUniformiv");
    getnUniformuiv = try Types.load(Types.PFN_GLGETNUNIFORMUIVPROC, "glGetnUniformuiv");
    hint = try Types.load(Types.PFN_GLHINTPROC, "glHint");
    indexMask = try Types.load(Types.PFN_GLINDEXMASKPROC, "glIndexMask");
    indexPointer = try Types.load(Types.PFN_GLINDEXPOINTERPROC, "glIndexPointer");
    indexd = try Types.load(Types.PFN_GLINDEXDPROC, "glIndexd");
    indexdv = try Types.load(Types.PFN_GLINDEXDVPROC, "glIndexdv");
    indexf = try Types.load(Types.PFN_GLINDEXFPROC, "glIndexf");
    indexfv = try Types.load(Types.PFN_GLINDEXFVPROC, "glIndexfv");
    indexi = try Types.load(Types.PFN_GLINDEXIPROC, "glIndexi");
    indexiv = try Types.load(Types.PFN_GLINDEXIVPROC, "glIndexiv");
    indexs = try Types.load(Types.PFN_GLINDEXSPROC, "glIndexs");
    indexsv = try Types.load(Types.PFN_GLINDEXSVPROC, "glIndexsv");
    indexub = try Types.load(Types.PFN_GLINDEXUBPROC, "glIndexub");
    indexubv = try Types.load(Types.PFN_GLINDEXUBVPROC, "glIndexubv");
    initNames = try Types.load(Types.PFN_GLINITNAMESPROC, "glInitNames");
    interleavedArrays = try Types.load(Types.PFN_GLINTERLEAVEDARRAYSPROC, "glInterleavedArrays");
    invalidateBufferData = try Types.load(Types.PFN_GLINVALIDATEBUFFERDATAPROC, "glInvalidateBufferData");
    invalidateBufferSubData = try Types.load(Types.PFN_GLINVALIDATEBUFFERSUBDATAPROC, "glInvalidateBufferSubData");
    invalidateFramebuffer = try Types.load(Types.PFN_GLINVALIDATEFRAMEBUFFERPROC, "glInvalidateFramebuffer");
    invalidateNamedFramebufferData = try Types.load(Types.PFN_GLINVALIDATENAMEDFRAMEBUFFERDATAPROC, "glInvalidateNamedFramebufferData");
    invalidateNamedFramebufferSubData = try Types.load(Types.PFN_GLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC, "glInvalidateNamedFramebufferSubData");
    invalidateSubFramebuffer = try Types.load(Types.PFN_GLINVALIDATESUBFRAMEBUFFERPROC, "glInvalidateSubFramebuffer");
    invalidateTexImage = try Types.load(Types.PFN_GLINVALIDATETEXIMAGEPROC, "glInvalidateTexImage");
    invalidateTexSubImage = try Types.load(Types.PFN_GLINVALIDATETEXSUBIMAGEPROC, "glInvalidateTexSubImage");
    isBuffer = try Types.load(Types.PFN_GLISBUFFERPROC, "glIsBuffer");
    isEnabled = try Types.load(Types.PFN_GLISENABLEDPROC, "glIsEnabled");
    isEnabledi = try Types.load(Types.PFN_GLISENABLEDIPROC, "glIsEnabledi");
    isFramebuffer = try Types.load(Types.PFN_GLISFRAMEBUFFERPROC, "glIsFramebuffer");
    isList = try Types.load(Types.PFN_GLISLISTPROC, "glIsList");
    isProgram = try Types.load(Types.PFN_GLISPROGRAMPROC, "glIsProgram");
    isProgramPipeline = try Types.load(Types.PFN_GLISPROGRAMPIPELINEPROC, "glIsProgramPipeline");
    isQuery = try Types.load(Types.PFN_GLISQUERYPROC, "glIsQuery");
    isRenderbuffer = try Types.load(Types.PFN_GLISRENDERBUFFERPROC, "glIsRenderbuffer");
    isSampler = try Types.load(Types.PFN_GLISSAMPLERPROC, "glIsSampler");
    isShader = try Types.load(Types.PFN_GLISSHADERPROC, "glIsShader");
    isSync = try Types.load(Types.PFN_GLISSYNCPROC, "glIsSync");
    isTexture = try Types.load(Types.PFN_GLISTEXTUREPROC, "glIsTexture");
    isTransformFeedback = try Types.load(Types.PFN_GLISTRANSFORMFEEDBACKPROC, "glIsTransformFeedback");
    isVertexArray = try Types.load(Types.PFN_GLISVERTEXARRAYPROC, "glIsVertexArray");
    lightModelf = try Types.load(Types.PFN_GLLIGHTMODELFPROC, "glLightModelf");
    lightModelfv = try Types.load(Types.PFN_GLLIGHTMODELFVPROC, "glLightModelfv");
    lightModeli = try Types.load(Types.PFN_GLLIGHTMODELIPROC, "glLightModeli");
    lightModeliv = try Types.load(Types.PFN_GLLIGHTMODELIVPROC, "glLightModeliv");
    lightf = try Types.load(Types.PFN_GLLIGHTFPROC, "glLightf");
    lightfv = try Types.load(Types.PFN_GLLIGHTFVPROC, "glLightfv");
    lighti = try Types.load(Types.PFN_GLLIGHTIPROC, "glLighti");
    lightiv = try Types.load(Types.PFN_GLLIGHTIVPROC, "glLightiv");
    lineStipple = try Types.load(Types.PFN_GLLINESTIPPLEPROC, "glLineStipple");
    lineWidth = try Types.load(Types.PFN_GLLINEWIDTHPROC, "glLineWidth");
    linkProgram = try Types.load(Types.PFN_GLLINKPROGRAMPROC, "glLinkProgram");
    listBase = try Types.load(Types.PFN_GLLISTBASEPROC, "glListBase");
    loadIdentity = try Types.load(Types.PFN_GLLOADIDENTITYPROC, "glLoadIdentity");
    loadMatrixd = try Types.load(Types.PFN_GLLOADMATRIXDPROC, "glLoadMatrixd");
    loadMatrixf = try Types.load(Types.PFN_GLLOADMATRIXFPROC, "glLoadMatrixf");
    loadName = try Types.load(Types.PFN_GLLOADNAMEPROC, "glLoadName");
    loadTransposeMatrixd = try Types.load(Types.PFN_GLLOADTRANSPOSEMATRIXDPROC, "glLoadTransposeMatrixd");
    loadTransposeMatrixf = try Types.load(Types.PFN_GLLOADTRANSPOSEMATRIXFPROC, "glLoadTransposeMatrixf");
    logicOp = try Types.load(Types.PFN_GLLOGICOPPROC, "glLogicOp");
    map1d = try Types.load(Types.PFN_GLMAP1DPROC, "glMap1d");
    map1f = try Types.load(Types.PFN_GLMAP1FPROC, "glMap1f");
    map2d = try Types.load(Types.PFN_GLMAP2DPROC, "glMap2d");
    map2f = try Types.load(Types.PFN_GLMAP2FPROC, "glMap2f");
    mapBuffer = try Types.load(Types.PFN_GLMAPBUFFERPROC, "glMapBuffer");
    mapBufferRange = try Types.load(Types.PFN_GLMAPBUFFERRANGEPROC, "glMapBufferRange");
    mapGrid1d = try Types.load(Types.PFN_GLMAPGRID1DPROC, "glMapGrid1d");
    mapGrid1f = try Types.load(Types.PFN_GLMAPGRID1FPROC, "glMapGrid1f");
    mapGrid2d = try Types.load(Types.PFN_GLMAPGRID2DPROC, "glMapGrid2d");
    mapGrid2f = try Types.load(Types.PFN_GLMAPGRID2FPROC, "glMapGrid2f");
    mapNamedBuffer = try Types.load(Types.PFN_GLMAPNAMEDBUFFERPROC, "glMapNamedBuffer");
    mapNamedBufferRange = try Types.load(Types.PFN_GLMAPNAMEDBUFFERRANGEPROC, "glMapNamedBufferRange");
    materialf = try Types.load(Types.PFN_GLMATERIALFPROC, "glMaterialf");
    materialfv = try Types.load(Types.PFN_GLMATERIALFVPROC, "glMaterialfv");
    materiali = try Types.load(Types.PFN_GLMATERIALIPROC, "glMateriali");
    materialiv = try Types.load(Types.PFN_GLMATERIALIVPROC, "glMaterialiv");
    matrixMode = try Types.load(Types.PFN_GLMATRIXMODEPROC, "glMatrixMode");
    memoryBarrier = try Types.load(Types.PFN_GLMEMORYBARRIERPROC, "glMemoryBarrier");
    memoryBarrierByRegion = try Types.load(Types.PFN_GLMEMORYBARRIERBYREGIONPROC, "glMemoryBarrierByRegion");
    minSampleShading = try Types.load(Types.PFN_GLMINSAMPLESHADINGPROC, "glMinSampleShading");
    multMatrixd = try Types.load(Types.PFN_GLMULTMATRIXDPROC, "glMultMatrixd");
    multMatrixf = try Types.load(Types.PFN_GLMULTMATRIXFPROC, "glMultMatrixf");
    multTransposeMatrixd = try Types.load(Types.PFN_GLMULTTRANSPOSEMATRIXDPROC, "glMultTransposeMatrixd");
    multTransposeMatrixf = try Types.load(Types.PFN_GLMULTTRANSPOSEMATRIXFPROC, "glMultTransposeMatrixf");
    multiDrawArrays = try Types.load(Types.PFN_GLMULTIDRAWARRAYSPROC, "glMultiDrawArrays");
    multiDrawArraysIndirect = try Types.load(Types.PFN_GLMULTIDRAWARRAYSINDIRECTPROC, "glMultiDrawArraysIndirect");
    multiDrawArraysIndirectCount = try Types.load(Types.PFN_GLMULTIDRAWARRAYSINDIRECTCOUNTPROC, "glMultiDrawArraysIndirectCount");
    multiDrawElements = try Types.load(Types.PFN_GLMULTIDRAWELEMENTSPROC, "glMultiDrawElements");
    multiDrawElementsBaseVertex = try Types.load(Types.PFN_GLMULTIDRAWELEMENTSBASEVERTEXPROC, "glMultiDrawElementsBaseVertex");
    multiDrawElementsIndirect = try Types.load(Types.PFN_GLMULTIDRAWELEMENTSINDIRECTPROC, "glMultiDrawElementsIndirect");
    multiDrawElementsIndirectCount = try Types.load(Types.PFN_GLMULTIDRAWELEMENTSINDIRECTCOUNTPROC, "glMultiDrawElementsIndirectCount");
    multiTexCoord1d = try Types.load(Types.PFN_GLMULTITEXCOORD1DPROC, "glMultiTexCoord1d");
    multiTexCoord1dv = try Types.load(Types.PFN_GLMULTITEXCOORD1DVPROC, "glMultiTexCoord1dv");
    multiTexCoord1f = try Types.load(Types.PFN_GLMULTITEXCOORD1FPROC, "glMultiTexCoord1f");
    multiTexCoord1fv = try Types.load(Types.PFN_GLMULTITEXCOORD1FVPROC, "glMultiTexCoord1fv");
    multiTexCoord1i = try Types.load(Types.PFN_GLMULTITEXCOORD1IPROC, "glMultiTexCoord1i");
    multiTexCoord1iv = try Types.load(Types.PFN_GLMULTITEXCOORD1IVPROC, "glMultiTexCoord1iv");
    multiTexCoord1s = try Types.load(Types.PFN_GLMULTITEXCOORD1SPROC, "glMultiTexCoord1s");
    multiTexCoord1sv = try Types.load(Types.PFN_GLMULTITEXCOORD1SVPROC, "glMultiTexCoord1sv");
    multiTexCoord2d = try Types.load(Types.PFN_GLMULTITEXCOORD2DPROC, "glMultiTexCoord2d");
    multiTexCoord2dv = try Types.load(Types.PFN_GLMULTITEXCOORD2DVPROC, "glMultiTexCoord2dv");
    multiTexCoord2f = try Types.load(Types.PFN_GLMULTITEXCOORD2FPROC, "glMultiTexCoord2f");
    multiTexCoord2fv = try Types.load(Types.PFN_GLMULTITEXCOORD2FVPROC, "glMultiTexCoord2fv");
    multiTexCoord2i = try Types.load(Types.PFN_GLMULTITEXCOORD2IPROC, "glMultiTexCoord2i");
    multiTexCoord2iv = try Types.load(Types.PFN_GLMULTITEXCOORD2IVPROC, "glMultiTexCoord2iv");
    multiTexCoord2s = try Types.load(Types.PFN_GLMULTITEXCOORD2SPROC, "glMultiTexCoord2s");
    multiTexCoord2sv = try Types.load(Types.PFN_GLMULTITEXCOORD2SVPROC, "glMultiTexCoord2sv");
    multiTexCoord3d = try Types.load(Types.PFN_GLMULTITEXCOORD3DPROC, "glMultiTexCoord3d");
    multiTexCoord3dv = try Types.load(Types.PFN_GLMULTITEXCOORD3DVPROC, "glMultiTexCoord3dv");
    multiTexCoord3f = try Types.load(Types.PFN_GLMULTITEXCOORD3FPROC, "glMultiTexCoord3f");
    multiTexCoord3fv = try Types.load(Types.PFN_GLMULTITEXCOORD3FVPROC, "glMultiTexCoord3fv");
    multiTexCoord3i = try Types.load(Types.PFN_GLMULTITEXCOORD3IPROC, "glMultiTexCoord3i");
    multiTexCoord3iv = try Types.load(Types.PFN_GLMULTITEXCOORD3IVPROC, "glMultiTexCoord3iv");
    multiTexCoord3s = try Types.load(Types.PFN_GLMULTITEXCOORD3SPROC, "glMultiTexCoord3s");
    multiTexCoord3sv = try Types.load(Types.PFN_GLMULTITEXCOORD3SVPROC, "glMultiTexCoord3sv");
    multiTexCoord4d = try Types.load(Types.PFN_GLMULTITEXCOORD4DPROC, "glMultiTexCoord4d");
    multiTexCoord4dv = try Types.load(Types.PFN_GLMULTITEXCOORD4DVPROC, "glMultiTexCoord4dv");
    multiTexCoord4f = try Types.load(Types.PFN_GLMULTITEXCOORD4FPROC, "glMultiTexCoord4f");
    multiTexCoord4fv = try Types.load(Types.PFN_GLMULTITEXCOORD4FVPROC, "glMultiTexCoord4fv");
    multiTexCoord4i = try Types.load(Types.PFN_GLMULTITEXCOORD4IPROC, "glMultiTexCoord4i");
    multiTexCoord4iv = try Types.load(Types.PFN_GLMULTITEXCOORD4IVPROC, "glMultiTexCoord4iv");
    multiTexCoord4s = try Types.load(Types.PFN_GLMULTITEXCOORD4SPROC, "glMultiTexCoord4s");
    multiTexCoord4sv = try Types.load(Types.PFN_GLMULTITEXCOORD4SVPROC, "glMultiTexCoord4sv");
    multiTexCoordP1ui = try Types.load(Types.PFN_GLMULTITEXCOORDP1UIPROC, "glMultiTexCoordP1ui");
    multiTexCoordP1uiv = try Types.load(Types.PFN_GLMULTITEXCOORDP1UIVPROC, "glMultiTexCoordP1uiv");
    multiTexCoordP2ui = try Types.load(Types.PFN_GLMULTITEXCOORDP2UIPROC, "glMultiTexCoordP2ui");
    multiTexCoordP2uiv = try Types.load(Types.PFN_GLMULTITEXCOORDP2UIVPROC, "glMultiTexCoordP2uiv");
    multiTexCoordP3ui = try Types.load(Types.PFN_GLMULTITEXCOORDP3UIPROC, "glMultiTexCoordP3ui");
    multiTexCoordP3uiv = try Types.load(Types.PFN_GLMULTITEXCOORDP3UIVPROC, "glMultiTexCoordP3uiv");
    multiTexCoordP4ui = try Types.load(Types.PFN_GLMULTITEXCOORDP4UIPROC, "glMultiTexCoordP4ui");
    multiTexCoordP4uiv = try Types.load(Types.PFN_GLMULTITEXCOORDP4UIVPROC, "glMultiTexCoordP4uiv");
    namedBufferData = try Types.load(Types.PFN_GLNAMEDBUFFERDATAPROC, "glNamedBufferData");
    namedBufferStorage = try Types.load(Types.PFN_GLNAMEDBUFFERSTORAGEPROC, "glNamedBufferStorage");
    namedBufferSubData = try Types.load(Types.PFN_GLNAMEDBUFFERSUBDATAPROC, "glNamedBufferSubData");
    namedFramebufferDrawBuffer = try Types.load(Types.PFN_GLNAMEDFRAMEBUFFERDRAWBUFFERPROC, "glNamedFramebufferDrawBuffer");
    namedFramebufferDrawBuffers = try Types.load(Types.PFN_GLNAMEDFRAMEBUFFERDRAWBUFFERSPROC, "glNamedFramebufferDrawBuffers");
    namedFramebufferParameteri = try Types.load(Types.PFN_GLNAMEDFRAMEBUFFERPARAMETERIPROC, "glNamedFramebufferParameteri");
    namedFramebufferReadBuffer = try Types.load(Types.PFN_GLNAMEDFRAMEBUFFERREADBUFFERPROC, "glNamedFramebufferReadBuffer");
    namedFramebufferRenderbuffer = try Types.load(Types.PFN_GLNAMEDFRAMEBUFFERRENDERBUFFERPROC, "glNamedFramebufferRenderbuffer");
    namedFramebufferTexture = try Types.load(Types.PFN_GLNAMEDFRAMEBUFFERTEXTUREPROC, "glNamedFramebufferTexture");
    namedFramebufferTextureLayer = try Types.load(Types.PFN_GLNAMEDFRAMEBUFFERTEXTURELAYERPROC, "glNamedFramebufferTextureLayer");
    namedRenderbufferStorage = try Types.load(Types.PFN_GLNAMEDRENDERBUFFERSTORAGEPROC, "glNamedRenderbufferStorage");
    namedRenderbufferStorageMultisample = try Types.load(Types.PFN_GLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC, "glNamedRenderbufferStorageMultisample");
    newList = try Types.load(Types.PFN_GLNEWLISTPROC, "glNewList");
    normal3b = try Types.load(Types.PFN_GLNORMAL3BPROC, "glNormal3b");
    normal3bv = try Types.load(Types.PFN_GLNORMAL3BVPROC, "glNormal3bv");
    normal3d = try Types.load(Types.PFN_GLNORMAL3DPROC, "glNormal3d");
    normal3dv = try Types.load(Types.PFN_GLNORMAL3DVPROC, "glNormal3dv");
    normal3f = try Types.load(Types.PFN_GLNORMAL3FPROC, "glNormal3f");
    normal3fv = try Types.load(Types.PFN_GLNORMAL3FVPROC, "glNormal3fv");
    normal3i = try Types.load(Types.PFN_GLNORMAL3IPROC, "glNormal3i");
    normal3iv = try Types.load(Types.PFN_GLNORMAL3IVPROC, "glNormal3iv");
    normal3s = try Types.load(Types.PFN_GLNORMAL3SPROC, "glNormal3s");
    normal3sv = try Types.load(Types.PFN_GLNORMAL3SVPROC, "glNormal3sv");
    normalP3ui = try Types.load(Types.PFN_GLNORMALP3UIPROC, "glNormalP3ui");
    normalP3uiv = try Types.load(Types.PFN_GLNORMALP3UIVPROC, "glNormalP3uiv");
    normalPointer = try Types.load(Types.PFN_GLNORMALPOINTERPROC, "glNormalPointer");
    objectLabel = try Types.load(Types.PFN_GLOBJECTLABELPROC, "glObjectLabel");
    objectPtrLabel = try Types.load(Types.PFN_GLOBJECTPTRLABELPROC, "glObjectPtrLabel");
    ortho = try Types.load(Types.PFN_GLORTHOPROC, "glOrtho");
    passThrough = try Types.load(Types.PFN_GLPASSTHROUGHPROC, "glPassThrough");
    patchParameterfv = try Types.load(Types.PFN_GLPATCHPARAMETERFVPROC, "glPatchParameterfv");
    patchParameteri = try Types.load(Types.PFN_GLPATCHPARAMETERIPROC, "glPatchParameteri");
    pauseTransformFeedback = try Types.load(Types.PFN_GLPAUSETRANSFORMFEEDBACKPROC, "glPauseTransformFeedback");
    pixelMapfv = try Types.load(Types.PFN_GLPIXELMAPFVPROC, "glPixelMapfv");
    pixelMapuiv = try Types.load(Types.PFN_GLPIXELMAPUIVPROC, "glPixelMapuiv");
    pixelMapusv = try Types.load(Types.PFN_GLPIXELMAPUSVPROC, "glPixelMapusv");
    pixelStoref = try Types.load(Types.PFN_GLPIXELSTOREFPROC, "glPixelStoref");
    pixelStorei = try Types.load(Types.PFN_GLPIXELSTOREIPROC, "glPixelStorei");
    pixelTransferf = try Types.load(Types.PFN_GLPIXELTRANSFERFPROC, "glPixelTransferf");
    pixelTransferi = try Types.load(Types.PFN_GLPIXELTRANSFERIPROC, "glPixelTransferi");
    pixelZoom = try Types.load(Types.PFN_GLPIXELZOOMPROC, "glPixelZoom");
    pointParameterf = try Types.load(Types.PFN_GLPOINTPARAMETERFPROC, "glPointParameterf");
    pointParameterfv = try Types.load(Types.PFN_GLPOINTPARAMETERFVPROC, "glPointParameterfv");
    pointParameteri = try Types.load(Types.PFN_GLPOINTPARAMETERIPROC, "glPointParameteri");
    pointParameteriv = try Types.load(Types.PFN_GLPOINTPARAMETERIVPROC, "glPointParameteriv");
    pointSize = try Types.load(Types.PFN_GLPOINTSIZEPROC, "glPointSize");
    polygonMode = try Types.load(Types.PFN_GLPOLYGONMODEPROC, "glPolygonMode");
    polygonOffset = try Types.load(Types.PFN_GLPOLYGONOFFSETPROC, "glPolygonOffset");
    polygonOffsetClamp = try Types.load(Types.PFN_GLPOLYGONOFFSETCLAMPPROC, "glPolygonOffsetClamp");
    polygonStipple = try Types.load(Types.PFN_GLPOLYGONSTIPPLEPROC, "glPolygonStipple");
    popAttrib = try Types.load(Types.PFN_GLPOPATTRIBPROC, "glPopAttrib");
    popClientAttrib = try Types.load(Types.PFN_GLPOPCLIENTATTRIBPROC, "glPopClientAttrib");
    popDebugGroup = try Types.load(Types.PFN_GLPOPDEBUGGROUPPROC, "glPopDebugGroup");
    popMatrix = try Types.load(Types.PFN_GLPOPMATRIXPROC, "glPopMatrix");
    popName = try Types.load(Types.PFN_GLPOPNAMEPROC, "glPopName");
    primitiveRestartIndex = try Types.load(Types.PFN_GLPRIMITIVERESTARTINDEXPROC, "glPrimitiveRestartIndex");
    prioritizeTextures = try Types.load(Types.PFN_GLPRIORITIZETEXTURESPROC, "glPrioritizeTextures");
    programBinary = try Types.load(Types.PFN_GLPROGRAMBINARYPROC, "glProgramBinary");
    programParameteri = try Types.load(Types.PFN_GLPROGRAMPARAMETERIPROC, "glProgramParameteri");
    programUniform1d = try Types.load(Types.PFN_GLPROGRAMUNIFORM1DPROC, "glProgramUniform1d");
    programUniform1dv = try Types.load(Types.PFN_GLPROGRAMUNIFORM1DVPROC, "glProgramUniform1dv");
    programUniform1f = try Types.load(Types.PFN_GLPROGRAMUNIFORM1FPROC, "glProgramUniform1f");
    programUniform1fv = try Types.load(Types.PFN_GLPROGRAMUNIFORM1FVPROC, "glProgramUniform1fv");
    programUniform1i = try Types.load(Types.PFN_GLPROGRAMUNIFORM1IPROC, "glProgramUniform1i");
    programUniform1iv = try Types.load(Types.PFN_GLPROGRAMUNIFORM1IVPROC, "glProgramUniform1iv");
    programUniform1ui = try Types.load(Types.PFN_GLPROGRAMUNIFORM1UIPROC, "glProgramUniform1ui");
    programUniform1uiv = try Types.load(Types.PFN_GLPROGRAMUNIFORM1UIVPROC, "glProgramUniform1uiv");
    programUniform2d = try Types.load(Types.PFN_GLPROGRAMUNIFORM2DPROC, "glProgramUniform2d");
    programUniform2dv = try Types.load(Types.PFN_GLPROGRAMUNIFORM2DVPROC, "glProgramUniform2dv");
    programUniform2f = try Types.load(Types.PFN_GLPROGRAMUNIFORM2FPROC, "glProgramUniform2f");
    programUniform2fv = try Types.load(Types.PFN_GLPROGRAMUNIFORM2FVPROC, "glProgramUniform2fv");
    programUniform2i = try Types.load(Types.PFN_GLPROGRAMUNIFORM2IPROC, "glProgramUniform2i");
    programUniform2iv = try Types.load(Types.PFN_GLPROGRAMUNIFORM2IVPROC, "glProgramUniform2iv");
    programUniform2ui = try Types.load(Types.PFN_GLPROGRAMUNIFORM2UIPROC, "glProgramUniform2ui");
    programUniform2uiv = try Types.load(Types.PFN_GLPROGRAMUNIFORM2UIVPROC, "glProgramUniform2uiv");
    programUniform3d = try Types.load(Types.PFN_GLPROGRAMUNIFORM3DPROC, "glProgramUniform3d");
    programUniform3dv = try Types.load(Types.PFN_GLPROGRAMUNIFORM3DVPROC, "glProgramUniform3dv");
    programUniform3f = try Types.load(Types.PFN_GLPROGRAMUNIFORM3FPROC, "glProgramUniform3f");
    programUniform3fv = try Types.load(Types.PFN_GLPROGRAMUNIFORM3FVPROC, "glProgramUniform3fv");
    programUniform3i = try Types.load(Types.PFN_GLPROGRAMUNIFORM3IPROC, "glProgramUniform3i");
    programUniform3iv = try Types.load(Types.PFN_GLPROGRAMUNIFORM3IVPROC, "glProgramUniform3iv");
    programUniform3ui = try Types.load(Types.PFN_GLPROGRAMUNIFORM3UIPROC, "glProgramUniform3ui");
    programUniform3uiv = try Types.load(Types.PFN_GLPROGRAMUNIFORM3UIVPROC, "glProgramUniform3uiv");
    programUniform4d = try Types.load(Types.PFN_GLPROGRAMUNIFORM4DPROC, "glProgramUniform4d");
    programUniform4dv = try Types.load(Types.PFN_GLPROGRAMUNIFORM4DVPROC, "glProgramUniform4dv");
    programUniform4f = try Types.load(Types.PFN_GLPROGRAMUNIFORM4FPROC, "glProgramUniform4f");
    programUniform4fv = try Types.load(Types.PFN_GLPROGRAMUNIFORM4FVPROC, "glProgramUniform4fv");
    programUniform4i = try Types.load(Types.PFN_GLPROGRAMUNIFORM4IPROC, "glProgramUniform4i");
    programUniform4iv = try Types.load(Types.PFN_GLPROGRAMUNIFORM4IVPROC, "glProgramUniform4iv");
    programUniform4ui = try Types.load(Types.PFN_GLPROGRAMUNIFORM4UIPROC, "glProgramUniform4ui");
    programUniform4uiv = try Types.load(Types.PFN_GLPROGRAMUNIFORM4UIVPROC, "glProgramUniform4uiv");
    programUniformMatrix2dv = try Types.load(Types.PFN_GLPROGRAMUNIFORMMATRIX2DVPROC, "glProgramUniformMatrix2dv");
    programUniformMatrix2fv = try Types.load(Types.PFN_GLPROGRAMUNIFORMMATRIX2FVPROC, "glProgramUniformMatrix2fv");
    programUniformMatrix2x3dv = try Types.load(Types.PFN_GLPROGRAMUNIFORMMATRIX2X3DVPROC, "glProgramUniformMatrix2x3dv");
    programUniformMatrix2x3fv = try Types.load(Types.PFN_GLPROGRAMUNIFORMMATRIX2X3FVPROC, "glProgramUniformMatrix2x3fv");
    programUniformMatrix2x4dv = try Types.load(Types.PFN_GLPROGRAMUNIFORMMATRIX2X4DVPROC, "glProgramUniformMatrix2x4dv");
    programUniformMatrix2x4fv = try Types.load(Types.PFN_GLPROGRAMUNIFORMMATRIX2X4FVPROC, "glProgramUniformMatrix2x4fv");
    programUniformMatrix3dv = try Types.load(Types.PFN_GLPROGRAMUNIFORMMATRIX3DVPROC, "glProgramUniformMatrix3dv");
    programUniformMatrix3fv = try Types.load(Types.PFN_GLPROGRAMUNIFORMMATRIX3FVPROC, "glProgramUniformMatrix3fv");
    programUniformMatrix3x2dv = try Types.load(Types.PFN_GLPROGRAMUNIFORMMATRIX3X2DVPROC, "glProgramUniformMatrix3x2dv");
    programUniformMatrix3x2fv = try Types.load(Types.PFN_GLPROGRAMUNIFORMMATRIX3X2FVPROC, "glProgramUniformMatrix3x2fv");
    programUniformMatrix3x4dv = try Types.load(Types.PFN_GLPROGRAMUNIFORMMATRIX3X4DVPROC, "glProgramUniformMatrix3x4dv");
    programUniformMatrix3x4fv = try Types.load(Types.PFN_GLPROGRAMUNIFORMMATRIX3X4FVPROC, "glProgramUniformMatrix3x4fv");
    programUniformMatrix4dv = try Types.load(Types.PFN_GLPROGRAMUNIFORMMATRIX4DVPROC, "glProgramUniformMatrix4dv");
    programUniformMatrix4fv = try Types.load(Types.PFN_GLPROGRAMUNIFORMMATRIX4FVPROC, "glProgramUniformMatrix4fv");
    programUniformMatrix4x2dv = try Types.load(Types.PFN_GLPROGRAMUNIFORMMATRIX4X2DVPROC, "glProgramUniformMatrix4x2dv");
    programUniformMatrix4x2fv = try Types.load(Types.PFN_GLPROGRAMUNIFORMMATRIX4X2FVPROC, "glProgramUniformMatrix4x2fv");
    programUniformMatrix4x3dv = try Types.load(Types.PFN_GLPROGRAMUNIFORMMATRIX4X3DVPROC, "glProgramUniformMatrix4x3dv");
    programUniformMatrix4x3fv = try Types.load(Types.PFN_GLPROGRAMUNIFORMMATRIX4X3FVPROC, "glProgramUniformMatrix4x3fv");
    provokingVertex = try Types.load(Types.PFN_GLPROVOKINGVERTEXPROC, "glProvokingVertex");
    pushAttrib = try Types.load(Types.PFN_GLPUSHATTRIBPROC, "glPushAttrib");
    pushClientAttrib = try Types.load(Types.PFN_GLPUSHCLIENTATTRIBPROC, "glPushClientAttrib");
    pushDebugGroup = try Types.load(Types.PFN_GLPUSHDEBUGGROUPPROC, "glPushDebugGroup");
    pushMatrix = try Types.load(Types.PFN_GLPUSHMATRIXPROC, "glPushMatrix");
    pushName = try Types.load(Types.PFN_GLPUSHNAMEPROC, "glPushName");
    queryCounter = try Types.load(Types.PFN_GLQUERYCOUNTERPROC, "glQueryCounter");
    rasterPos2d = try Types.load(Types.PFN_GLRASTERPOS2DPROC, "glRasterPos2d");
    rasterPos2dv = try Types.load(Types.PFN_GLRASTERPOS2DVPROC, "glRasterPos2dv");
    rasterPos2f = try Types.load(Types.PFN_GLRASTERPOS2FPROC, "glRasterPos2f");
    rasterPos2fv = try Types.load(Types.PFN_GLRASTERPOS2FVPROC, "glRasterPos2fv");
    rasterPos2i = try Types.load(Types.PFN_GLRASTERPOS2IPROC, "glRasterPos2i");
    rasterPos2iv = try Types.load(Types.PFN_GLRASTERPOS2IVPROC, "glRasterPos2iv");
    rasterPos2s = try Types.load(Types.PFN_GLRASTERPOS2SPROC, "glRasterPos2s");
    rasterPos2sv = try Types.load(Types.PFN_GLRASTERPOS2SVPROC, "glRasterPos2sv");
    rasterPos3d = try Types.load(Types.PFN_GLRASTERPOS3DPROC, "glRasterPos3d");
    rasterPos3dv = try Types.load(Types.PFN_GLRASTERPOS3DVPROC, "glRasterPos3dv");
    rasterPos3f = try Types.load(Types.PFN_GLRASTERPOS3FPROC, "glRasterPos3f");
    rasterPos3fv = try Types.load(Types.PFN_GLRASTERPOS3FVPROC, "glRasterPos3fv");
    rasterPos3i = try Types.load(Types.PFN_GLRASTERPOS3IPROC, "glRasterPos3i");
    rasterPos3iv = try Types.load(Types.PFN_GLRASTERPOS3IVPROC, "glRasterPos3iv");
    rasterPos3s = try Types.load(Types.PFN_GLRASTERPOS3SPROC, "glRasterPos3s");
    rasterPos3sv = try Types.load(Types.PFN_GLRASTERPOS3SVPROC, "glRasterPos3sv");
    rasterPos4d = try Types.load(Types.PFN_GLRASTERPOS4DPROC, "glRasterPos4d");
    rasterPos4dv = try Types.load(Types.PFN_GLRASTERPOS4DVPROC, "glRasterPos4dv");
    rasterPos4f = try Types.load(Types.PFN_GLRASTERPOS4FPROC, "glRasterPos4f");
    rasterPos4fv = try Types.load(Types.PFN_GLRASTERPOS4FVPROC, "glRasterPos4fv");
    rasterPos4i = try Types.load(Types.PFN_GLRASTERPOS4IPROC, "glRasterPos4i");
    rasterPos4iv = try Types.load(Types.PFN_GLRASTERPOS4IVPROC, "glRasterPos4iv");
    rasterPos4s = try Types.load(Types.PFN_GLRASTERPOS4SPROC, "glRasterPos4s");
    rasterPos4sv = try Types.load(Types.PFN_GLRASTERPOS4SVPROC, "glRasterPos4sv");
    readBuffer = try Types.load(Types.PFN_GLREADBUFFERPROC, "glReadBuffer");
    readPixels = try Types.load(Types.PFN_GLREADPIXELSPROC, "glReadPixels");
    readnPixels = try Types.load(Types.PFN_GLREADNPIXELSPROC, "glReadnPixels");
    rectd = try Types.load(Types.PFN_GLRECTDPROC, "glRectd");
    rectdv = try Types.load(Types.PFN_GLRECTDVPROC, "glRectdv");
    rectf = try Types.load(Types.PFN_GLRECTFPROC, "glRectf");
    rectfv = try Types.load(Types.PFN_GLRECTFVPROC, "glRectfv");
    recti = try Types.load(Types.PFN_GLRECTIPROC, "glRecti");
    rectiv = try Types.load(Types.PFN_GLRECTIVPROC, "glRectiv");
    rects = try Types.load(Types.PFN_GLRECTSPROC, "glRects");
    rectsv = try Types.load(Types.PFN_GLRECTSVPROC, "glRectsv");
    releaseShaderCompiler = try Types.load(Types.PFN_GLRELEASESHADERCOMPILERPROC, "glReleaseShaderCompiler");
    renderMode = try Types.load(Types.PFN_GLRENDERMODEPROC, "glRenderMode");
    renderbufferStorage = try Types.load(Types.PFN_GLRENDERBUFFERSTORAGEPROC, "glRenderbufferStorage");
    renderbufferStorageMultisample = try Types.load(Types.PFN_GLRENDERBUFFERSTORAGEMULTISAMPLEPROC, "glRenderbufferStorageMultisample");
    resumeTransformFeedback = try Types.load(Types.PFN_GLRESUMETRANSFORMFEEDBACKPROC, "glResumeTransformFeedback");
    rotated = try Types.load(Types.PFN_GLROTATEDPROC, "glRotated");
    rotatef = try Types.load(Types.PFN_GLROTATEFPROC, "glRotatef");
    sampleCoverage = try Types.load(Types.PFN_GLSAMPLECOVERAGEPROC, "glSampleCoverage");
    sampleMaski = try Types.load(Types.PFN_GLSAMPLEMASKIPROC, "glSampleMaski");
    samplerParameterIiv = try Types.load(Types.PFN_GLSAMPLERPARAMETERIIVPROC, "glSamplerParameterIiv");
    samplerParameterIuiv = try Types.load(Types.PFN_GLSAMPLERPARAMETERIUIVPROC, "glSamplerParameterIuiv");
    samplerParameterf = try Types.load(Types.PFN_GLSAMPLERPARAMETERFPROC, "glSamplerParameterf");
    samplerParameterfv = try Types.load(Types.PFN_GLSAMPLERPARAMETERFVPROC, "glSamplerParameterfv");
    samplerParameteri = try Types.load(Types.PFN_GLSAMPLERPARAMETERIPROC, "glSamplerParameteri");
    samplerParameteriv = try Types.load(Types.PFN_GLSAMPLERPARAMETERIVPROC, "glSamplerParameteriv");
    scaled = try Types.load(Types.PFN_GLSCALEDPROC, "glScaled");
    scalef = try Types.load(Types.PFN_GLSCALEFPROC, "glScalef");
    scissor = try Types.load(Types.PFN_GLSCISSORPROC, "glScissor");
    scissorArrayv = try Types.load(Types.PFN_GLSCISSORARRAYVPROC, "glScissorArrayv");
    scissorIndexed = try Types.load(Types.PFN_GLSCISSORINDEXEDPROC, "glScissorIndexed");
    scissorIndexedv = try Types.load(Types.PFN_GLSCISSORINDEXEDVPROC, "glScissorIndexedv");
    secondaryColor3b = try Types.load(Types.PFN_GLSECONDARYCOLOR3BPROC, "glSecondaryColor3b");
    secondaryColor3bv = try Types.load(Types.PFN_GLSECONDARYCOLOR3BVPROC, "glSecondaryColor3bv");
    secondaryColor3d = try Types.load(Types.PFN_GLSECONDARYCOLOR3DPROC, "glSecondaryColor3d");
    secondaryColor3dv = try Types.load(Types.PFN_GLSECONDARYCOLOR3DVPROC, "glSecondaryColor3dv");
    secondaryColor3f = try Types.load(Types.PFN_GLSECONDARYCOLOR3FPROC, "glSecondaryColor3f");
    secondaryColor3fv = try Types.load(Types.PFN_GLSECONDARYCOLOR3FVPROC, "glSecondaryColor3fv");
    secondaryColor3i = try Types.load(Types.PFN_GLSECONDARYCOLOR3IPROC, "glSecondaryColor3i");
    secondaryColor3iv = try Types.load(Types.PFN_GLSECONDARYCOLOR3IVPROC, "glSecondaryColor3iv");
    secondaryColor3s = try Types.load(Types.PFN_GLSECONDARYCOLOR3SPROC, "glSecondaryColor3s");
    secondaryColor3sv = try Types.load(Types.PFN_GLSECONDARYCOLOR3SVPROC, "glSecondaryColor3sv");
    secondaryColor3ub = try Types.load(Types.PFN_GLSECONDARYCOLOR3UBPROC, "glSecondaryColor3ub");
    secondaryColor3ubv = try Types.load(Types.PFN_GLSECONDARYCOLOR3UBVPROC, "glSecondaryColor3ubv");
    secondaryColor3ui = try Types.load(Types.PFN_GLSECONDARYCOLOR3UIPROC, "glSecondaryColor3ui");
    secondaryColor3uiv = try Types.load(Types.PFN_GLSECONDARYCOLOR3UIVPROC, "glSecondaryColor3uiv");
    secondaryColor3us = try Types.load(Types.PFN_GLSECONDARYCOLOR3USPROC, "glSecondaryColor3us");
    secondaryColor3usv = try Types.load(Types.PFN_GLSECONDARYCOLOR3USVPROC, "glSecondaryColor3usv");
    secondaryColorP3ui = try Types.load(Types.PFN_GLSECONDARYCOLORP3UIPROC, "glSecondaryColorP3ui");
    secondaryColorP3uiv = try Types.load(Types.PFN_GLSECONDARYCOLORP3UIVPROC, "glSecondaryColorP3uiv");
    secondaryColorPointer = try Types.load(Types.PFN_GLSECONDARYCOLORPOINTERPROC, "glSecondaryColorPointer");
    selectBuffer = try Types.load(Types.PFN_GLSELECTBUFFERPROC, "glSelectBuffer");
    shadeModel = try Types.load(Types.PFN_GLSHADEMODELPROC, "glShadeModel");
    shaderBinary = try Types.load(Types.PFN_GLSHADERBINARYPROC, "glShaderBinary");
    shaderSource = try Types.load(Types.PFN_GLSHADERSOURCEPROC, "glShaderSource");
    shaderStorageBlockBinding = try Types.load(Types.PFN_GLSHADERSTORAGEBLOCKBINDINGPROC, "glShaderStorageBlockBinding");
    specializeShader = try Types.load(Types.PFN_GLSPECIALIZESHADERPROC, "glSpecializeShader");
    stencilFunc = try Types.load(Types.PFN_GLSTENCILFUNCPROC, "glStencilFunc");
    stencilFuncSeparate = try Types.load(Types.PFN_GLSTENCILFUNCSEPARATEPROC, "glStencilFuncSeparate");
    stencilMask = try Types.load(Types.PFN_GLSTENCILMASKPROC, "glStencilMask");
    stencilMaskSeparate = try Types.load(Types.PFN_GLSTENCILMASKSEPARATEPROC, "glStencilMaskSeparate");
    stencilOp = try Types.load(Types.PFN_GLSTENCILOPPROC, "glStencilOp");
    stencilOpSeparate = try Types.load(Types.PFN_GLSTENCILOPSEPARATEPROC, "glStencilOpSeparate");
    texBuffer = try Types.load(Types.PFN_GLTEXBUFFERPROC, "glTexBuffer");
    texBufferRange = try Types.load(Types.PFN_GLTEXBUFFERRANGEPROC, "glTexBufferRange");
    texCoord1d = try Types.load(Types.PFN_GLTEXCOORD1DPROC, "glTexCoord1d");
    texCoord1dv = try Types.load(Types.PFN_GLTEXCOORD1DVPROC, "glTexCoord1dv");
    texCoord1f = try Types.load(Types.PFN_GLTEXCOORD1FPROC, "glTexCoord1f");
    texCoord1fv = try Types.load(Types.PFN_GLTEXCOORD1FVPROC, "glTexCoord1fv");
    texCoord1i = try Types.load(Types.PFN_GLTEXCOORD1IPROC, "glTexCoord1i");
    texCoord1iv = try Types.load(Types.PFN_GLTEXCOORD1IVPROC, "glTexCoord1iv");
    texCoord1s = try Types.load(Types.PFN_GLTEXCOORD1SPROC, "glTexCoord1s");
    texCoord1sv = try Types.load(Types.PFN_GLTEXCOORD1SVPROC, "glTexCoord1sv");
    texCoord2d = try Types.load(Types.PFN_GLTEXCOORD2DPROC, "glTexCoord2d");
    texCoord2dv = try Types.load(Types.PFN_GLTEXCOORD2DVPROC, "glTexCoord2dv");
    texCoord2f = try Types.load(Types.PFN_GLTEXCOORD2FPROC, "glTexCoord2f");
    texCoord2fv = try Types.load(Types.PFN_GLTEXCOORD2FVPROC, "glTexCoord2fv");
    texCoord2i = try Types.load(Types.PFN_GLTEXCOORD2IPROC, "glTexCoord2i");
    texCoord2iv = try Types.load(Types.PFN_GLTEXCOORD2IVPROC, "glTexCoord2iv");
    texCoord2s = try Types.load(Types.PFN_GLTEXCOORD2SPROC, "glTexCoord2s");
    texCoord2sv = try Types.load(Types.PFN_GLTEXCOORD2SVPROC, "glTexCoord2sv");
    texCoord3d = try Types.load(Types.PFN_GLTEXCOORD3DPROC, "glTexCoord3d");
    texCoord3dv = try Types.load(Types.PFN_GLTEXCOORD3DVPROC, "glTexCoord3dv");
    texCoord3f = try Types.load(Types.PFN_GLTEXCOORD3FPROC, "glTexCoord3f");
    texCoord3fv = try Types.load(Types.PFN_GLTEXCOORD3FVPROC, "glTexCoord3fv");
    texCoord3i = try Types.load(Types.PFN_GLTEXCOORD3IPROC, "glTexCoord3i");
    texCoord3iv = try Types.load(Types.PFN_GLTEXCOORD3IVPROC, "glTexCoord3iv");
    texCoord3s = try Types.load(Types.PFN_GLTEXCOORD3SPROC, "glTexCoord3s");
    texCoord3sv = try Types.load(Types.PFN_GLTEXCOORD3SVPROC, "glTexCoord3sv");
    texCoord4d = try Types.load(Types.PFN_GLTEXCOORD4DPROC, "glTexCoord4d");
    texCoord4dv = try Types.load(Types.PFN_GLTEXCOORD4DVPROC, "glTexCoord4dv");
    texCoord4f = try Types.load(Types.PFN_GLTEXCOORD4FPROC, "glTexCoord4f");
    texCoord4fv = try Types.load(Types.PFN_GLTEXCOORD4FVPROC, "glTexCoord4fv");
    texCoord4i = try Types.load(Types.PFN_GLTEXCOORD4IPROC, "glTexCoord4i");
    texCoord4iv = try Types.load(Types.PFN_GLTEXCOORD4IVPROC, "glTexCoord4iv");
    texCoord4s = try Types.load(Types.PFN_GLTEXCOORD4SPROC, "glTexCoord4s");
    texCoord4sv = try Types.load(Types.PFN_GLTEXCOORD4SVPROC, "glTexCoord4sv");
    texCoordP1ui = try Types.load(Types.PFN_GLTEXCOORDP1UIPROC, "glTexCoordP1ui");
    texCoordP1uiv = try Types.load(Types.PFN_GLTEXCOORDP1UIVPROC, "glTexCoordP1uiv");
    texCoordP2ui = try Types.load(Types.PFN_GLTEXCOORDP2UIPROC, "glTexCoordP2ui");
    texCoordP2uiv = try Types.load(Types.PFN_GLTEXCOORDP2UIVPROC, "glTexCoordP2uiv");
    texCoordP3ui = try Types.load(Types.PFN_GLTEXCOORDP3UIPROC, "glTexCoordP3ui");
    texCoordP3uiv = try Types.load(Types.PFN_GLTEXCOORDP3UIVPROC, "glTexCoordP3uiv");
    texCoordP4ui = try Types.load(Types.PFN_GLTEXCOORDP4UIPROC, "glTexCoordP4ui");
    texCoordP4uiv = try Types.load(Types.PFN_GLTEXCOORDP4UIVPROC, "glTexCoordP4uiv");
    texCoordPointer = try Types.load(Types.PFN_GLTEXCOORDPOINTERPROC, "glTexCoordPointer");
    texEnvf = try Types.load(Types.PFN_GLTEXENVFPROC, "glTexEnvf");
    texEnvfv = try Types.load(Types.PFN_GLTEXENVFVPROC, "glTexEnvfv");
    texEnvi = try Types.load(Types.PFN_GLTEXENVIPROC, "glTexEnvi");
    texEnviv = try Types.load(Types.PFN_GLTEXENVIVPROC, "glTexEnviv");
    texGend = try Types.load(Types.PFN_GLTEXGENDPROC, "glTexGend");
    texGendv = try Types.load(Types.PFN_GLTEXGENDVPROC, "glTexGendv");
    texGenf = try Types.load(Types.PFN_GLTEXGENFPROC, "glTexGenf");
    texGenfv = try Types.load(Types.PFN_GLTEXGENFVPROC, "glTexGenfv");
    texGeni = try Types.load(Types.PFN_GLTEXGENIPROC, "glTexGeni");
    texGeniv = try Types.load(Types.PFN_GLTEXGENIVPROC, "glTexGeniv");
    texImage1D = try Types.load(Types.PFN_GLTEXIMAGE1DPROC, "glTexImage1D");
    texImage2D = try Types.load(Types.PFN_GLTEXIMAGE2DPROC, "glTexImage2D");
    texImage2DMultisample = try Types.load(Types.PFN_GLTEXIMAGE2DMULTISAMPLEPROC, "glTexImage2DMultisample");
    texImage3D = try Types.load(Types.PFN_GLTEXIMAGE3DPROC, "glTexImage3D");
    texImage3DMultisample = try Types.load(Types.PFN_GLTEXIMAGE3DMULTISAMPLEPROC, "glTexImage3DMultisample");
    texParameterIiv = try Types.load(Types.PFN_GLTEXPARAMETERIIVPROC, "glTexParameterIiv");
    texParameterIuiv = try Types.load(Types.PFN_GLTEXPARAMETERIUIVPROC, "glTexParameterIuiv");
    texParameterf = try Types.load(Types.PFN_GLTEXPARAMETERFPROC, "glTexParameterf");
    texParameterfv = try Types.load(Types.PFN_GLTEXPARAMETERFVPROC, "glTexParameterfv");
    texParameteri = try Types.load(Types.PFN_GLTEXPARAMETERIPROC, "glTexParameteri");
    texParameteriv = try Types.load(Types.PFN_GLTEXPARAMETERIVPROC, "glTexParameteriv");
    texStorage1D = try Types.load(Types.PFN_GLTEXSTORAGE1DPROC, "glTexStorage1D");
    texStorage2D = try Types.load(Types.PFN_GLTEXSTORAGE2DPROC, "glTexStorage2D");
    texStorage2DMultisample = try Types.load(Types.PFN_GLTEXSTORAGE2DMULTISAMPLEPROC, "glTexStorage2DMultisample");
    texStorage3D = try Types.load(Types.PFN_GLTEXSTORAGE3DPROC, "glTexStorage3D");
    texStorage3DMultisample = try Types.load(Types.PFN_GLTEXSTORAGE3DMULTISAMPLEPROC, "glTexStorage3DMultisample");
    texSubImage1D = try Types.load(Types.PFN_GLTEXSUBIMAGE1DPROC, "glTexSubImage1D");
    texSubImage2D = try Types.load(Types.PFN_GLTEXSUBIMAGE2DPROC, "glTexSubImage2D");
    texSubImage3D = try Types.load(Types.PFN_GLTEXSUBIMAGE3DPROC, "glTexSubImage3D");
    textureBarrier = try Types.load(Types.PFN_GLTEXTUREBARRIERPROC, "glTextureBarrier");
    textureBuffer = try Types.load(Types.PFN_GLTEXTUREBUFFERPROC, "glTextureBuffer");
    textureBufferRange = try Types.load(Types.PFN_GLTEXTUREBUFFERRANGEPROC, "glTextureBufferRange");
    textureParameterIiv = try Types.load(Types.PFN_GLTEXTUREPARAMETERIIVPROC, "glTextureParameterIiv");
    textureParameterIuiv = try Types.load(Types.PFN_GLTEXTUREPARAMETERIUIVPROC, "glTextureParameterIuiv");
    textureParameterf = try Types.load(Types.PFN_GLTEXTUREPARAMETERFPROC, "glTextureParameterf");
    textureParameterfv = try Types.load(Types.PFN_GLTEXTUREPARAMETERFVPROC, "glTextureParameterfv");
    textureParameteri = try Types.load(Types.PFN_GLTEXTUREPARAMETERIPROC, "glTextureParameteri");
    textureParameteriv = try Types.load(Types.PFN_GLTEXTUREPARAMETERIVPROC, "glTextureParameteriv");
    textureStorage1D = try Types.load(Types.PFN_GLTEXTURESTORAGE1DPROC, "glTextureStorage1D");
    textureStorage2D = try Types.load(Types.PFN_GLTEXTURESTORAGE2DPROC, "glTextureStorage2D");
    textureStorage2DMultisample = try Types.load(Types.PFN_GLTEXTURESTORAGE2DMULTISAMPLEPROC, "glTextureStorage2DMultisample");
    textureStorage3D = try Types.load(Types.PFN_GLTEXTURESTORAGE3DPROC, "glTextureStorage3D");
    textureStorage3DMultisample = try Types.load(Types.PFN_GLTEXTURESTORAGE3DMULTISAMPLEPROC, "glTextureStorage3DMultisample");
    textureSubImage1D = try Types.load(Types.PFN_GLTEXTURESUBIMAGE1DPROC, "glTextureSubImage1D");
    textureSubImage2D = try Types.load(Types.PFN_GLTEXTURESUBIMAGE2DPROC, "glTextureSubImage2D");
    textureSubImage3D = try Types.load(Types.PFN_GLTEXTURESUBIMAGE3DPROC, "glTextureSubImage3D");
    textureView = try Types.load(Types.PFN_GLTEXTUREVIEWPROC, "glTextureView");
    transformFeedbackBufferBase = try Types.load(Types.PFN_GLTRANSFORMFEEDBACKBUFFERBASEPROC, "glTransformFeedbackBufferBase");
    transformFeedbackBufferRange = try Types.load(Types.PFN_GLTRANSFORMFEEDBACKBUFFERRANGEPROC, "glTransformFeedbackBufferRange");
    transformFeedbackVaryings = try Types.load(Types.PFN_GLTRANSFORMFEEDBACKVARYINGSPROC, "glTransformFeedbackVaryings");
    translated = try Types.load(Types.PFN_GLTRANSLATEDPROC, "glTranslated");
    translatef = try Types.load(Types.PFN_GLTRANSLATEFPROC, "glTranslatef");
    uniform1d = try Types.load(Types.PFN_GLUNIFORM1DPROC, "glUniform1d");
    uniform1dv = try Types.load(Types.PFN_GLUNIFORM1DVPROC, "glUniform1dv");
    uniform1f = try Types.load(Types.PFN_GLUNIFORM1FPROC, "glUniform1f");
    uniform1fv = try Types.load(Types.PFN_GLUNIFORM1FVPROC, "glUniform1fv");
    uniform1i = try Types.load(Types.PFN_GLUNIFORM1IPROC, "glUniform1i");
    uniform1iv = try Types.load(Types.PFN_GLUNIFORM1IVPROC, "glUniform1iv");
    uniform1ui = try Types.load(Types.PFN_GLUNIFORM1UIPROC, "glUniform1ui");
    uniform1uiv = try Types.load(Types.PFN_GLUNIFORM1UIVPROC, "glUniform1uiv");
    uniform2d = try Types.load(Types.PFN_GLUNIFORM2DPROC, "glUniform2d");
    uniform2dv = try Types.load(Types.PFN_GLUNIFORM2DVPROC, "glUniform2dv");
    uniform2f = try Types.load(Types.PFN_GLUNIFORM2FPROC, "glUniform2f");
    uniform2fv = try Types.load(Types.PFN_GLUNIFORM2FVPROC, "glUniform2fv");
    uniform2i = try Types.load(Types.PFN_GLUNIFORM2IPROC, "glUniform2i");
    uniform2iv = try Types.load(Types.PFN_GLUNIFORM2IVPROC, "glUniform2iv");
    uniform2ui = try Types.load(Types.PFN_GLUNIFORM2UIPROC, "glUniform2ui");
    uniform2uiv = try Types.load(Types.PFN_GLUNIFORM2UIVPROC, "glUniform2uiv");
    uniform3d = try Types.load(Types.PFN_GLUNIFORM3DPROC, "glUniform3d");
    uniform3dv = try Types.load(Types.PFN_GLUNIFORM3DVPROC, "glUniform3dv");
    uniform3f = try Types.load(Types.PFN_GLUNIFORM3FPROC, "glUniform3f");
    uniform3fv = try Types.load(Types.PFN_GLUNIFORM3FVPROC, "glUniform3fv");
    uniform3i = try Types.load(Types.PFN_GLUNIFORM3IPROC, "glUniform3i");
    uniform3iv = try Types.load(Types.PFN_GLUNIFORM3IVPROC, "glUniform3iv");
    uniform3ui = try Types.load(Types.PFN_GLUNIFORM3UIPROC, "glUniform3ui");
    uniform3uiv = try Types.load(Types.PFN_GLUNIFORM3UIVPROC, "glUniform3uiv");
    uniform4d = try Types.load(Types.PFN_GLUNIFORM4DPROC, "glUniform4d");
    uniform4dv = try Types.load(Types.PFN_GLUNIFORM4DVPROC, "glUniform4dv");
    uniform4f = try Types.load(Types.PFN_GLUNIFORM4FPROC, "glUniform4f");
    uniform4fv = try Types.load(Types.PFN_GLUNIFORM4FVPROC, "glUniform4fv");
    uniform4i = try Types.load(Types.PFN_GLUNIFORM4IPROC, "glUniform4i");
    uniform4iv = try Types.load(Types.PFN_GLUNIFORM4IVPROC, "glUniform4iv");
    uniform4ui = try Types.load(Types.PFN_GLUNIFORM4UIPROC, "glUniform4ui");
    uniform4uiv = try Types.load(Types.PFN_GLUNIFORM4UIVPROC, "glUniform4uiv");
    uniformBlockBinding = try Types.load(Types.PFN_GLUNIFORMBLOCKBINDINGPROC, "glUniformBlockBinding");
    uniformMatrix2dv = try Types.load(Types.PFN_GLUNIFORMMATRIX2DVPROC, "glUniformMatrix2dv");
    uniformMatrix2fv = try Types.load(Types.PFN_GLUNIFORMMATRIX2FVPROC, "glUniformMatrix2fv");
    uniformMatrix2x3dv = try Types.load(Types.PFN_GLUNIFORMMATRIX2X3DVPROC, "glUniformMatrix2x3dv");
    uniformMatrix2x3fv = try Types.load(Types.PFN_GLUNIFORMMATRIX2X3FVPROC, "glUniformMatrix2x3fv");
    uniformMatrix2x4dv = try Types.load(Types.PFN_GLUNIFORMMATRIX2X4DVPROC, "glUniformMatrix2x4dv");
    uniformMatrix2x4fv = try Types.load(Types.PFN_GLUNIFORMMATRIX2X4FVPROC, "glUniformMatrix2x4fv");
    uniformMatrix3dv = try Types.load(Types.PFN_GLUNIFORMMATRIX3DVPROC, "glUniformMatrix3dv");
    uniformMatrix3fv = try Types.load(Types.PFN_GLUNIFORMMATRIX3FVPROC, "glUniformMatrix3fv");
    uniformMatrix3x2dv = try Types.load(Types.PFN_GLUNIFORMMATRIX3X2DVPROC, "glUniformMatrix3x2dv");
    uniformMatrix3x2fv = try Types.load(Types.PFN_GLUNIFORMMATRIX3X2FVPROC, "glUniformMatrix3x2fv");
    uniformMatrix3x4dv = try Types.load(Types.PFN_GLUNIFORMMATRIX3X4DVPROC, "glUniformMatrix3x4dv");
    uniformMatrix3x4fv = try Types.load(Types.PFN_GLUNIFORMMATRIX3X4FVPROC, "glUniformMatrix3x4fv");
    uniformMatrix4dv = try Types.load(Types.PFN_GLUNIFORMMATRIX4DVPROC, "glUniformMatrix4dv");
    uniformMatrix4fv = try Types.load(Types.PFN_GLUNIFORMMATRIX4FVPROC, "glUniformMatrix4fv");
    uniformMatrix4x2dv = try Types.load(Types.PFN_GLUNIFORMMATRIX4X2DVPROC, "glUniformMatrix4x2dv");
    uniformMatrix4x2fv = try Types.load(Types.PFN_GLUNIFORMMATRIX4X2FVPROC, "glUniformMatrix4x2fv");
    uniformMatrix4x3dv = try Types.load(Types.PFN_GLUNIFORMMATRIX4X3DVPROC, "glUniformMatrix4x3dv");
    uniformMatrix4x3fv = try Types.load(Types.PFN_GLUNIFORMMATRIX4X3FVPROC, "glUniformMatrix4x3fv");
    uniformSubroutinesuiv = try Types.load(Types.PFN_GLUNIFORMSUBROUTINESUIVPROC, "glUniformSubroutinesuiv");
    unmapBuffer = try Types.load(Types.PFN_GLUNMAPBUFFERPROC, "glUnmapBuffer");
    unmapNamedBuffer = try Types.load(Types.PFN_GLUNMAPNAMEDBUFFERPROC, "glUnmapNamedBuffer");
    useProgram = try Types.load(Types.PFN_GLUSEPROGRAMPROC, "glUseProgram");
    useProgramStages = try Types.load(Types.PFN_GLUSEPROGRAMSTAGESPROC, "glUseProgramStages");
    validateProgram = try Types.load(Types.PFN_GLVALIDATEPROGRAMPROC, "glValidateProgram");
    validateProgramPipeline = try Types.load(Types.PFN_GLVALIDATEPROGRAMPIPELINEPROC, "glValidateProgramPipeline");
    vertex2d = try Types.load(Types.PFN_GLVERTEX2DPROC, "glVertex2d");
    vertex2dv = try Types.load(Types.PFN_GLVERTEX2DVPROC, "glVertex2dv");
    vertex2f = try Types.load(Types.PFN_GLVERTEX2FPROC, "glVertex2f");
    vertex2fv = try Types.load(Types.PFN_GLVERTEX2FVPROC, "glVertex2fv");
    vertex2i = try Types.load(Types.PFN_GLVERTEX2IPROC, "glVertex2i");
    vertex2iv = try Types.load(Types.PFN_GLVERTEX2IVPROC, "glVertex2iv");
    vertex2s = try Types.load(Types.PFN_GLVERTEX2SPROC, "glVertex2s");
    vertex2sv = try Types.load(Types.PFN_GLVERTEX2SVPROC, "glVertex2sv");
    vertex3d = try Types.load(Types.PFN_GLVERTEX3DPROC, "glVertex3d");
    vertex3dv = try Types.load(Types.PFN_GLVERTEX3DVPROC, "glVertex3dv");
    vertex3f = try Types.load(Types.PFN_GLVERTEX3FPROC, "glVertex3f");
    vertex3fv = try Types.load(Types.PFN_GLVERTEX3FVPROC, "glVertex3fv");
    vertex3i = try Types.load(Types.PFN_GLVERTEX3IPROC, "glVertex3i");
    vertex3iv = try Types.load(Types.PFN_GLVERTEX3IVPROC, "glVertex3iv");
    vertex3s = try Types.load(Types.PFN_GLVERTEX3SPROC, "glVertex3s");
    vertex3sv = try Types.load(Types.PFN_GLVERTEX3SVPROC, "glVertex3sv");
    vertex4d = try Types.load(Types.PFN_GLVERTEX4DPROC, "glVertex4d");
    vertex4dv = try Types.load(Types.PFN_GLVERTEX4DVPROC, "glVertex4dv");
    vertex4f = try Types.load(Types.PFN_GLVERTEX4FPROC, "glVertex4f");
    vertex4fv = try Types.load(Types.PFN_GLVERTEX4FVPROC, "glVertex4fv");
    vertex4i = try Types.load(Types.PFN_GLVERTEX4IPROC, "glVertex4i");
    vertex4iv = try Types.load(Types.PFN_GLVERTEX4IVPROC, "glVertex4iv");
    vertex4s = try Types.load(Types.PFN_GLVERTEX4SPROC, "glVertex4s");
    vertex4sv = try Types.load(Types.PFN_GLVERTEX4SVPROC, "glVertex4sv");
    vertexArrayAttribBinding = try Types.load(Types.PFN_GLVERTEXARRAYATTRIBBINDINGPROC, "glVertexArrayAttribBinding");
    vertexArrayAttribFormat = try Types.load(Types.PFN_GLVERTEXARRAYATTRIBFORMATPROC, "glVertexArrayAttribFormat");
    vertexArrayAttribIFormat = try Types.load(Types.PFN_GLVERTEXARRAYATTRIBIFORMATPROC, "glVertexArrayAttribIFormat");
    vertexArrayAttribLFormat = try Types.load(Types.PFN_GLVERTEXARRAYATTRIBLFORMATPROC, "glVertexArrayAttribLFormat");
    vertexArrayBindingDivisor = try Types.load(Types.PFN_GLVERTEXARRAYBINDINGDIVISORPROC, "glVertexArrayBindingDivisor");
    vertexArrayElementBuffer = try Types.load(Types.PFN_GLVERTEXARRAYELEMENTBUFFERPROC, "glVertexArrayElementBuffer");
    vertexArrayVertexBuffer = try Types.load(Types.PFN_GLVERTEXARRAYVERTEXBUFFERPROC, "glVertexArrayVertexBuffer");
    vertexArrayVertexBuffers = try Types.load(Types.PFN_GLVERTEXARRAYVERTEXBUFFERSPROC, "glVertexArrayVertexBuffers");
    vertexAttrib1d = try Types.load(Types.PFN_GLVERTEXATTRIB1DPROC, "glVertexAttrib1d");
    vertexAttrib1dv = try Types.load(Types.PFN_GLVERTEXATTRIB1DVPROC, "glVertexAttrib1dv");
    vertexAttrib1f = try Types.load(Types.PFN_GLVERTEXATTRIB1FPROC, "glVertexAttrib1f");
    vertexAttrib1fv = try Types.load(Types.PFN_GLVERTEXATTRIB1FVPROC, "glVertexAttrib1fv");
    vertexAttrib1s = try Types.load(Types.PFN_GLVERTEXATTRIB1SPROC, "glVertexAttrib1s");
    vertexAttrib1sv = try Types.load(Types.PFN_GLVERTEXATTRIB1SVPROC, "glVertexAttrib1sv");
    vertexAttrib2d = try Types.load(Types.PFN_GLVERTEXATTRIB2DPROC, "glVertexAttrib2d");
    vertexAttrib2dv = try Types.load(Types.PFN_GLVERTEXATTRIB2DVPROC, "glVertexAttrib2dv");
    vertexAttrib2f = try Types.load(Types.PFN_GLVERTEXATTRIB2FPROC, "glVertexAttrib2f");
    vertexAttrib2fv = try Types.load(Types.PFN_GLVERTEXATTRIB2FVPROC, "glVertexAttrib2fv");
    vertexAttrib2s = try Types.load(Types.PFN_GLVERTEXATTRIB2SPROC, "glVertexAttrib2s");
    vertexAttrib2sv = try Types.load(Types.PFN_GLVERTEXATTRIB2SVPROC, "glVertexAttrib2sv");
    vertexAttrib3d = try Types.load(Types.PFN_GLVERTEXATTRIB3DPROC, "glVertexAttrib3d");
    vertexAttrib3dv = try Types.load(Types.PFN_GLVERTEXATTRIB3DVPROC, "glVertexAttrib3dv");
    vertexAttrib3f = try Types.load(Types.PFN_GLVERTEXATTRIB3FPROC, "glVertexAttrib3f");
    vertexAttrib3fv = try Types.load(Types.PFN_GLVERTEXATTRIB3FVPROC, "glVertexAttrib3fv");
    vertexAttrib3s = try Types.load(Types.PFN_GLVERTEXATTRIB3SPROC, "glVertexAttrib3s");
    vertexAttrib3sv = try Types.load(Types.PFN_GLVERTEXATTRIB3SVPROC, "glVertexAttrib3sv");
    vertexAttrib4Nbv = try Types.load(Types.PFN_GLVERTEXATTRIB4NBVPROC, "glVertexAttrib4Nbv");
    vertexAttrib4Niv = try Types.load(Types.PFN_GLVERTEXATTRIB4NIVPROC, "glVertexAttrib4Niv");
    vertexAttrib4Nsv = try Types.load(Types.PFN_GLVERTEXATTRIB4NSVPROC, "glVertexAttrib4Nsv");
    vertexAttrib4Nub = try Types.load(Types.PFN_GLVERTEXATTRIB4NUBPROC, "glVertexAttrib4Nub");
    vertexAttrib4Nubv = try Types.load(Types.PFN_GLVERTEXATTRIB4NUBVPROC, "glVertexAttrib4Nubv");
    vertexAttrib4Nuiv = try Types.load(Types.PFN_GLVERTEXATTRIB4NUIVPROC, "glVertexAttrib4Nuiv");
    vertexAttrib4Nusv = try Types.load(Types.PFN_GLVERTEXATTRIB4NUSVPROC, "glVertexAttrib4Nusv");
    vertexAttrib4bv = try Types.load(Types.PFN_GLVERTEXATTRIB4BVPROC, "glVertexAttrib4bv");
    vertexAttrib4d = try Types.load(Types.PFN_GLVERTEXATTRIB4DPROC, "glVertexAttrib4d");
    vertexAttrib4dv = try Types.load(Types.PFN_GLVERTEXATTRIB4DVPROC, "glVertexAttrib4dv");
    vertexAttrib4f = try Types.load(Types.PFN_GLVERTEXATTRIB4FPROC, "glVertexAttrib4f");
    vertexAttrib4fv = try Types.load(Types.PFN_GLVERTEXATTRIB4FVPROC, "glVertexAttrib4fv");
    vertexAttrib4iv = try Types.load(Types.PFN_GLVERTEXATTRIB4IVPROC, "glVertexAttrib4iv");
    vertexAttrib4s = try Types.load(Types.PFN_GLVERTEXATTRIB4SPROC, "glVertexAttrib4s");
    vertexAttrib4sv = try Types.load(Types.PFN_GLVERTEXATTRIB4SVPROC, "glVertexAttrib4sv");
    vertexAttrib4ubv = try Types.load(Types.PFN_GLVERTEXATTRIB4UBVPROC, "glVertexAttrib4ubv");
    vertexAttrib4uiv = try Types.load(Types.PFN_GLVERTEXATTRIB4UIVPROC, "glVertexAttrib4uiv");
    vertexAttrib4usv = try Types.load(Types.PFN_GLVERTEXATTRIB4USVPROC, "glVertexAttrib4usv");
    vertexAttribBinding = try Types.load(Types.PFN_GLVERTEXATTRIBBINDINGPROC, "glVertexAttribBinding");
    vertexAttribDivisor = try Types.load(Types.PFN_GLVERTEXATTRIBDIVISORPROC, "glVertexAttribDivisor");
    vertexAttribFormat = try Types.load(Types.PFN_GLVERTEXATTRIBFORMATPROC, "glVertexAttribFormat");
    vertexAttribI1i = try Types.load(Types.PFN_GLVERTEXATTRIBI1IPROC, "glVertexAttribI1i");
    vertexAttribI1iv = try Types.load(Types.PFN_GLVERTEXATTRIBI1IVPROC, "glVertexAttribI1iv");
    vertexAttribI1ui = try Types.load(Types.PFN_GLVERTEXATTRIBI1UIPROC, "glVertexAttribI1ui");
    vertexAttribI1uiv = try Types.load(Types.PFN_GLVERTEXATTRIBI1UIVPROC, "glVertexAttribI1uiv");
    vertexAttribI2i = try Types.load(Types.PFN_GLVERTEXATTRIBI2IPROC, "glVertexAttribI2i");
    vertexAttribI2iv = try Types.load(Types.PFN_GLVERTEXATTRIBI2IVPROC, "glVertexAttribI2iv");
    vertexAttribI2ui = try Types.load(Types.PFN_GLVERTEXATTRIBI2UIPROC, "glVertexAttribI2ui");
    vertexAttribI2uiv = try Types.load(Types.PFN_GLVERTEXATTRIBI2UIVPROC, "glVertexAttribI2uiv");
    vertexAttribI3i = try Types.load(Types.PFN_GLVERTEXATTRIBI3IPROC, "glVertexAttribI3i");
    vertexAttribI3iv = try Types.load(Types.PFN_GLVERTEXATTRIBI3IVPROC, "glVertexAttribI3iv");
    vertexAttribI3ui = try Types.load(Types.PFN_GLVERTEXATTRIBI3UIPROC, "glVertexAttribI3ui");
    vertexAttribI3uiv = try Types.load(Types.PFN_GLVERTEXATTRIBI3UIVPROC, "glVertexAttribI3uiv");
    vertexAttribI4bv = try Types.load(Types.PFN_GLVERTEXATTRIBI4BVPROC, "glVertexAttribI4bv");
    vertexAttribI4i = try Types.load(Types.PFN_GLVERTEXATTRIBI4IPROC, "glVertexAttribI4i");
    vertexAttribI4iv = try Types.load(Types.PFN_GLVERTEXATTRIBI4IVPROC, "glVertexAttribI4iv");
    vertexAttribI4sv = try Types.load(Types.PFN_GLVERTEXATTRIBI4SVPROC, "glVertexAttribI4sv");
    vertexAttribI4ubv = try Types.load(Types.PFN_GLVERTEXATTRIBI4UBVPROC, "glVertexAttribI4ubv");
    vertexAttribI4ui = try Types.load(Types.PFN_GLVERTEXATTRIBI4UIPROC, "glVertexAttribI4ui");
    vertexAttribI4uiv = try Types.load(Types.PFN_GLVERTEXATTRIBI4UIVPROC, "glVertexAttribI4uiv");
    vertexAttribI4usv = try Types.load(Types.PFN_GLVERTEXATTRIBI4USVPROC, "glVertexAttribI4usv");
    vertexAttribIFormat = try Types.load(Types.PFN_GLVERTEXATTRIBIFORMATPROC, "glVertexAttribIFormat");
    vertexAttribIPointer = try Types.load(Types.PFN_GLVERTEXATTRIBIPOINTERPROC, "glVertexAttribIPointer");
    vertexAttribL1d = try Types.load(Types.PFN_GLVERTEXATTRIBL1DPROC, "glVertexAttribL1d");
    vertexAttribL1dv = try Types.load(Types.PFN_GLVERTEXATTRIBL1DVPROC, "glVertexAttribL1dv");
    vertexAttribL2d = try Types.load(Types.PFN_GLVERTEXATTRIBL2DPROC, "glVertexAttribL2d");
    vertexAttribL2dv = try Types.load(Types.PFN_GLVERTEXATTRIBL2DVPROC, "glVertexAttribL2dv");
    vertexAttribL3d = try Types.load(Types.PFN_GLVERTEXATTRIBL3DPROC, "glVertexAttribL3d");
    vertexAttribL3dv = try Types.load(Types.PFN_GLVERTEXATTRIBL3DVPROC, "glVertexAttribL3dv");
    vertexAttribL4d = try Types.load(Types.PFN_GLVERTEXATTRIBL4DPROC, "glVertexAttribL4d");
    vertexAttribL4dv = try Types.load(Types.PFN_GLVERTEXATTRIBL4DVPROC, "glVertexAttribL4dv");
    vertexAttribLFormat = try Types.load(Types.PFN_GLVERTEXATTRIBLFORMATPROC, "glVertexAttribLFormat");
    vertexAttribLPointer = try Types.load(Types.PFN_GLVERTEXATTRIBLPOINTERPROC, "glVertexAttribLPointer");
    vertexAttribP1ui = try Types.load(Types.PFN_GLVERTEXATTRIBP1UIPROC, "glVertexAttribP1ui");
    vertexAttribP1uiv = try Types.load(Types.PFN_GLVERTEXATTRIBP1UIVPROC, "glVertexAttribP1uiv");
    vertexAttribP2ui = try Types.load(Types.PFN_GLVERTEXATTRIBP2UIPROC, "glVertexAttribP2ui");
    vertexAttribP2uiv = try Types.load(Types.PFN_GLVERTEXATTRIBP2UIVPROC, "glVertexAttribP2uiv");
    vertexAttribP3ui = try Types.load(Types.PFN_GLVERTEXATTRIBP3UIPROC, "glVertexAttribP3ui");
    vertexAttribP3uiv = try Types.load(Types.PFN_GLVERTEXATTRIBP3UIVPROC, "glVertexAttribP3uiv");
    vertexAttribP4ui = try Types.load(Types.PFN_GLVERTEXATTRIBP4UIPROC, "glVertexAttribP4ui");
    vertexAttribP4uiv = try Types.load(Types.PFN_GLVERTEXATTRIBP4UIVPROC, "glVertexAttribP4uiv");
    vertexAttribPointer = try Types.load(Types.PFN_GLVERTEXATTRIBPOINTERPROC, "glVertexAttribPointer");
    vertexBindingDivisor = try Types.load(Types.PFN_GLVERTEXBINDINGDIVISORPROC, "glVertexBindingDivisor");
    vertexP2ui = try Types.load(Types.PFN_GLVERTEXP2UIPROC, "glVertexP2ui");
    vertexP2uiv = try Types.load(Types.PFN_GLVERTEXP2UIVPROC, "glVertexP2uiv");
    vertexP3ui = try Types.load(Types.PFN_GLVERTEXP3UIPROC, "glVertexP3ui");
    vertexP3uiv = try Types.load(Types.PFN_GLVERTEXP3UIVPROC, "glVertexP3uiv");
    vertexP4ui = try Types.load(Types.PFN_GLVERTEXP4UIPROC, "glVertexP4ui");
    vertexP4uiv = try Types.load(Types.PFN_GLVERTEXP4UIVPROC, "glVertexP4uiv");
    vertexPointer = try Types.load(Types.PFN_GLVERTEXPOINTERPROC, "glVertexPointer");
    viewport = try Types.load(Types.PFN_GLVIEWPORTPROC, "glViewport");
    viewportArrayv = try Types.load(Types.PFN_GLVIEWPORTARRAYVPROC, "glViewportArrayv");
    viewportIndexedf = try Types.load(Types.PFN_GLVIEWPORTINDEXEDFPROC, "glViewportIndexedf");
    viewportIndexedfv = try Types.load(Types.PFN_GLVIEWPORTINDEXEDFVPROC, "glViewportIndexedfv");
    waitSync = try Types.load(Types.PFN_GLWAITSYNCPROC, "glWaitSync");
    windowPos2d = try Types.load(Types.PFN_GLWINDOWPOS2DPROC, "glWindowPos2d");
    windowPos2dv = try Types.load(Types.PFN_GLWINDOWPOS2DVPROC, "glWindowPos2dv");
    windowPos2f = try Types.load(Types.PFN_GLWINDOWPOS2FPROC, "glWindowPos2f");
    windowPos2fv = try Types.load(Types.PFN_GLWINDOWPOS2FVPROC, "glWindowPos2fv");
    windowPos2i = try Types.load(Types.PFN_GLWINDOWPOS2IPROC, "glWindowPos2i");
    windowPos2iv = try Types.load(Types.PFN_GLWINDOWPOS2IVPROC, "glWindowPos2iv");
    windowPos2s = try Types.load(Types.PFN_GLWINDOWPOS2SPROC, "glWindowPos2s");
    windowPos2sv = try Types.load(Types.PFN_GLWINDOWPOS2SVPROC, "glWindowPos2sv");
    windowPos3d = try Types.load(Types.PFN_GLWINDOWPOS3DPROC, "glWindowPos3d");
    windowPos3dv = try Types.load(Types.PFN_GLWINDOWPOS3DVPROC, "glWindowPos3dv");
    windowPos3f = try Types.load(Types.PFN_GLWINDOWPOS3FPROC, "glWindowPos3f");
    windowPos3fv = try Types.load(Types.PFN_GLWINDOWPOS3FVPROC, "glWindowPos3fv");
    windowPos3i = try Types.load(Types.PFN_GLWINDOWPOS3IPROC, "glWindowPos3i");
    windowPos3iv = try Types.load(Types.PFN_GLWINDOWPOS3IVPROC, "glWindowPos3iv");
    windowPos3s = try Types.load(Types.PFN_GLWINDOWPOS3SPROC, "glWindowPos3s");
}

const PFN_WGLCREATECONTEXTATTRIBSARBPROC = *const fn (win32.HDC, ?win32.HGLRC, [*]const i32) callconv(.C) ?win32.HGLRC;
const PFN_WGLCHOOSEPIXELFORMATARBPROC = *const fn (win32.HDC, [*]const i32, ?[*]const f32, u32, *i32, *u32) callconv(.C) win32.BOOL;

const LoadFunction = struct { wglCreateContextAttribsARB: PFN_WGLCREATECONTEXTATTRIBSARBPROC = undefined, wglChoosePixelFormatARB: PFN_WGLCHOOSEPIXELFORMATARBPROC = undefined };

const WGL_CONTEXT_MAJOR_VERSION_ARB = 0x2091;
const WGL_CONTEXT_MINOR_VERSION_ARB = 0x2092;
const WGL_CONTEXT_PROFILE_MASK_ARB = 0x9126;

const WGL_DRAW_TO_WINDOW_ARB = 0x2001;
const WGL_ACCELERATION_ARB = 0x2003;
const WGL_SUPPORT_OPENGL_ARB = 0x2010;
const WGL_DOUBLE_BUFFER_ARB = 0x2011;
const WGL_PIXEL_TYPE_ARB = 0x2013;
const WGL_COLOR_BITS_ARB = 0x2014;
const WGL_DEPTH_BITS_ARB = 0x2022;
const WGL_STENCIL_BITS_ARB = 0x2023;

const WGL_FULL_ACCELERATION_ARB = 0x2027;
const WGL_TYPE_RGBA_ARB = 0x202B;

const WGL_CONTEXT_CORE_PROFILE_BIT_ARB = 1;

fn loadWin32OpenGLContext() !LoadFunction {
    var instance = win32.getModuleHandle(null);
    const wcex = win32.WNDCLASSEXA{ .style = win32.CS_HREDRAW | win32.CS_VREDRAW | win32.CS_OWNDC, .lpfnWndProc = win32.DefWindowProcA, .hInstance = instance, .hIcon = null, .hCursor = null, .hbrBackground = null, .lpszMenuName = null, .lpszClassName = "OpenGl Extension Loader", .hIconSm = null };
    _ = try win32.registerClassExA(&wcex);
    var hwnd = try win32.createWindowExA(0, "OpenGl Extension Loader", "OpenGl Extension Loader", 0, win32.CW_USEDEFAULT, win32.CW_USEDEFAULT, win32.CW_USEDEFAULT, win32.CW_USEDEFAULT, null, null, instance, null);
    var dc = win32.GetDC(hwnd);
    if (dc == null) {
        _ = try win32.destroyWindow(hwnd);
        return error.ExtensionLoadFailed;
    }
    var pfd: win32.PIXELFORMATDESCRIPTOR = .{ .nSize = @sizeOf(win32.PIXELFORMATDESCRIPTOR), .nVersion = 1, .iPixelType = win32.PFD_TYPE_RGBA, .dwFlags = win32.PFD_DRAW_TO_WINDOW | win32.PFD_SUPPORT_OPENGL | win32.PFD_DOUBLEBUFFER, .cColorBits = 32, .cAlphaBits = 8, .cDepthBits = 24, .cStencilBits = 8, .iLayerType = win32.PFD_MAIN_PLANE };

    var pixel_format = win32.choosePixelFormat(dc, &pfd);
    if (!win32.setPixelFormat(dc, pixel_format, &pfd)) {
        return error.SetPixelFormatFailed;
    }

    var dummy_context = win32.glCreateContext(dc);
    if (dummy_context == null) {
        return error.DummyContextCreateFailed;
    }
    if (!win32.glMakeCurrent(dc, dummy_context)) {
        return error.MakeCurrentContextFailed;
    }

    const wglCreateContextAttribsARB = try Types.load(PFN_WGLCREATECONTEXTATTRIBSARBPROC, "wglCreateContextAttribsARB");
    const wglChoosePixelFormatARB = try Types.load(PFN_WGLCHOOSEPIXELFORMATARBPROC, "wglChoosePixelFormatARB");

    if (!win32.glMakeCurrent(dc, null)) {
        return error.MakeCurrentContextFailed;
    }
    if (!win32.glDeleteContext(dummy_context)) {
        return error.DeleteContextFailed;
    }
    _ = win32.ReleaseDC(hwnd, dc.?);
    _ = try win32.destroyWindow(hwnd);
    return LoadFunction{ .wglCreateContextAttribsARB = wglCreateContextAttribsARB, .wglChoosePixelFormatARB = wglChoosePixelFormatARB };
}

pub fn initContext(dc: win32.HDC, major: i32, minor: i32) !win32.HGLRC {
    const loadFunc = try loadWin32OpenGLContext();
    const pixel_format_attribs = [_]i32{ WGL_DRAW_TO_WINDOW_ARB, 1, WGL_SUPPORT_OPENGL_ARB, 1, WGL_DOUBLE_BUFFER_ARB, 1, WGL_ACCELERATION_ARB, WGL_FULL_ACCELERATION_ARB, WGL_PIXEL_TYPE_ARB, WGL_TYPE_RGBA_ARB, WGL_COLOR_BITS_ARB, 32, WGL_DEPTH_BITS_ARB, 24, WGL_STENCIL_BITS_ARB, 8, 0 };

    var pixel_format: i32 = undefined;
    var num_formats: u32 = undefined;
    _ = loadFunc.wglChoosePixelFormatARB(dc, &pixel_format_attribs, null, 1, &pixel_format, &num_formats);

    var pfd: win32.PIXELFORMATDESCRIPTOR = .{};
    _ = win32.DescribePixelFormat(dc, pixel_format, @sizeOf(win32.PIXELFORMATDESCRIPTOR), &pfd);
    _ = win32.SetPixelFormat(dc, pixel_format, &pfd);

    const context_attribs = [_]i32{ WGL_CONTEXT_MAJOR_VERSION_ARB, major, WGL_CONTEXT_MINOR_VERSION_ARB, minor, WGL_CONTEXT_PROFILE_MASK_ARB, WGL_CONTEXT_CORE_PROFILE_BIT_ARB, 0 };

    var context = loadFunc.wglCreateContextAttribsARB(dc, null, &context_attribs);
    _ = win32.glMakeCurrent(dc, context);
    return context.?;
}
